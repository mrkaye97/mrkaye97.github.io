<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Matt Kaye</title>
<link>https://www.matthewrkaye.com/posts.html</link>
<atom:link href="https://www.matthewrkaye.com/posts.xml" rel="self" type="application/rss+xml"/>
<description>Matt Kaye&#39;s personal website</description>
<generator>quarto-1.3.353</generator>
<lastBuildDate>Tue, 06 Jun 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>A Gentle Introduction to Docker</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-06-03-docker/docker.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>If you‚Äôre doing data science work, it‚Äôs likely you‚Äôll eventually come across a situation where you need to run your code somewhere else. Whether that ‚Äúsomewhere‚Äù is the machine of a teammate, an EC2 box, a pod in a Kubernetes cluster, a runner in your team‚Äôs CI/CD rig, on a Spark cluster, and so on depends greatly on the problem you‚Äôre solving. But the ultimate point is the same: Eventually, you‚Äôll need to be able to package your code up, put it somewhere in the world other than your local machine, and have it run just like it has been for you.</p>
</section>
<section id="enter-docker" class="level2">
<h2 class="anchored" data-anchor-id="enter-docker">Enter: Docker</h2>
<p><a href="https://www.docker.com/">Docker</a> seems very complicated at first glance. And there‚Äôs a lot of jargon: Images, containers, volumes, and more, and that doesn‚Äôt even begin to cover the world of container orchestration: Docker-Compose, Kubernetes, and so on. But at its core, you can think of Docker as a little environment ‚Äì not too unlike your local machine ‚Äì that has a file system, configuration, etc. that‚Äôs packaged up into a magical box that you can run on any computer, anywhere. Or at least on computers that have Docker installed.</p>
<p>It might be simplest to consider a small example.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>Note that to run the example that will follow, you‚Äôll need to have Docker installed on your machine. All of the files necessary to run this example can be found <a href="https://github.com/mrkaye97/mrkaye97.github.io/tree/master/posts/series/doing-data-science/2023-06-03-docker/docker-example">in my blog‚Äôs Github repo</a></p>
<p>I‚Äôll use R for the example I provide in this post, but note that the same principles apply if you‚Äôre doing your work in Python, or in any other programming language.</p>
</div>
</div>
</div>
<p>Let‚Äôs imagine we want to print ‚ÄúHello from Docker!‚Äù from R. First, make a new directory called <code>docker-example</code> (or whatever you want to call it):</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> docker-example <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> docker-example</span></code></pre></div>
<p>And then we might do something like the following:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Dockerfile</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> rocker/r-ver:4.2.0</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rscript"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'Hello from Docker!'"</span>]</span></code></pre></div>
<p>If you paste that into a file called <code>Dockerfile</code>, you can then run:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> example .</span></code></pre></div>
<p>Which will build the Docker image by running each command you‚Äôve specified. Going line by line, those commands are:</p>
<ol type="1">
<li>Use the <code>rocker/r-ver:4.2.0</code> image as the <em>base</em> image. In Docker, base images are useful because they come with things (such as the R language) pre-installed, so you don‚Äôt need to install them yourself. <code>rocker/r-ver:4.2.0</code> ships with R version <code>4.2.0</code> pre-installed, which means you can run R as you would on your local.</li>
<li>After declaring the base image, we specify a command to run when <code>docker run</code> is invoked. This command is simple ‚Äì it just prints <code>Hello from Docker!</code>.</li>
</ol>
<p>Once the build has completed, you can:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run example</span></code></pre></div>
<p>and you should see:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello from Docker!"</span></span></code></pre></div>
<p>Tada üéâ! You just ran R in a Docker container. And since you have your code running in Docker, you could now run the same code on any other machine that supports Docker.</p>
</section>
<section id="more-complicated-builds" class="level2">
<h2 class="anchored" data-anchor-id="more-complicated-builds">More Complicated Builds</h2>
<p>Of course, this example was trivial. In the real world, our projects are much more complex. They have dependencies, they rely on environment variables, they have scripts that need to be run, and so on.</p>
<section id="copying-files" class="level3">
<h3 class="anchored" data-anchor-id="copying-files">Copying Files</h3>
<p>Let‚Äôs start with running a script instead of running R from the command line as we have been.</p>
<p>Create an R script called <code>example.R</code> that looks like this:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## example.R</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello from Docker!"</span>)</span></code></pre></div>
<p>And then you can update the Dockerfile by adding a <code>COPY</code> command to copy the script into your image, as follows.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Dockerfile</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> rocker/r-ver:4.2.0</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> example.R example.R</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rscript"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example.R"</span>]</span></code></pre></div>
<p>The <code>COPY</code> command tells Docker that you want to take <code>example.R</code> and put it into your image at <code>/example.R</code>. You can also specify a file path in the image, but I‚Äôm just putting the files I copy in at the root.</p>
<p>Finally, let‚Äôs build and run our Docker image again:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> example .</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run example</span></code></pre></div>
<p>Amazing! You can see in the build logs that the <code>example.R</code> script was copied into the image:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">=</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2/3</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> COPY example.R example.R</span></code></pre></div>
<p>and then running the image gives the same result as before:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello from Docker!"</span></span></code></pre></div>
</section>
<section id="installing-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="installing-dependencies">Installing Dependencies</h3>
<p>You‚Äôll generally also need to install dependencies, which you can do using the <code>RUN</code> command. Let‚Äôs update the Dockerfile to install <code>glue</code>.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Dockerfile</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> rocker/r-ver:4.2.0</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> example.R example.R</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"install.packages('glue')"</span></span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rscript"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example.R"</span>]</span></code></pre></div>
<p>Now, the third step in the build installs <code>glue</code>. And to show it works, we‚Äôll use <code>glue</code> to do a bit of string interpolation, printing the R version that‚Äôs running from the <code>R_VERSION</code> environment variable. Update <code>example.R</code> as follows:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## example.R</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello from Docker! I am running R version {Sys.getenv("R_VERSION")}'</span>))</span></code></pre></div>
<p>Building and running again should give you some new output. First, you should see <code>glue</code> installing in the build logs:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">=</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">3/3</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> RUN Rscript <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"install.packages('glue')"</span></span></code></pre></div>
<p>And once you run the image, you should see:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">Hello from Docker<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> I am running R version <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>.<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>                                                                  </span></code></pre></div>
<p>Woohoo! ü•≥ü•≥</p>
</section>
<section id="using-renv" class="level3">
<h3 class="anchored" data-anchor-id="using-renv">Using renv</h3>
<p>But as I wrote about <a href="https://matthewrkaye.com/posts/series/doing-data-science/2023-05-27-renv-dependency-management/renv-dependency-management.html">in my last post</a>, having global dependency installs is usually a bad idea. So we probably don‚Äôt want to have an <code>install.packages()</code> as a <code>RUN</code> step in the Dockerfile. Instead, let‚Äôs use <code>renv</code> to manage our dependencies.</p>
<p>From the command line, run:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv::init()"</span></span></code></pre></div>
<p>Since you already are using <code>glue</code> in your project, this will generate a lockfile that looks something like this:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"R"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4.2.0"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Repositories"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb16-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CRAN"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"URL"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cloud.r-project.org"</span></span>
<span id="cb16-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-9">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb16-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb16-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Packages"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"glue"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Package"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glue"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.6.2"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Repository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-16">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Repository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CRAN"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-17">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Requirements"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb16-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"methods"</span></span>
<span id="cb16-20">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-21">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Hash"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4f2596dfb05dac67b9dc558e5c6fba2e"</span></span>
<span id="cb16-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb16-23">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"renv"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-24">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Package"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-25">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.17.3"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-26">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Repository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-27">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Repository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CRAN"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-28">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Requirements"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb16-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utils"</span></span>
<span id="cb16-30">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-31">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Hash"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4543b8cd233ae25c6aba8548be9e747e"</span></span>
<span id="cb16-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<div class="callout callout-style-simple callout-warning no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>It‚Äôs important to keep the version of R you‚Äôre running in your Docker containers in sync with what you have on local. I‚Äôm using <code>4.2.0</code> in my Docker image, which I defined with <code>FROM rocker/r-ver:4.2.0</code>, and that version is the same version that‚Äôs recorded in my <code>renv.lock</code> file. In Python, you might use a tool like <code>pyenv</code> for managing Python versions.</p>
</div>
</div>
</div>
<p>Now that we have <code>renv</code> set up, we can update the Dockerfile a bit more:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Dockerfile</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> rocker/r-ver:4.2.0</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> example.R example.R</span>
<span id="cb17-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> renv /renv</span>
<span id="cb17-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> .Rprofile .Rprofile</span>
<span id="cb17-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> renv.lock renv.lock</span>
<span id="cb17-9"></span>
<span id="cb17-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv::restore()"</span></span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rscript"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example.R"</span>]</span></code></pre></div>
<p>Now, we‚Äôre copying all of the <code>renv</code> scaffolding into the image. And instead of running <code>install.packages(...)</code>, we‚Äôve replaced that line with <code>renv::restore()</code> which will look at the lockfile and install packages as they‚Äôre defined. Rebuilding and running the image again will give you the same result as before.</p>
<p>Now that we have a script running in Docker and are using <code>renv</code> to declare and install dependencies, let‚Äôs move on to‚Ä¶</p>
</section>
<section id="environment-variables" class="level3">
<h3 class="anchored" data-anchor-id="environment-variables">Environment Variables</h3>
<p>Sometimes we need environment variables like a Github token or a database URL, either to install our dependencies or to run our code. Depending on when the variable will be used, we can either specify it at <em>build</em> time (as a build arg) or a <em>run</em> time. Generally, it‚Äôs a good idea to only specify build args that you really need at build time.</p>
<section id="build-time-config" class="level4">
<h4 class="anchored" data-anchor-id="build-time-config">Build Time Config</h4>
<p>For instance, if your build requires downloading a package from a private Github repository (for which you need to have a <code>GITHUB_PAT</code> set), then you would specify your <code>GITHUB_PAT</code> as a build arg). Let‚Äôs try that:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Dockerfile</span></span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> rocker/r-ver:4.2.0</span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ARG</span> GITHUB_PAT</span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Note: don't actually do this</span></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## It's just for the sake of example</span></span>
<span id="cb18-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$GITHUB_PAT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> example.R example.R</span>
<span id="cb18-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> renv /renv</span>
<span id="cb18-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> .Rprofile .Rprofile</span>
<span id="cb18-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> renv.lock renv.lock</span>
<span id="cb18-15"></span>
<span id="cb18-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv::restore()"</span></span>
<span id="cb18-17"></span>
<span id="cb18-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rscript"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example.R"</span>]</span></code></pre></div>
<p>Now, the second line adds a build arg using <code>ARG</code>. Next, run the build:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> example <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> GITHUB_PAT=foobar .</span></code></pre></div>
<p>You should see the following in the logs:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">=</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2/7</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> RUN echo <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foobar"</span> </span></code></pre></div>
<p>This means that your variable <code>GITHUB_PAT</code> has been successfully set, and can be used at build time for whatever it‚Äôs needed for.</p>
<div class="callout callout-style-simple callout-important no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This is just an example, but it‚Äôs important that you don‚Äôt expose secrets in your build like I‚Äôve done here. If you‚Äôre using (e.g.) a token as a build arg, make sure it‚Äôs not printed in plain text to your logs.</p>
</div>
</div>
</div>
</section>
<section id="runtime-config" class="level4">
<h4 class="anchored" data-anchor-id="runtime-config">Runtime Config</h4>
<p>Other times, you want config to be available at container runtime. For instance, if you‚Äôre running a web app, you might not need to be able to connect to your production database when you‚Äôre building the image that houses your app. But you need to be able to connect when the container boots up. To achieve this, use <code>--env</code> (or <code>--env-file</code>). We‚Äôll update our <code>example.R</code> a bit to show how this works.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## example.R</span></span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Github PAT: {Sys.getenv("GITHUB_PAT")}'</span>))</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Database URL: {Sys.getenv("DATABASE_URL")}'</span>))</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello from Docker! I am running R version {Sys.getenv("R_VERSION")}.'</span>))</span></code></pre></div>
<p>And then, let‚Äôs rebuild:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> example <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> GITHUB_PAT=foobar .</span></code></pre></div>
<p>and now we‚Äôll run our image, but this time with the <code>--env</code> flag:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--env</span> DATABASE_URL=loremipsum example</span></code></pre></div>
<p>This tells Docker that you want to pass the environment variable <code>DATABASE_URL=loremipsum</code> into the container running your <code>example</code> image when the container boots up.</p>
<p>And after running, you‚Äôll see something like this:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">Github PAT<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> </span>
<span id="cb24-2">Database URL<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> loremipsum</span>
<span id="cb24-3">Hello from Docker<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> I am running R version <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>.<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span></span></code></pre></div>
<p>There are a few things to note here.</p>
<ol type="1">
<li>The <code>GITHUB_PAT</code> that you set as a build arg is no longer accessible at runtime. It‚Äôs only accessible at <em>build</em> time.</li>
<li>The <code>DATABASE_URL</code> we provided with the <code>--env</code> flag is now accessible as an environment variable named <code>DATABASE_URL</code></li>
</ol>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>Very often, container orchestration platforms like Heroku, Digital Ocean, AWS Batch, etc. will allow you to specify environment variables via their CLI or UI, which they will then inject into your container for you when it boots up.</p>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="advanced-topics" class="level2">
<h2 class="anchored" data-anchor-id="advanced-topics">Advanced Topics</h2>
<p>This post is intended to be a gentle introduction to Docker, but there‚Äôs a lot that‚Äôs missing. I‚Äôd like to quickly address a couple more topics that have been helpful to me and our team as we‚Äôve relied more and more heavily on Docker.</p>
<section id="custom-base-images" class="level3">
<h3 class="anchored" data-anchor-id="custom-base-images">Custom Base Images</h3>
<p>You might have noticed that your builds take longer as they <em>do</em> more. For instance, the <code>glue</code> install, even though <code>glue</code> is extremely lightweight, takes a few seconds. If you have many dependencies (R dependencies, C dependencies, etc.), building an image for your project can get prohibitively slow. For us in the past, builds have taken over an hour just restoring the dependencies recorded in the lockfile.</p>
<p>A convenient way around this is to install some ‚Äúbase‚Äù dependencies that you‚Äôll update rarely and use often into a <em>base image</em>, which you then push to a repository like <a href="https://hub.docker.com/">Docker Hub</a> and then use as your base image in the <code>FROM ...</code> line of your Dockerfile for any particular project. This prevents you from needing to install the same, unchanged dependencies over and over again.</p>
<p>We‚Äôve had a lot of success using this strategy on a few particular fronts:</p>
<ol type="1">
<li>Making sure we‚Äôre using the same version of R everywhere is simple if we define the R version in one place with a <code>FROM rocker/r-ver:4.2.0</code> in our base image (which is called <code>collegevine/r-prod-base</code>), and then we use <code>FROM collegevine/r-prod-base</code> as the base image for all of our other Docker builds.</li>
<li>Installing Linux dependencies, such as <code>curl</code>, <code>unzip</code>, etc. which we‚Äôre happy keeping on a single version can happen once in the base image, and then every downstream image can rely on those same dependencies.</li>
<li>Installing CLIs like the AWS CLI, which again, really doesn‚Äôt need to happen on every build.</li>
</ol>
</section>
<section id="ci-cd" class="level3">
<h3 class="anchored" data-anchor-id="ci-cd">CI / CD</h3>
<p>The other time-saving strategy we‚Äôve greatly benefited from is aggressive caching R packages in our CI / CD process. <code>renv</code> has <a href="https://rstudio.github.io/renv/articles/ci.html">great docs on using it within a CI / CD rig</a> which I would highly recommend.</p>
<p>At a high level, what we do is <code>renv::restore()</code> in the CI itself (before running the <code>docker build ...</code>), which installs all of the packages our project needs. Then we <code>COPY</code> the cache of packages into our image, so that they‚Äôre available <em>inside</em> of the image. This means we don‚Äôt need to reinstall every dependency on every build, and has probably sped up our image build times by 100x.</p>
</section>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>I hope this post has demystified Docker a bit and helped clarify some of the basics of Docker and how it‚Äôs used. At the highest level, Docker lets you package up your code so that it can be run anywhere, whether that‚Äôs on your machine, on the machine of a coworker, in a CI/CD tool, on a cloud server like an EC2 box, or anywhere else. All you need to do is <code>build</code> and <code>push</code> your image!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-06-03-docker/docker.html</guid>
  <pubDate>Tue, 06 Jun 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Dependency Management</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-05-27-renv-dependency-management/renv-dependency-management.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>When I was first learning to program, I‚Äôd face problems that would require (or at least were just made easier by using) library code. For instance, I learned about the Tidyverse the hard way my first summer in college when I was interning at a FinTech firm doing lots of data wrangling, because I had just finished spending the summer very hackily implementing <code>group_by</code> and <code>summarize</code> by hand using lots and lots of layers of nested for loops. That experience taught me an important lesson: I realized that thinking ‚ÄúSomeone else must have solved this problem before‚Äù and then seeing what they‚Äôve done is a very practical way to solve problems.</p>
<p>And with that realization (that I could use libraries for data wrangling), I started writing lots of lines of code like this one:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
<p>or the not-quite-equivalent Python:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pandas</span></code></pre></div>
<p>And as soon as I began doing that, I started running into one of the most common, if not <em>the</em> most common, source of headaches for new programmers: Dependency conflicts. I was getting errors like these:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> package or namespace load failed <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ‚Äòfoo‚Äô <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loadNamespace</span>(j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i[[1L]], </span>
<span id="cb3-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(lib.loc, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.libPaths</span>()), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">versionCheck =</span> vI[[j]])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-3">    namespace ‚Äòbar‚Äô <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span> is being loaded, but <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> is required</span></code></pre></div>
</section>
<section id="whats-the-problem" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-problem">What‚Äôs the Problem?</h2>
<p>At the time, I saw these types of errors and was frustrated. I didn‚Äôt understand them ‚Äì why is a package requiring a specific version of another package? And I also thought there was a quick fix: I‚Äôd just install the required version of the dependency and everything would work again.</p>
<p>Until I inevitably ran into the same problem again soon after, while trying to install some other dependency.</p>
<p>At its core, I was experiencing my first foray into what might be considered a semi-pro version of <a href="https://en.wikipedia.org/wiki/Dependency_hell">dependency hell</a>. I thought I could ‚Äúsolve‚Äù my problem of incompatible dependencies with duct tape ‚Äì installing the correct version in order to fix the immediate error ‚Äì but that doesn‚Äôt actually work in practice, since the same issue is bound to come up again with another version of a different library, or in a different project, or on another day.</p>
</section>
<section id="dependency-resolution" class="level2">
<h2 class="anchored" data-anchor-id="dependency-resolution">Dependency Resolution</h2>
<p>In practice, this is a <em>dependency management</em> problem. And the basic story goes as follows.</p>
<p>You start on your programming journey, and you want to use some great library ‚Äì take <code>dplyr</code>, for example ‚Äì for some of your work. So you <code>install.packages("dplyr")</code> and it installs the most recent version. Then you decide you‚Äôre interested in working with spatial data, so you install <code>sf</code> with <code>install.packages("sf")</code>. Next, you realize you need to work with Census data (what else are you going to be making maps of, after all?), so you <code>install.packages("tidycensus")</code> and with those three packages, you do your project.</p>
<p>But then next week you have a homework assignment, which, entirely hypothetically, requires you to install some niche package like <code>rethinking</code>, so, of course, you <code>install.packages("rethinking")</code> and you do your homework.</p>
<p>And then later that night, you get curious about seeing what the Elon Jet Tracker has been up to on Twitter, and so you install <code>rtweet</code>: <code>install.packages("rtweet")</code>, but this time, you get one of the errors above about a namespace clash.</p>
<p>And so now, you‚Äôre at a block in the road. You can either upgrade or downgrade the dependency that‚Äôs clashing and risk one of your <em>other</em> projects breaking, or you can try to get around the problem another way, such as using an old version of <code>rtweet</code> or not using <code>rtweet</code> at all.</p>
<p>This is the point at which former you ‚Äì and former me ‚Äì should have been thinking ‚Äúsomeone must have solved this problem.‚Äù</p>
</section>
<section id="declaring-your-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="declaring-your-dependencies">Declaring Your Dependencies</h2>
<p>The root cause of the errors in situations like these is that we have a dependency leakage problem. In the example I gave above, there were three separate ‚Äúprojects‚Äù: Your Census data analysis, your homework, and your keeping tabs on Elon‚Äôs jet. Those three projects don‚Äôt need to know about each other, and it‚Äôs actually a <em>problem</em> that they <em>do</em>. The issue is that in using <code>install.packages("...")</code> (or <code>pip install ...</code>) everywhere, you‚Äôre installing all of these packages <em>globally</em> on your machine. This means that <em>every</em> project you‚Äôre working on needs to use the <em>same</em> dependencies, even when the projects are separate.</p>
<p>Above, I proposed the solution to this problem that I used to use, which was to just install the version of the package that was needed by the package I was trying to install, and continue on until I was inevitably frustrated by the issue once again, generally sooner rather than later. But there‚Äôs a battle-hardened way of solving this problem: Declaring your dependencies, and using a dependency isolation tool.</p>
<p>In R, there‚Äôs the great <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> for this. In Python, I personally like <a href="https://python-poetry.org/">Poetry</a>, but <a href="https://docs.conda.io/en/latest/">Conda</a>, <a href="https://pipenv.pypa.io/en/latest/">pipenv</a>, or just a plain old <a href="https://docs.python.org/3/library/venv.html">virtualenv</a> would work just fine too. The key is that you want to be declaring the dependencies that your project needs in some kind of file (such as an <code>DESCRIPTION</code> file in R, or a <code>pyproject.toml</code> or a <code>requirements.txt</code> in Python, or a <code>Gemfile</code> in Ruby, and so on), and then preferably having a dependency manager like <code>renv</code> or <code>poetry</code> resolve those dependencies and save the result into a <em>lockfile</em>, like a <code>poetry.lock</code> or an <code>renv.lock</code>. Then, when you want to work on your project, or homework, or whatever, you restore the dependencies as they‚Äôre recorded in that lockfile. This means that whenever you want to run a project, you know exactly what versions of every dependency need to be installed. And at the same time, if you want to add a new dependency, your dependency manager can do its best to resolve conflicts between that new dependency and all of the other libraries in your lockfile.</p>
</section>
<section id="dependency-isolation" class="level2">
<h2 class="anchored" data-anchor-id="dependency-isolation">Dependency Isolation</h2>
<p>The other key piece to the puzzle is dependency <em>isolation</em>, which is the leakage problem from before. In an ideal world, the dependencies for your project should be ‚Äúisolated‚Äù, meaning that they‚Äôre only installed in your <em>project</em> environment (the R project, the virtualenv, etc.) and <em>not</em> globally on your machine.</p>
<p>Let‚Äôs take an example in R to see how dependency isolation works. Start by initializing a very simple R project by running the command below in a terminal.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> renv-test <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> renv-test <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"library(example)"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> test.R <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"install.packages('renv', repos='http://cran.us.r-project.org'); renv::init()"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv::install('mrkaye97/mrkaye97.github.io:posts/series/doing-data-science/2023-05-27-renv-dependency-management/example'); renv::snapshot()"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> renv.lock</span></code></pre></div>
<p>You should see some R output about installing packages, and then you should see something like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"R"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4.1.2"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Repositories"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CRAN"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"URL"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cloud.r-project.org"</span></span>
<span id="cb5-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-9">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb5-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Packages"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"example"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Package"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GitHub"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-16">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteType"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"github"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-17">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteHost"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"api.github.com"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-18">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteUsername"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrkaye97"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-19">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteRepo"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrkaye97.github.io"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-20">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteSubdir"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts/series/doing-data-science/2023-05-27-renv-dependency-management/example"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-21">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteRef"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"master"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-22">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteSha"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a72bb805e175c77e7bb8a2f4fb11780b76807d4d"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-23">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Hash"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"22d8e981dd94e2fab693636781631008"</span></span>
<span id="cb5-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb5-25">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"renv"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-26">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Package"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-27">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.17.3"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-28">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Repository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-29">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Repository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CRAN"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-30">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Requirements"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utils"</span></span>
<span id="cb5-32">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-33">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Hash"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4543b8cd233ae25c6aba8548be9e747e"</span></span>
<span id="cb5-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This last bit is the <code>renv</code> <em>lockfile</em>. It‚Äôs where all of the dependencies of your project are enumerated. Here, the project is trivial. We‚Äôre just installing <code>example</code>, which has no dependencies, so it‚Äôs the only thing (in addition to <code>renv</code> itself) that‚Äôs recorded in the lockfile. But this also generalizes to arbitrarily complicated projects and sets of dependencies. As you add more packages, the lockfile grows, but you can simply run <code>renv::restore()</code> to restore all of the dependencies for your project.</p>
<p>Next, if you run the following, you should be able to use the package just fine:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"library(example); hello()"</span></span></code></pre></div>
<p>And you‚Äôll see:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span></code></pre></div>
<p>But then, try this:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> .. <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"library(example); hello()"</span></span></code></pre></div>
<p>Unless you have another package installed globally called <code>example</code> that does the same thing as my example package, you‚Äôll see:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">Error <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(example) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> there is no package called ‚Äòexample‚Äô</span>
<span id="cb9-2">Execution halted</span></code></pre></div>
<p>But this time, this error is a feature, not a bug! This is an example of dependency isolation. When you‚Äôre inside of your <code>renv-test</code> project, you install the <code>example</code> package, record it in the lockfile, and can use it just fine. But as soon as you‚Äôre no longer inside of that project, this package is no longer available. This means that if you, for instance, start a new project that needs a different version of <code>example</code>, you don‚Äôt need to worry about this <code>renv-test</code> project being corrupted. The two projects are isolated from each other, so they can rely on separate sets of dependencies with no leakage from one to the other.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>As an aside, tools like <code>renv</code> and <code>pip</code> are also usually good at dependency <em>resolution</em>, meaning they can figure out which versions of the dependencies of the packages you want to use you should install in order to make sure that everything is compatible. If you‚Äôre interested, you can read about how <code>pip</code> does dependency resolution <a href="https://pip.pypa.io/en/stable/topics/dependency-resolution/">on their site</a>.</p>
</div>
</div>
</div>
</section>
<section id="other-resources" class="level2">
<h2 class="anchored" data-anchor-id="other-resources">Other Resources</h2>
<p>There are <em>tons</em> of amazing resources on managing dependencies. This is a problem that every software team needs to manage, so virtually every programming language will have at least one, if not many widely-used dependency management tools. Since this is such a common problem, there‚Äôs also a lot written (and spoken!) about it. A few resources I particularly like are <a href="https://www.youtube.com/watch?v=GwVx_pf2uz4&amp;t=6s&amp;ab_channel=PositPBC">David Aja‚Äôs RStudio::conf 2022 talk</a> about <code>renv</code> (which I was enthusiastically in the audience for!) and something he mentions, which is <a href="https://12factor.net/dependencies">The 12-Factor App</a>, which our team‚Äôs Head of Engineering recommended to me very soon after starting at CollegeVine.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>David Aja‚Äôs talk on this topic was called ‚ÄúYou Should Be Using <code>renv</code>,‚Äù and you should be. In the short run, it might feel like setting up the scaffolding for <code>renv</code> or <code>poetry</code> or whatever your tool of choice is adds too much overhead. But if you‚Äôre feeling that way, it‚Äôs important to keep in mind that it‚Äôs inevitable that you end up running into dependency issues, and it‚Äôll be much harder to untangle them once you‚Äôre already in deep than it will be to build good habits from the get-go.</p>
<p>You should be using <code>renv</code>.</p>


</section>

 ]]></description>
  <category>data science</category>
  <category>R</category>
  <category>python</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-05-27-renv-dependency-management/renv-dependency-management.html</guid>
  <pubDate>Sun, 28 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Experiment Tracking and Model Versioning</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-05-13-experiment-tracking/experiment-tracking.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I‚Äôve started the past few posts by saying things along the lines of ‚ÄúWhen I first started my current job‚Ä¶‚Äù or ‚ÄúIt wasn‚Äôt until my <em>second</em> data science job‚Ä¶‚Äù and going on about how it took me too long to learn something important. But not today! Today, I‚Äôll tell you a story. But first, some background context.</p>
<p>Let‚Äôs imagine that you work for a company whose website provides college guidance to high school students. You might have a page where a student can input their profile ‚Äì maybe their academic information like their GPA or their SAT scores, some demographic information, or a list of their extracurricular activities ‚Äì and then a second page where they can view information about different schools they might be interested in. A killer feature of that second page is the student being able to see their chances of being accepted at different schools based on the information in their profile. At CollegeVine we call this ‚ÄúChancing,‚Äù and it‚Äôs a core part of our student experience.</p>
<p>When we first started using machine learning for Chancing, we had a number of architectural questions to answer. Of course, there were questions about how the model would be deployed, how it would serve predictions to users, if we could cache predictions, how fast the code had to be, and so on. But this post will focus on the problem that, at first glance, I thought was the simplest: What version of the model is running in production? Over time, we‚Äôve taken a few approaches to solving this problem. And so begins the story.</p>
</section>
<section id="model-versioning" class="level2">
<h2 class="anchored" data-anchor-id="model-versioning">Model Versioning</h2>
<p>At first, we used an incrementing counter as the version of our chancing model, so we would identify different versions as <code>v1</code>, <code>v2</code>, and so on. Our assumption initially was that what was most important was being able to update a model (i.e.&nbsp;increment the version) and roll back to a previous model (i.e.&nbsp;decrement), and this versioning scheme allowed us to do that easily. But we quickly ran into some headaches. Notably, we‚Äôd find ourselves asking ‚ÄúOkay, Chancing v5 is in production. But when was it trained? And when did we ship it?‚Äù And so we soon outgrew our initial approach.</p>
<p>After our first approach failed, our next idea was to use a timestamp like <code>20230514123456</code> (12:34 and 56 seconds on May 14th, 2023) as the model version. The timestamp would correspond to when the model was trained ‚Äì we were assuming we‚Äôd ship right after training ‚Äì and would still have all of the same properties as the incrementing counter from before (letting us upgrade and roll back easily) while also encoding extra information. We viewed this change as a <a href="https://www.investopedia.com/terms/p/paretoimprovement.asp#:~:text=A%20Pareto%20improvement%20is%20an,make%20any%20available%20Pareto%20improvement.">Pareto Improvement</a>.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>It‚Äôs important to mention at this point that all of our modeling code is checked into Git. This means that we can, roughly speaking, see what the state of the world was at the time the model was trained.</p>
</div>
</div>
</div>
<p>So now that we‚Äôre able to not only upgrade and downgrade model versions quickly, but also know when the model was trained, it‚Äôs problem solved. Right?</p>
<p>Wrong. As it turns out, there was another pressing issue. Finding the state of the code when the model was trained was actually non-trivial, because, as I wrote <a href="https://matthewrkaye.com/posts/series/doing-data-science/2023-04-01-library-code/library-code.html">in my previous post on internal libraries</a>, our modeling code was living in a library. But our retraining job was loading a specific version of that library, which meant that we‚Äôd need to look through our Git history to find the state of the retraining job when the model was trained, and then find the version of the library the code was using, and then dig through our Git history again to uncover the logic in the library (ultimately the logic training the model) at the time. This is certainly possible, but it‚Äôs not trivial.</p>
<p>And so with that, we tried our next idea: Appending the library version to the timestamp, to get a model version like <code>20230514123456-1-2-3</code>, which would correspond to the model being trained at 12:34 and 56 seconds on May 14th, 2023, using library version <code>1.2.3</code>. This was another Pareto Improvement: Now we could upgrade and downgrade, we knew when the model was trained, <em>and</em> we knew which library version the model was trained on. Amazing!</p>
<p>But at this point, I presume you‚Äôre starting to realize that this approach didn‚Äôt work either. And so were we. This was when we began to look for an off-the-shelf tool for this deceivingly challenging problem.</p>
</section>
<section id="enter-mlflow" class="level2">
<h2 class="anchored" data-anchor-id="enter-mlflow">Enter MLFlow</h2>
<p>As it turns out, we‚Äôre not the only ones to have this problem. At the highest level, we needed to figure out a way to version our models such that it was easy to determine what actually went into them ‚Äì the data, the hyperparameters we evaluated and which we selected, the features, and the rest of the code itself. We also needed a way to differentiate one model version from another. In particular, what made two different training runs of the same model different? Did the data change? Did the features change? Lastly, we wanted to be able to track a few other important aspects of the ML lifecycle:</p>
<ul>
<li>When the model was in production from and to.</li>
<li>Any other parameters to the model, in addition to the hyperparameters, that were used on that training run.</li>
<li>Model diagnostics, like AUC or the Brier Skill Score, calibration plots, and miscellaneous sanity checks.</li>
<li>The data the model was trained on.</li>
</ul>
<p>To accomplish all of these goals and more, we turned to <a href="https://mlflow.org/">MLFlow</a>. MLFlow lets us catalog whatever we want about our model training runs. We save artifacts (a fancy word for files) to MLFlow containing our training data, the models we fit, the results of hyperparameter tuning, a bunch of diagnostic plots, test cases we dynamically generate, and so on. In addition, we log parameters like what high school graduation years we included in our data, or what version of our R package ‚Äì <code>mlchancing</code> ‚Äì was used in training the model. We log lots of metrics like AUC, the Brier Skill Score, and so on to keep track of the performance of the model at training time. We also log metrics like the mean and standard deviation of each feature in our model at training time, so we can evaluate data drift over time.</p>
<p>In addition to tracking models, metrics, artifacts, and so on, MLFlow also lets us create a new model version for a training run. When we create a model version, we can mark that version as either having no status, being in <code>staging</code>, being in <code>production</code>, or being <code>archived</code>. These statuses let us track what model is in production at any given time, and the model versions link back to the run that the model was trained on, so we can see all of the metrics, artifacts, etc. listed above by just clicking into the training run for any model version in the MLFlow UI.</p>
<p>Lastly, MLFlow lets us log a Git commit as an attribute of the training run, which means we can click directly from the MLFlow UI to the state of our modeling code in GitHub at the time that our model was trained, which lets us more easily track down exactly what the state of the code was at the time.</p>
<p>And here concludes my story. Since adopting MLFlow, our model versioning headaches have more or less subsided. We‚Äôve been running MLFlow in production for about a year and a half now, and it‚Äôs made running experiments on our models, tracking training runs, comparing metrics across different ideas we have, and keeping tabs on what‚Äôs in production at any given point simple. It‚Äôs not a perfect tool by any means, but it‚Äôs solved most of our most painful problems.</p>
</section>
<section id="experiment-tracking-model-registries-and-mlops" class="level2">
<h2 class="anchored" data-anchor-id="experiment-tracking-model-registries-and-mlops">Experiment Tracking, Model Registries, and MLOps</h2>
<p>Of course, MLFlow isn‚Äôt the only tool out there. Broadly speaking, tools like MLFlow are often referred to as ‚Äúexperiment tracking‚Äù tools. Others in this category include <a href="https://wandb.ai/site">Weights &amp; Biases</a>, <a href="https://neptune.ai/">Neptune</a>, and <a href="https://www.comet.com/site/">Comet</a>. Experiment tracking tools let you version different experiments you run, and store metadata like the training data, parameters, etc. on those experiments and training runs. These tools generally also provide a ‚Äúmodel registry,‚Äù which tends to be the component that handles the versioning of models.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>As an important aside: There‚Äôs a whole world of tools like these out there that make up the field of MLOps. Over the past few years, MLOps has been exploding as more and more companies face pains like ours when it comes to putting models into production. These pain points include everything from versioning to experimenting to deployment, so it‚Äôs been very exciting to see all of the awesome new tooling that‚Äôs being introduced every week.</p>
<p>This also means that this post will likely become stale quickly.</p>
</div>
</div>
</div>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>I‚Äôd like to wrap this post up with an important lesson I learned from our model versioning saga: If you‚Äôre having a technical problem like model versioning that seems simple but is proving to be difficult, it‚Äôs often a good idea to see what others are doing to solve that problem. Nowadays, I‚Äôd realize that model versioning must be a common problem, and think to myself ‚Äú<em>Someone</em> must have solved this problem. What do they do?‚Äù After all, every company providing any kind of machine learning product must have model versioning issues.</p>
<p>So in hindsight, we could‚Äôve come across the world of MLOps far sooner had we taken a step back to consider the fact that we must not be the only ones solving this problem. But we didn‚Äôt do that, and versioning became a thorn in our side instead. Hopefully our mistakes will help you take the step back that I wish I had.</p>
<p>Happy experimenting!</p>


</section>

 ]]></description>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-05-13-experiment-tracking/experiment-tracking.html</guid>
  <pubDate>Sun, 14 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Workflow Orchestration</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-05-06-workflow-orchestration/workflow-orchestration.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>When I first started my current job, I installed an app called <a href="https://apps.apple.com/us/app/amphetamine/id937984704?mt=12">Amphetamine</a> on my machine. As an editorial sidebar: I‚Äôd highly recommend Amphetamine. It‚Äôs a great app.</p>
<p>But anyways, the point is that the reason I had installed Amphetamine was to keep my machine alive at night as I was running some code to train a model or do some analysis that took seven or eight hours <em>locally</em>. My strategy ‚Äì which I thought was the norm at the time, and was a habit I had brought over from my previous data science role ‚Äì was to kick off a job manually, tell Amphetamine to keep my machine awake, plug it in, turn the brightness down, and go to sleep. In the morning, I could wake up and see my results.</p>
</section>
<section id="headaches" class="level2">
<h2 class="anchored" data-anchor-id="headaches">Headaches</h2>
<p>I imagine that this pattern is fairly common for data scientists. I thought it was totally normal, and it worked well enough (aside from the fact that my machine‚Äôs battery was crying out for help, but I digress). Over the past few years, I‚Äôve learned just how much of an <a href="https://en.wikipedia.org/wiki/Anti-pattern#:~:text=The%20anti%2Dpattern%20is%20a,pattern%20is%20attempting%20to%20address.">anti-pattern</a> this was in reality. There were a number of painful aspects to this strategy that I had cooked up, all of which took me far too long to recognize as being legitimate:</p>
<ol type="1">
<li>Running a job on local at night means that there‚Äôs no audit trail of past job runs, and no schedule for future ones. Everything is ad-hoc and ‚Äúmemoryless‚Äù in some sense. Without the help of other tooling, it‚Äôs hard to remember what happened before and what jobs have run and which are yet to be run.</li>
<li>If something went wrong, I was the only one to know about it. Since the problem ‚Äì error or otherwise ‚Äì would only show up on my machine, none of my teammates would have any idea that anything had broken.</li>
<li>If a product (a model, a dashboard requiring some data wrangling to happen, etc.) needed to be updated for a production setting, the only way to go about that was for me to put down my work, open my code to do the updates, and kick off the job. Unfortunately, these jobs would often eat lots of my machine‚Äôs compute resources, leaving me unproductive for the remainder of the day while something ran.</li>
<li>What I could build and run was severely constrained by the compute resources of my machine, which is pretty beefy but not invincible.</li>
</ol>
</section>
<section id="workflow-orchestration-and-mlops" class="level2">
<h2 class="anchored" data-anchor-id="workflow-orchestration-and-mlops">Workflow Orchestration and MLOps</h2>
<p>As it turns out, there are many, many tools that provide the proverbial ibuprofen for these headaches, if you will. Broadly speaking, they fall into two often-overlapping categories: Workflow orchestration tools and MLOps tools. This post will cover workflow orchestration, since workflow orchestration tools are a core part of most every data stack and are more common than MLOps tools, as they‚Äôre used for data science, data engineering, and more.</p>
<p>There are lots of workflow orchestrators on the market, and there‚Äôs a wide range of options in terms of capabilities they provide, whether they‚Äôre self-hosted, open-source tools or managed services, and much more. A few popular names in the space are <a href="https://airflow.apache.org/">Airflow</a>, <a href="https://github.com/spotify/luigi">Luigi</a>, <a href="https://dagster.io/">Dagster</a>, <a href="https://argoproj.github.io/">Argo</a>, and <a href="https://www.prefect.io">Prefect</a>. These are all fantastic tools that come with their own pros and cons, but at their core they all seek to achieve a similar goal: Letting you and your team run jobs in a sane way.</p>
<p>The long and short of workflow orchestration tools is that they provide tooling to help you run code ‚Äì often in different languages and performing disparate tasks ‚Äì in any way you want, by providing high-level APIs for triggering your jobs. For instance, we often run R code using Docker containers running in individual pods on our Kubernetes cluster, while we might trigger a bash task to just run on the leader node of our cluster without spinning up a new container. Even if that was a lot of technical jargon, the main takeaway is simple: Workflow orchestration tools let you run your code in many ways and in many places, which is incredibly powerful. You can run jobs locally (on your tool of choice‚Äôs compute) or you can farm them off to an external source of compute (like <a href="https://aws.amazon.com/batch/">Batch</a> or <a href="https://aws.amazon.com/lambda/">Lambda</a>, and many, many more) to have them run in a galaxy far, far away. The workflow orchestrator will handle the triggering of the job, the monitoring of the job and listening for it to complete successfully or with errors, and will handle the alerting, deciding whether or not to continue running the next steps in the job based on what happened in the previous ones, and so on. All of these tools are highly configurable to your needs.</p>
</section>
<section id="airflow" class="level2">
<h2 class="anchored" data-anchor-id="airflow">Airflow</h2>
<p>Our team uses <a href="https://airflow.apache.org/">Airflow</a> (<a href="https://www.astronomer.io/">Astronomer</a> in particular, which has a very helpful team and does a great job of managing complicated things like Kubernetes and authentication for us), so that‚Äôs what I‚Äôll discuss here. And this time, it‚Äôll be concise.</p>
<p>Airflow solves a few key problems for us:</p>
<ol type="1">
<li>It lets us run jobs on schedules that we define in the code. We can define any schedule we want, and our jobs will magically be run on time, in the cloud. In addition, if we want to manually trigger a job, all we have to do is press the play button.</li>
<li>It lets us modularize our jobs, so that if a step fails, we can retry or restart from the <em>failure</em> as opposed to from the <em>start</em>, which often saves lots of time.</li>
<li>It provides great visibility into the jobs themselves. In particular, we know when they fail, we know how long steps are taking to complete, and so on. Airflow makes it easy to track and audit what‚Äôs happening inside of our jobs.</li>
<li>It lets us trigger jobs in many places, such as running retraining jobs for our ML models on AWS Batch. Batch lets us spin up a machine that matches some compute requirements we have, run whatever code we need to on it, and shut down once it finishes. This is hugely valuable, since some of our jobs are memory heavy, and others require lots of cores to parallelize across, and so on. Airflow‚Äôs <a href="https://registry.astronomer.io/providers/apache-airflow-providers-amazon/versions/7.3.0/modules/BatchOperator">BatchOperator</a> lets us configure the compute resources we need for each individual step (task) in our job, which is extremely flexible.</li>
<li>And much, much more.</li>
</ol>
<p>Note that these points are solutions to the headaches listed above. In particular:</p>
<ol type="1">
<li>Airflow lets us track past runs of jobs, so it‚Äôs easy to audit the history of any particular job and schedule future jobs as we please.</li>
<li>Airflow can send notifications of job failures to (e.g.) Slack, which lets our team know that something is broken and starts our triage process.</li>
<li>Airflow lets us very easily run our jobs on third-party (AWS, in our case) compute, which results in something of a ‚Äúset it and forget it‚Äù process for running jobs: We press play, and wait for the job to finish. And in the meantime, we continue doing whatever else we were working on with minimal disruption.</li>
<li>Since Airflow lets us easily run jobs on AWS compute and we can dynamically set compute requirements, we can spin up a specific machine ‚Äì an EC2 box in our case ‚Äì that‚Äôs well-suited to the needs of our jobs. We have some memory intensive jobs that we run on big R4 instances, which provide lots of RAM. You might also need a GPU for a job that trains a deep learning model, in which case you‚Äôd configure your compute requirements to include a GPU, and Batch could spin up a P3 instance (with a GPU). Instead of being limited by the compute resources of our local machines, we now have easy access to the entire AWS fleet of EC2 instance types.</li>
</ol>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>There was admittedly a lot of technical jargon in this post. But the main takeaway is this: Having a true workflow orchestration tool like Airflow makes it simple for you to run your analytical code (or any other code!) in a sane way. Workflow orchestrators help you run your code on certain schedules, provide lots of visibility into individual runs of your code, help you farm off your code to third-party compute, alert you when things go wrong, and so much more. So please, please shut off your machine at night instead of training your models on it. If you can, you should use a workflow orchestrator. It‚Äôs good for your machine‚Äôs health, your team‚Äôs productivity, and your sanity.</p>


</section>

 ]]></description>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-05-06-workflow-orchestration/workflow-orchestration.html</guid>
  <pubDate>Sat, 06 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Pull Requests, Code Review, and The Art of Requesting Changes</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-14-code-review/code-review.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="https://matthewrkaye.com/posts/series/doing-data-science/2023-04-03-unit-testing/unit-testing.html">my last post</a> on unit testing analytics code, I started off by saying that I had never heard of unit testing until my second data science job. Not in college, not in internships, and not in my first data science job. The same is true for pull requests and code review ‚Äì they were completely new to me.</p>
<p>This, in my view, is a very unfortunate commonality in analytics teams. All too often, code will go unreviewed or kept out of any kind of version control system entirely. Ultimately, this practice, albeit common, is detrimental to the teams practicing it.</p>
<p>Since then, code review ‚Äì both doing code review for others and getting feedback from others on my code ‚Äì has grown to become one of my favorite parts of my job. It‚Äôs also a mission-critical process for any team that strives to maintain a high-quality codebase. But more importantly, it‚Äôs an valuable social exercise, and an fun way for contributors to come together as a team to collaborate, learn from each other, and improve their skills.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>I‚Äôd also like to note that the Tidyverse team just published a <a href="https://tidyverse.github.io/code-review/">great series on code review</a>, which I‚Äôd highly recommend reading.</p>
</div>
</div>
</div>
</section>
<section id="but-first-git" class="level2">
<h2 class="anchored" data-anchor-id="but-first-git">But First: Git</h2>
<p>There are a ton of introductions to Git online, all of which are far better than anything I could write here. If you‚Äôre not already at least somewhat familiar with Git, I‚Äôd recommend starting with a post like one of these:</p>
<ul>
<li><a href="https://docs.github.com/en/get-started/using-git/about-git">From GitHub</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/what-is-version-control">From Atlassian</a></li>
<li><a href="https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F">From Git itself</a></li>
</ul>
<p>That said, what I‚Äôll discuss here doesn‚Äôt require any particular Git knowledge.</p>
</section>
<section id="on-code-review" class="level2">
<h2 class="anchored" data-anchor-id="on-code-review">On Code Review</h2>
<p>I wasn‚Äôt sure where to start this post. I considered discussing Git itself, but I decided it would be better to leave it to the experts. Then I thought about discussing the function of <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">pull requests</a>, but that didn‚Äôt seem particularly valuable either. So I figured I might just jump into the meat of it: Why code review is valuable, and why analytics teams should be doing more of it than they are.</p>
<section id="why-do-we-review-code" class="level3">
<h3 class="anchored" data-anchor-id="why-do-we-review-code">Why Do We Review Code?</h3>
<p>People and teams have wildly differing opinions about what the main objective of code review is. The following is the opinion of the Tidyverse team:</p>
<blockquote class="blockquote">
<p>The primary purpose of code review is to ensure that the overall ‚Äúcode health‚Äù of our packages is improving over time.</p>
</blockquote>
<p>Another common opinion on the main purpose of code review is to catch bugs in code before they hit production.</p>
<p>In my opinion, these are both important objectives of code review to be sure, but are not the <em>main</em> objective. My team‚Äôs view is that the main objective of code review is knowledge transfer between teammates. On our team ‚Äì with ‚Äúteam‚Äù encompassing both data and engineering ‚Äì we talk often about the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> of our work. A toned-down explanation of the bus factor is that it represents the number of people who need to go on vacation, or be out sick, or leave for a new job for a project to come to a grinding halt because else nobody on the team knows how a particular system works. We‚Äôve been bitten multiple times by projects with a bus factor of one, meaning that if one person were to leave, that project would be left in limbo.</p>
<p>Analytics work is no different than engineering work in this respect: If one data scientist lives in a dark room for two years building a novel model and ships it to production without anyone else knowing how it works, how to maintain it, and how to monitor it, then that project is risky. If that data scientist were to leave, there would be a model in production that nobody else had experience working with, which could result in any number of issues. In steps code review to help us solve this problem.</p>
</section>
<section id="other-reasons-to-review-code" class="level3">
<h3 class="anchored" data-anchor-id="other-reasons-to-review-code">Other Reasons To Review Code</h3>
<p>Aside from knowledge transfer, code review is also a valuable opportunity to do quality control. In no particular order, all of the following (and more) can be suggested in code review:</p>
<ol type="1">
<li>Bug fixes</li>
<li>Maintainability improvements, such as improving the readability of the code, adding comments, adding tests, etc.</li>
<li>Performance improvements</li>
<li>Security improvements</li>
</ol>
<p>All of these are important aspects of maintaining a codebase over the long-term, and, in my experience, are far too often overlooked by analytics teams. In particular, a past team of mine ‚Äì as well as many others, from what I‚Äôve read and heard in talking to others in analytical roles ‚Äì had a bad habit of data scientists being siloed and not having any eyes on their work until things were ‚Äúready‚Äù to be shipped to production. In my opinion, data products are software and should be treated as such. This means that if our models will be shipped to production, then it‚Äôs imperative that the code underlying them is written in a way that‚Äôs understandable by others, safe, correct, and, to whatever extent necessary, performant. Code review helps achieve all of these goals.</p>
<p>Lastly, code review is a social exercise. It‚Äôs a great way for a team to work together, especially in the world of remote work. In getting feedback from teammates, data scientists get to flex their collaboration muscle and, ideally, this type of collaboration allows the whole to be more than the sum of its parts.</p>
</section>
<section id="an-example-review" class="level3">
<h3 class="anchored" data-anchor-id="an-example-review">An Example Review</h3>
<p>Since code review is unfamiliar to a lot of us in the analytics world, I‚Äôll give an example of how I might do a review. Our team often works with data from external sources like the Census for doing all kinds of analysis. Let‚Äôs imagine reviewing the following code that a hypothetical teammate has put in to determine the five counties in Arizona with the highest percentage of Native American residents:</p>
<div class="cell" data-layout-align="center" data-hash="code-review_cache/html/unnamed-chunk-2_c1ec406875876f9127deb3a4b1812bb4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(httr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5">variables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb1-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>,</span>
<span id="cb1-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001A_001E"</span>,</span>
<span id="cb1-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001B_001E"</span>,</span>
<span id="cb1-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001C_001E"</span>,</span>
<span id="cb1-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001D_001E"</span>,</span>
<span id="cb1-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001E_001E"</span>,</span>
<span id="cb1-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001F_001E"</span>,</span>
<span id="cb1-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001G_001E"</span></span>
<span id="cb1-14">)</span>
<span id="cb1-15"></span>
<span id="cb1-16">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GET</span>(</span>
<span id="cb1-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.census.gov/data/2019/acs/acs5"</span>,</span>
<span id="cb1-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">query =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(variables, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>),</span>
<span id="cb1-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"for"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tract:*"</span>,</span>
<span id="cb1-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state:04"</span>,</span>
<span id="cb1-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> secret<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_secret</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CENSUS_API_KEY"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vault =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%s/posts/config"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SITE_ROOT_DIR"</span>)))</span>
<span id="cb1-23">  )</span>
<span id="cb1-24">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">content</span>()</span>
<span id="cb1-26"></span>
<span id="cb1-27">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> response[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb1-28">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> response[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-29"></span>
<span id="cb1-30">response <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb1-32">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(.x, cols)</span>
<span id="cb1-33">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-34">  janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb1-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb1-37">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(name, tract, county, state),</span>
<span id="cb1-38">      as.numeric</span>
<span id="cb1-39">    )</span>
<span id="cb1-40">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(county) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(</span>
<span id="cb1-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na_pct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(b01001c_001e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric))))</span>
<span id="cb1-44">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(</span>
<span id="cb1-46">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order_by =</span> na_pct,</span>
<span id="cb1-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-48">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-49">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">county</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">na_pct</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">001</td>
<td style="text-align: right;">0.7377187</td>
</tr>
<tr class="even">
<td style="text-align: left;">017</td>
<td style="text-align: right;">0.4465544</td>
</tr>
<tr class="odd">
<td style="text-align: left;">005</td>
<td style="text-align: right;">0.2654699</td>
</tr>
<tr class="even">
<td style="text-align: left;">007</td>
<td style="text-align: right;">0.1630934</td>
</tr>
<tr class="odd">
<td style="text-align: left;">012</td>
<td style="text-align: right;">0.1495215</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>At first glance, this code looks pretty involved and poorly written to me. In the real world, we often write complicated code that relies on hyper-specific domain knowledge about the problem being solved in order to really understand it. As I mentioned above, our team often finds ourselves working with external data sources, such as the Census data shown here. And these sources usually have their own internal codes or identifiers that denote what the data you‚Äôre actually looking at is about. For instance, the series <code>B01001C_001E</code> used above represents the total Native American population in a region. In the Census, it‚Äôs corresponding ‚Äúconcept‚Äù is defined as the following:</p>
<blockquote class="blockquote">
<p>B01001C_001E: SEX BY AGE (AMERICAN INDIAN AND ALASKA NATIVE ALONE)</p>
</blockquote>
<p>Obviously, these codes are not comprehensible for the layman. There‚Äôs method to the madness, but we so often work with gibberish codes that don‚Äôt correspond to anything intuitive and make code review and maintenance dramatically harder. The challenge here is that in order to effectively review this code, the reviewer not only needs to review what the code is trying to accomplish in some high-level sense, but also needs to understand the data itself and its schema in order to understand how the author is trying to accomplish their goal. Unfortunately, the code‚Äôs author has not done a good job of helping the reviewer (me) understand the code.</p>
<p>Not only do I not have any context on the Census codes, but there‚Äôs no documentation linked (or written out) to help me find what the codes mean, there‚Äôs no documentation of the API response to explain why they‚Äôre seemingly removing the first item in the response‚Äôs body and setting it as the names of the columns in my final data frame, and there‚Äôs no explanation of what <code>na_pct</code> means, which in the context of this work means ‚Äúpercentage Native American‚Äù but could also reasonably mean something like ‚Äúpercentage of the data that‚Äôs <code>null</code>‚Äù.</p>
<p>And this is exactly where the value of code review comes in. We often like to say that you‚Äôre not writing code for yourself right now. Instead, you should be writing it for a future you in six months or a year who won‚Äôt remember all of the intricacies of this problem anymore. In short, you want your code to be understandable to future you, and, by extension, your teammates. But code authors, just like anyone else working on a project of any sort, are often so deep in the weeds of their work and so familiar with all of the ins and outs that it‚Äôs easy to forget just how confusing their work can be at times. Code review is a great opportunity for others to ask for clarification, which is the knowledge transfer I mentioned before.</p>
<p>If a teammate put in these changes, I‚Äôd request a few improvements:</p>
<ol type="1">
<li>What do the Census codes mean?</li>
<li>What does <code>na_pct</code> mean?</li>
<li>What does the response from the Census API look like?</li>
<li>What does <code>state:04</code> mean?</li>
</ol>
<p>After requesting clarification on all of those points, I‚Äôd hope the code would ultimately end up looking something like this:</p>
<div class="cell" data-layout-align="center" data-hash="code-review_cache/html/unnamed-chunk-3_bc7e9589d4c80bfdaf8689be7b9da287">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Data from the Census ACS (American Community Survey)</span></span>
<span id="cb2-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb2-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ACS 2019 5-year data</span></span>
<span id="cb2-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001A_001E: Total White alone population</span></span>
<span id="cb2-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001B_001E: Total Black or African American alone population</span></span>
<span id="cb2-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001C_001E: Total American Indian and Alaska Native alone population</span></span>
<span id="cb2-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001D_001E: Total Asian alone population</span></span>
<span id="cb2-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001E_001E: Total Native Hawaiian and Other Pacific Islander alone population</span></span>
<span id="cb2-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001F_001E: Total Some other race alone population</span></span>
<span id="cb2-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001G_001E: Total Two or more races population</span></span>
<span id="cb2-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb2-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Codes of the form B01001X_001E</span></span>
<span id="cb2-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## correspond to "Total X population" where X</span></span>
<span id="cb2-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## is a race as defined by the Census. For instance,</span></span>
<span id="cb2-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001A_001E: Total White alone population</span></span>
<span id="cb2-16">variables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb2-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">white_alone =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001A_001E"</span>,</span>
<span id="cb2-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">black =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001B_001E"</span>,</span>
<span id="cb2-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">native_american =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001C_001E"</span>,</span>
<span id="cb2-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asian =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001D_001E"</span>,</span>
<span id="cb2-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hawaiian_pacific_islander =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001E_001E"</span>,</span>
<span id="cb2-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">other_alone =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001F_001E"</span>,</span>
<span id="cb2-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multi_racial =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001G_001E"</span></span>
<span id="cb2-24">)</span>
<span id="cb2-25"></span>
<span id="cb2-26">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GET</span>(</span>
<span id="cb2-27">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.census.gov/data/2019/acs/acs5"</span>,</span>
<span id="cb2-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">query =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(variables, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>),</span>
<span id="cb2-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"for"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tract:*"</span>,</span>
<span id="cb2-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state:04"</span>,</span>
<span id="cb2-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> secret<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_secret</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CENSUS_API_KEY"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vault =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%s/posts/config"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SITE_ROOT_DIR"</span>)))</span>
<span id="cb2-33">  )</span>
<span id="cb2-34">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">content</span>()</span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## The first item in the JSON response body is a vector</span></span>
<span id="cb2-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## of the names of the fields returned.</span></span>
<span id="cb2-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## For this query, we get: </span></span>
<span id="cb2-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb2-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001A_001E</span></span>
<span id="cb2-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001B_001E</span></span>
<span id="cb2-43"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001C_001E</span></span>
<span id="cb2-44"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001D_001E</span></span>
<span id="cb2-45"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001E_001E</span></span>
<span id="cb2-46"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001F_001E</span></span>
<span id="cb2-47"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001G_001E</span></span>
<span id="cb2-48"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * state</span></span>
<span id="cb2-49"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * county</span></span>
<span id="cb2-50"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * tract</span></span>
<span id="cb2-51"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb2-52"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Every other record contains data corresponding to these fields.</span></span>
<span id="cb2-53"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## The values in the population fields (e.g. B01001A_001E) are integers</span></span>
<span id="cb2-54"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## representing the total population for that racial group in that tract.</span></span>
<span id="cb2-55"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## The state, county, and tract are all FIPS codes.</span></span>
<span id="cb2-56">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> response[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb2-57">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> response[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-58"></span>
<span id="cb2-59">response <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-60">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb2-61">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(.x, cols)</span>
<span id="cb2-62">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-63">  janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-64">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb2-66">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(variables))),</span>
<span id="cb2-67">      as.numeric</span>
<span id="cb2-68">    )</span>
<span id="cb2-69">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-70">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(county) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-71">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(</span>
<span id="cb2-72">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">percent_native_american =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(b01001c_001e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(variables))))))</span>
<span id="cb2-73">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-74">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(</span>
<span id="cb2-75">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order_by =</span> percent_native_american,</span>
<span id="cb2-76">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-77">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-78">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">county</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">percent_native_american</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">001</td>
<td style="text-align: right;">0.7377187</td>
</tr>
<tr class="even">
<td style="text-align: left;">017</td>
<td style="text-align: right;">0.4465544</td>
</tr>
<tr class="odd">
<td style="text-align: left;">005</td>
<td style="text-align: right;">0.2654699</td>
</tr>
<tr class="even">
<td style="text-align: left;">007</td>
<td style="text-align: right;">0.1630934</td>
</tr>
<tr class="odd">
<td style="text-align: left;">012</td>
<td style="text-align: right;">0.1495215</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now that the code has been rewritten, future readers of the code have some much needed context. The author has explained what the data looks like when we get it back from the API, has explained what each of the codes corresponds to, and has renamed a variable to be more helpful. Ultimately, these changes will make it easier for readers to understand what this code is trying to accomplish and work with it.</p>
</section>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>The key takeaway here should be that in doing this review, we‚Äôve established some shared sense of how this code works between <em>multiple</em> people instead of just one (the author) understanding it. In addition, the reviewer helped the author rework their code to make it easier for anyone else on the team to understand. This means that when we need to use this code in the future, it‚Äôll be written in a way that makes it easier for that future person to work with, which will ultimately lead to them being able to ship more quickly and confidently, and needing to reinvent the wheel less often.</p>
<p>A popular saying is that code is read ten times more than it‚Äôs written since we often need to understand existing code to author new code. Reviews are a great way to make sure that code is written in a maintainable, understandable way so that when it‚Äôs read all of those many times in the future, it‚Äôs able to be understood effortlessly.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-14-code-review/code-review.html</guid>
  <pubDate>Mon, 24 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Unit Testing Analytics Code</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-03-unit-testing/unit-testing.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Unit testing was a concept I had never even heard of before I started my <em>second</em> data science job. It never came up in any of my college statistics or computer science courses. It never came up in any of my data science internships. It never came up in my first data science job.</p>
<p>In conversations I have with friends ‚Äì and, broadly, conversations with basically anyone doing data science or analytics ‚Äì I face lots of pushback when it comes to unit testing. Usually the objections come in the form of either not knowing <em>why</em> you might test, since the code is just so simple and straightforward that nothing could go wrong, or not understanding the value added. In my opinion, both of these objections come from the same place. At first glance, it seems like some combination of blissful ignorance about what could go wrong and overconfidence in one‚Äôs own ability or in their code‚Äôs correctness, but I think that the objections actually come from something deeper. In my opinion, it‚Äôs the unfamiliarity of testing. It‚Äôs not something that‚Äôs commonly taught to people involved in analytics, and so it feels new. That can be scary.</p>
</section>
<section id="whats-a-unit-test" class="level2">
<h2 class="anchored" data-anchor-id="whats-a-unit-test">What‚Äôs A Unit Test?</h2>
<p>First thing‚Äôs first: What‚Äôs a unit test? It‚Äôs actually really simple! Unit testing tests the smallest possible components of your code for correctness and what I would define as ‚Äúgood behavior.‚Äù In analytics, you might test things like feature engineering steps, metric definitions, or data wrangling code. The basic idea of a unit test is that you take a function you‚Äôve written, and you‚Äôd make up some inputs to the function and then check if your code produces the outputs you‚Äôd expect. In the simplest case, you might test the identity function as follows:</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-2_baedc5f932b2628f085597b746bbe0fd">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">identity <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb1-2">  x</span>
<span id="cb1-3">}</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The identity returns the input"</span>, {</span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identity</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identity</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo"</span>))</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identity</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Width), </span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identity</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Width))</span>
<span id="cb1-12">  )</span>
<span id="cb1-13">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed üò∏</code></pre>
</div>
</div>
<p>All we‚Äôre doing here is checking that for some given input, our function returns the expected (correct) output. You can also test that your function returns an error or warning, returns nothing, returns <em>some</em> output, and much more. I‚Äôd highly recommend looking at the documentation for <a href="https://testthat.r-lib.org/">testthat</a> or <a href="https://docs.pytest.org/en/7.2.x/">pytest</a> to get a sense for what and how to test.</p>
</section>
<section id="case-study-feature-engineering" class="level2">
<h2 class="anchored" data-anchor-id="case-study-feature-engineering">Case Study: Feature Engineering</h2>
<p>Data scientists very often write feature engineering code. And as it turns out, feature engineering is a very common place where bugs can pop up unbeknownst to the code‚Äôs author.</p>
<div class="callout callout-style-simple callout-important no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>It‚Äôs important to note that data scientists are usually writing Python or R, which are both dynamically typed, interpreted languages. Unit testing is doubly valuable in these types of languages, since you don‚Äôt get the benefits of a compiler and static type checks to catch issues in your code. In languages like Python and R, anything can go wrong in your code. And you often won‚Äôt find out about issues until runtime, or, depending on the nature of the bug, even later (if ever).</p>
</div>
</div>
</div>
<section id="an-example" class="level3">
<h3 class="anchored" data-anchor-id="an-example">An Example</h3>
<p>Let‚Äôs write some example code to create a simple feature to use in a hypothetical machine learning model downstream.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-3_c0b2015731146ce93b02b161739792e3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">create_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb3-2">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x)</span>
<span id="cb3-3">}</span></code></pre></div>
</div>
<p>This might look familiar: It‚Äôs a function that takes a variable <code>x</code> and standardizes it. Now I‚Äôll generate some data to show how it works.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-4_9ac936cca1e25eb9019ac68762ca5b1d">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1000 draws from a Normal(25, 5)</span></span>
<span id="cb4-2">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>We can plot a histogram of our data to show what it looks like:</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-5_17a166d70193940a337fca5e0b5ca90d">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(raw, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-03-unit-testing/unit-testing_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Now, let‚Äôs run <code>raw</code> through our feature engineering function.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-6_f4f67fc856df93ccf70f288974bb0b99">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(raw)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(std, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-03-unit-testing/unit-testing_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Great! Now <code>std</code>, the new variable that we created from standardizing <code>raw</code>, looks like it follows a standard normal distribution.</p>
</section>
<section id="trivial-examples-unexpected-results" class="level3">
<h3 class="anchored" data-anchor-id="trivial-examples-unexpected-results">Trivial Examples, Unexpected Results</h3>
<p>Now that we‚Äôve written a function to create a feature, let‚Äôs use that feature engineering step on a couple of real-world examples. Keep in mind that as data scientists, we‚Äôre often working with messy data ‚Äì it could include missing values, outliers, data of an incorrect type, etc. and there are often very few guarantees about what our data will look like in practice. These next few examples show how things could go wrong (often very quietly) in our seemingly correct feature engineering step we wrote above.</p>
<section id="missings" class="level4">
<h4 class="anchored" data-anchor-id="missings">Missings</h4>
<p>Let‚Äôs do the simplest thing first: What happens when we have missing values in our data?</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-7_66d14569627d7f135f70aba9b621a747">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA NA NA NA</code></pre>
</div>
</div>
<p>If you‚Äôre familiar with R, this should be expected. And you‚Äôre probably thinking to yourself that we just need to set <code>na.rm = TRUE</code>, and you‚Äôd be right! But this brings me to the first major point I‚Äôd like to make on how things can go wrong.</p>
<div class="callout callout-style-simple callout-important no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>When you‚Äôre writing your code, it‚Äôs easy to forget things like adding <code>na.rm = TRUE</code> when the data you‚Äôre working with doesn‚Äôt appear to need it. It‚Äôs probably not your default behavior to remember to always set the flag to tell R to remove <code>NA</code> values, since if you‚Äôre not working with any of them, why would you remember to do that? Expecting yourself to <em>remember</em> to do something like this is a recipe for very brittle, error-prone code.</p>
</div>
</div>
</div>
<p>Let‚Äôs fix this bug the na√Øve way.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-8_beddeadd9fea526fe93dd5c2c16d30d8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">create_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb9-2">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-3">}</span></code></pre></div>
</div>
<p>Great, and now let‚Äôs test it.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-9_610ec24f14a67ee57097ae419c1bf0a7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1  0  1 NA</code></pre>
</div>
</div>
<p>Looks good. Now all of our non-missing values have been correctly transformed.</p>
</section>
<section id="zero-standard-deviation" class="level4">
<h4 class="anchored" data-anchor-id="zero-standard-deviation">Zero Standard Deviation</h4>
<p>How about another non-trivial bug: A standard deviation of zero. Consider a toy example: Predicting whether or not someone plays basketball.</p>
<p>In this example, let‚Äôs say we have both men and women in our training data, and we want to use the height of each person to predict whether that person plays basketball. It probably doesn‚Äôt make sense to standardize the heights without grouping, since we don‚Äôt want to end up with a distribution of heights where most of the women are below average and most of the men are above average. It‚Äôd be much smarter to standardize <em>within group</em>, which would then produce a measure of height relative to the ‚Äúcompetition‚Äù in some sense. Let‚Äôs give that a shot on a trivial data set where every man is the same height.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-10_bc7fd46e599dfc1c3b6a52f79cff7f6c">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb12-3"></span>
<span id="cb12-4">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb12-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player_id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb12-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>),</span>
<span id="cb12-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">71</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">72</span>)</span>
<span id="cb12-8">)</span>
<span id="cb12-9"></span>
<span id="cb12-10">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(sex) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb12-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_std =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(height)</span>
<span id="cb12-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">player_id</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">sex</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">height</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">height_std</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">77</td>
<td style="text-align: right;">NaN</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">77</td>
<td style="text-align: right;">NaN</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">77</td>
<td style="text-align: right;">NaN</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">70</td>
<td style="text-align: right;">-1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">71</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">72</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>So what happened here? In the male group, all of the heights were the same. This resulted in a standard deviation of zero when we went to standardize our height variable, which meant dividing by zero. So we get <code>NaN</code> back ‚Äì Not a Number.</p>
<p>This example feels trivial, but in practice it‚Äôs not. If your data had hundreds or thousands of groups, it‚Äôs not all that unlikely to have a situation like this. And note that R doesn‚Äôt throw any kind of warning or error, it just quietly returns you <code>NaN</code> when you‚Äôre expecting a real number.</p>
</section>
</section>
<section id="infinity" class="level3">
<h3 class="anchored" data-anchor-id="infinity">Infinity</h3>
<p>R also has a built in value for infinity: <code>Inf</code>. What happens if we try to build our feature when we had an <code>Inf</code> in our data?</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-11_1a72ecd0170ee247890cedea5ca0fc4c">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NaN NaN NaN NaN</code></pre>
</div>
</div>
<p>A bunch of <code>NaN</code>. This seems trivial too, but imagine the following example, which you very well might run into in the real world: Computing GDP per capita.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-12_be3d01bf006bc4dde1dcb2773c82909c">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb15-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gdp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>),</span>
<span id="cb15-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">population =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb15-4">)</span>
<span id="cb15-5"></span>
<span id="cb15-6">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb15-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gdp_per_capita =</span> gdp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> population</span>
<span id="cb15-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb15-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gdp_per_capita_std =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(gdp_per_capita)</span>
<span id="cb15-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">gdp</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">population</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">gdp_per_capita</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">gdp_per_capita_std</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1000</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">Inf</td>
<td style="text-align: right;">NaN</td>
</tr>
<tr class="even">
<td style="text-align: right;">2000</td>
<td style="text-align: right;">50</td>
<td style="text-align: right;">40</td>
<td style="text-align: right;">NaN</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3000</td>
<td style="text-align: right;">100</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">NaN</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>R doesn‚Äôt yell at you for dividing by zero unlike Python for instance, or virtually any other self-respecting programming language. This means that if you accidentally divide by zero somewhere in your data pipeline, you could very well end up with a bunch of <code>NaN</code> if you standardize. And working with real-world data means that dividing by zero happens fairly often, generally because of small issues in the data we‚Äôre working with.</p>
<section id="one-row-per-group" class="level4">
<h4 class="anchored" data-anchor-id="one-row-per-group">One Row Per Group</h4>
<p>Back to grouping: It‚Äôs also pretty likely when working with real-world data that you might have a group with only one row. Let‚Äôs see what happens in that case.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-13_1b416dece320c2ff339e61ec34c96db0">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-4">)</span>
<span id="cb16-5"></span>
<span id="cb16-6">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value_std =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(value)</span>
<span id="cb16-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">group</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">value</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">value_std</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">NA</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">-0.7071068</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0.7071068</td>
</tr>
<tr class="even">
<td style="text-align: right;">3</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">-0.7071068</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">0.7071068</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Once again, same issue. A single-row group returns <code>NA</code>, since the standard deviation of a single number isn‚Äôt defined.</p>
</section>
</section>
<section id="lessons" class="level3">
<h3 class="anchored" data-anchor-id="lessons">Lessons</h3>
<p>What have we learned here?</p>
<p>In short, there are many ways for things to quietly go wrong in your data pipelines, especially in a language like R. Even with a function as simple as standardization, it‚Äôs easy to cook up all kinds of possible corner cases or other issues that would cause your function to return any number of unpredictable results. And when working with real-world data, some of these quirks are inevitable. It‚Äôs virtually impossible that you‚Äôd never run into any of the issues enumerated above when working with messy data for any amount of time. And these examples were about as simple as they could be. In the real world, analytical code is often far more complicated and data far messier than this, which compounds the likelihood of issues like these.</p>
</section>
</section>
<section id="enter-testing" class="level2">
<h2 class="anchored" data-anchor-id="enter-testing">Enter Testing</h2>
<p>And with all of that: Back to testing. Testing is the only way to know that your code is actually doing what you think it‚Äôs doing, and writing tests is a great way to make guarantees about the ability of your code to handle some of these issues that we‚Äôve discussed. Writing tests also lets you ensure that your implementation is correct, and it lets you refactor your code more easily by loudly alerting you if you‚Äôve broken something, which should make you much more confident in the correctness of your implementation.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>If you‚Äôre not familiar with it, this is a good point to introduce <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test-Driven Development</a>. It‚Äôs not something I would <em>always</em> recommend, but at least being familiar with it might make for a good starting point when it comes to learning how to think about writing tests for your code</p>
</div>
</div>
</div>
<section id="testing-our-standardization-function" class="level3">
<h3 class="anchored" data-anchor-id="testing-our-standardization-function">Testing Our Standardization Function</h3>
<p>And with that, let‚Äôs write some tests. Imagine that we knew that we wanted to write our feature engineering function to do standardization. We also know that we want to avoid some of the bugs that we introduced in the examples above. One possible option for handling those cases where our function will do something unexpected would be to throw an error if we get unexpected inputs. That‚Äôs what I‚Äôll illustrate here ‚Äì it‚Äôd let the user learn about the issue quickly and debug. There are many options for how to handle these issues though. You might also fall back on a default value when your code will return a <code>NA</code> or <code>NaN</code>, for instance. Now, on to the tests.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-14_ef42be270c0b4a2180a42e0f12a36fff">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb17-2"></span>
<span id="cb17-3">test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standardized variable is transformed correctly"</span>, {</span>
<span id="cb17-5">    random_normal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb17-6">    </span>
<span id="cb17-7">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Expect that the mean of the transformed data is within</span></span>
<span id="cb17-8">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 0.005 of zero</span></span>
<span id="cb17-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_lt</span>(</span>
<span id="cb17-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(random_normal))),</span>
<span id="cb17-11">      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span></span>
<span id="cb17-12">    )</span>
<span id="cb17-13">    </span>
<span id="cb17-14">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Expect that the stddev of the transformed data is within</span></span>
<span id="cb17-15">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 0.005 of 1</span></span>
<span id="cb17-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_lt</span>(</span>
<span id="cb17-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(random_normal))),</span>
<span id="cb17-18">      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span></span>
<span id="cb17-19">    )</span>
<span id="cb17-20">    </span>
<span id="cb17-21">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Expect that the math is done correctly</span></span>
<span id="cb17-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(</span>
<span id="cb17-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb17-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-25">    )</span>
<span id="cb17-26">  })</span>
<span id="cb17-27">  </span>
<span id="cb17-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inifinity causes an error"</span>, {</span>
<span id="cb17-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_error</span>(</span>
<span id="cb17-30">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)),</span>
<span id="cb17-31">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must not contain any infinite values"</span></span>
<span id="cb17-32">    )</span>
<span id="cb17-33">  })</span>
<span id="cb17-34">  </span>
<span id="cb17-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zero stddev causes an error"</span>, {</span>
<span id="cb17-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_error</span>(</span>
<span id="cb17-37">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb17-38">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have a non-zero standard deviation"</span></span>
<span id="cb17-39">    )</span>
<span id="cb17-40">  })</span>
<span id="cb17-41">  </span>
<span id="cb17-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Length one causes an error"</span>, {</span>
<span id="cb17-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_error</span>(</span>
<span id="cb17-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb17-45">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have more than one unique element"</span></span>
<span id="cb17-46">    )</span>
<span id="cb17-47">  })</span>
<span id="cb17-48">}</span></code></pre></div>
</div>
<p>And now let‚Äôs run our test suite.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-15_f3981b5864d544f963cae4722f3e8480">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed ü•≥
‚îÄ‚îÄ Failure (&lt;text&gt;:29:5): Inifinity causes an error ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
`create_feature(c(1, 2, 3/0))` did not throw an error.</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in `reporter$stop_if_needed()`:
! Test failed</code></pre>
</div>
</div>
<p>Unsurprisingly, we get some failures. So now let‚Äôs refactor our feature engineering function to pass our tests.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-16_a73c51c5b2a787a6ae1a655434346bc3">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb21-2"></span>
<span id="cb21-3">create_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb21-4">  </span>
<span id="cb21-5">  mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb21-6">  sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb21-7"></span>
<span id="cb21-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have a non-zero standard deviation."</span>)</span>
<span id="cb21-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> 1L)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have more than one unique element."</span>)</span>
<span id="cb21-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.nan</span>(x)))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must not contain any `NaN` values."</span>)</span>
<span id="cb21-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.infinite</span>(x)))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must not contain any infinite values."</span>)</span>
<span id="cb21-12"></span>
<span id="cb21-13">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma</span>
<span id="cb21-14">}</span>
<span id="cb21-15"></span>
<span id="cb21-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed ü•≥
Test passed ü•≥
Test passed ü•≥
Test passed ü•≥</code></pre>
</div>
</div>
<p>Woohoo! Our tests all passed. Now, if the user of our function tries to do something like only providing a single value for <code>x</code>, they get an informative error back.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-17_19da53894d89db6c1f9cf12905f7fca1">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `create_feature()`:
! `x` must have more than one unique element.</code></pre>
</div>
</div>
<p>In a less trivial example, consider our grouped computation from before:</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-18_4f030a334d25f2c3e8643902d66d4d59">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb25-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb25-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb25-4">)</span>
<span id="cb25-5"></span>
<span id="cb25-6">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb25-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value_std =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(value)</span>
<span id="cb25-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `mutate()`:
‚Ñπ In argument: `value_std = create_feature(value)`.
‚Ñπ In group 1: `group = 1`.
Caused by error in `create_feature()`:
! `x` must have more than one unique element.</code></pre>
</div>
</div>
<p>Not only do we get a helpful error, but in this particular case <code>dplyr</code> also adds helpful context: It tells us which step failed and which group it failed on so that we can effectively debug.</p>
</section>
</section>
<section id="refactoring" class="level2">
<h2 class="anchored" data-anchor-id="refactoring">Refactoring</h2>
<p>Now that we have a test suite, we can also refactor our function and be much more confident that we haven‚Äôt broken anything. Let‚Äôs do an overly complicated refactor.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-19_939f340cf3b4d95e2e88831c4af67082">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">create_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb27-2">  </span>
<span id="cb27-3">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Compute the mean as the sum of the non-null elements </span></span>
<span id="cb27-4">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## divided by the number of non-null elements</span></span>
<span id="cb27-5">  mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(x))</span>
<span id="cb27-6">  sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb27-7"></span>
<span id="cb27-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have a non-zero standard deviation."</span>)</span>
<span id="cb27-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> 1L)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have more than one unique element."</span>)</span>
<span id="cb27-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.nan</span>(x)))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must not contain any `NaN` values."</span>)</span>
<span id="cb27-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.infinite</span>(x)))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must not contain any infinite values."</span>)</span>
<span id="cb27-12"></span>
<span id="cb27-13">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma</span>
<span id="cb27-14">}</span></code></pre></div>
</div>
<p>And now let‚Äôs run our tests again.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-20_e2a30e02b399e6ee2fe3cfc2cf4bbe95">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed ü•≥
Test passed ü•≥
Test passed ü•≥
Test passed ü•á</code></pre>
</div>
</div>
<p>Awesome! We just did a simple refactor and our tests passed, so I feel good about the correctness of that refactor. This was a very simple example, but you could imagine arbitrarily complex refactors. The value of a test suite increases exponentially as the complexity of the code increases.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>There are a few important takeaways from this post.</p>
<p>First and most importantly, it‚Äôs important to test your code. There are so many ways that things can go wrong, and writing tests is the only way to really be confident that nothing is. This is especially true in dynamically typed, interpreted languages like R or Python, where data scientists don‚Äôt get the benefits of a compiler or a static type system to catch bugs in their code.</p>
<p>Second, analytical code that‚Äôs well-written should be easy to test. Ultimately, lots of the code we write for analytics work takes some data, does something to it, and returns some new data. That type of logic makes for a great use case for unit testing: If your code doesn‚Äôt produce the values you expect, it‚Äôs incorrect.</p>
<p>Lastly, there are many tools in Python (<code>pytest</code>, <code>unittest</code>, etc.) and R (<code>testthat</code>) to make unit testing as simple as writing a few lines of logic and an assertion or two. And then you get all the benefits of having well-tested code, such as the newly-found ease of refactoring said code without being concerned about breaking it.</p>
<p>Happy testing, and enjoy the peace of mind!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-03-unit-testing/unit-testing.html</guid>
  <pubDate>Wed, 05 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Writing Internal Libraries for Analytics Work</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-01-library-code/library-code.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>By definition, library code is code that‚Äôs written to being reused by programs other than itself that are unrelated to each other. For instance, <code>dplyr</code> (R) and <code>pandas</code> (Python) are common examples of library code: Instead of writing code from scratch to work with tabular data, you might use one of those two fantastic libraries. And you get some additional benefits from using them:</p>
<ol type="1">
<li>Those libraries are well-documented, so it‚Äôs easy to figure out how to use them.</li>
<li>They‚Äôre well-tested, so you (presumably) know that bugs are less likely than if you were to try to write the same functionality from scratch.</li>
<li>They‚Äôre (relatively) performant.</li>
<li>They‚Äôre widely used, so it‚Äôs easy to find answers to questions and get help from the communities using them.</li>
</ol>
</section>
<section id="a-common-library" class="level2">
<h2 class="anchored" data-anchor-id="a-common-library">A Common Library</h2>
<p>At CollegeVine, we have <code>collegeviner</code>: An R package containing a lot of code that we use very often for all kinds of analytics projects. Some things that live in <code>collegeviner</code> include:</p>
<ol type="1">
<li>Plot theming code, so that we can consistently theme graphics across all of our work.</li>
<li>A custom implementation of item-based collaborative filtering, which is core to our school recommendation system.</li>
<li><code>DBI</code> and <code>aws.s3</code> wrappers for connecting to and querying our databases and working with data in S3.</li>
<li>Helper methods for common math we do, such as converting between odds, log-odds, and probabilities.</li>
<li>Miscellaneous helper code for things that don‚Äôt exist natively in R, such as <code>yeet</code> for removing an item from a list and <code>%notin%</code>, the inverse of the <code>%in%</code> operator.</li>
<li>An implementation of the Brier Skill Score, which is a metric we often use for evaluating classification models.</li>
<li>A lot more!</li>
</ol>
<p>You might think of <code>collegeviner</code> as being a common library of things that our team does often, so we don‚Äôt need to repeat ourselves or reinvent the wheel.</p>
<section id="a-toy-example" class="level3">
<h3 class="anchored" data-anchor-id="a-toy-example">A Toy Example</h3>
<p>Let‚Äôs imagine that you‚Äôre setting up a common library (in this example, an R package) for your team. The first thing you might want to do is have some logic to help your team connect to your data warehouse. For this example, let‚Äôs just imagine that ‚Äúwarehouse‚Äù is your local Postgres instance. Then, you might write a method for your library called <code>connect_to_dwh</code> like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(httr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RPostgres)</span>
<span id="cb1-5"></span>
<span id="cb1-6">connect_to_dwh <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATA_WAREHOUSE_URL"</span>)) {</span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (url <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You must specify a dwh URL."</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_installed</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"httr"</span>)</span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_installed</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPostgres"</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12">  db_params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_url</span>(url)</span>
<span id="cb1-13"></span>
<span id="cb1-14">  db_drv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>()</span>
<span id="cb1-15">  db_user <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>username</span>
<span id="cb1-16">  db_password <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>password</span>
<span id="cb1-17">  db_host <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hostname</span>
<span id="cb1-18">  db_port <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>port <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%||%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span></span>
<span id="cb1-19">  db_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>path</span>
<span id="cb1-20"></span>
<span id="cb1-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(</span>
<span id="cb1-22">    db_drv,</span>
<span id="cb1-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> db_name,</span>
<span id="cb1-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host =</span> db_host,</span>
<span id="cb1-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port =</span> db_port,</span>
<span id="cb1-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> db_user,</span>
<span id="cb1-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password =</span> db_password</span>
<span id="cb1-28">  )</span>
<span id="cb1-29">}</span></code></pre></div>
</div>
<p>Now you have a single function that your whole team can share to connect to your data warehouse, assuming that they can provide the connection string. Let‚Äôs test out how the workflow might look for querying data now.</p>
<section id="connecting" class="level4">
<h4 class="anchored" data-anchor-id="connecting">Connecting</h4>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DATA_WAREHOUSE_URL =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgresql://localhost:5432/postgres"</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3">conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">connect_to_dwh</span>()</span></code></pre></div>
</div>
<p>And that‚Äôs it! You‚Äôre connected. You can now query away using <code>dbGetQuery()</code>, a custom wrapper, <code>dbplyr</code>, or any other method of choice.</p>
</section>
<section id="querying" class="level4">
<h4 class="anchored" data-anchor-id="querying">Querying</h4>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Put some data into the warehouse for example purposes</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(conn, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Id</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">schema =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blog"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">table =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris"</span>), janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>(iris))</span>
<span id="cb3-3"></span>
<span id="cb3-4">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb3-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  SELECT species, MAX(sepal_length) AS max_sepal_length</span></span>
<span id="cb3-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  FROM blog.iris</span></span>
<span id="cb3-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  GROUP BY species</span></span>
<span id="cb3-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ORDER BY 2 DESC</span></span>
<span id="cb3-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "</span></span>
<span id="cb3-12">)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>(result)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">max_sepal_length</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">virginica</td>
<td style="text-align: right;">7.9</td>
</tr>
<tr class="even">
<td style="text-align: left;">versicolor</td>
<td style="text-align: right;">7.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">setosa</td>
<td style="text-align: right;">5.8</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
<section id="testing" class="level4">
<h4 class="anchored" data-anchor-id="testing">Testing</h4>
<p>It‚Äôs also important to test your code. <code>testthat</code> makes writing unit tests for your new <code>connect_to_dwh</code> function very simple.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Connecting works as expected"</span>, {</span>
<span id="cb4-4">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This should error because the URL is empty</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_error</span>(</span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">connect_to_dwh</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb4-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You must specify a dwh URL"</span></span>
<span id="cb4-8">  )</span>
<span id="cb4-9">  </span>
<span id="cb4-10">  conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">connect_to_dwh</span>()</span>
<span id="cb4-11"></span>
<span id="cb4-12">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Should return a PqConnection object</span></span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_s4_class</span>(conn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PqConnection"</span>)</span>
<span id="cb4-14">  </span>
<span id="cb4-15">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Should be able to query an example table</span></span>
<span id="cb4-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb4-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(conn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT COUNT(*) FROM blog.iris"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>count,</span>
<span id="cb4-18">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span></span>
<span id="cb4-19">  )</span>
<span id="cb4-20">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed ü•á</code></pre>
</div>
</div>
</section>
<section id="versioning" class="level4">
<h4 class="anchored" data-anchor-id="versioning">Versioning</h4>
<p>Lastly, it‚Äôs important to <em>version</em> your code. <a href="https://semver.org/#semantic-versioning-200">Semantic Versioning</a> (SemVer) is a very common standard for versioning library code. In R specifically, you can read about versioning in <a href="https://r-pkgs.org/lifecycle.html">Chapter 22 of <em>R Packages</em></a>.</p>
<p>In our toy example, this means that if you change how the logic of your <code>connect_to_dwh</code> function works, you should change the version of your package so that your users (your teammates) don‚Äôt get blindsided by your change. Incrementing your package‚Äôs version shows your teammates that something has changed in your library, and they can update their code to rely on the latest version (if they wish), or continue using the current version they‚Äôre on, or anything else.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>Note that being able to control which version of a library your code is using requires some manner of managing dependencies. In R, I would highly recommend <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a>. In Python, I like <a href="https://python-poetry.org/">Poetry</a>.</p>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="one-library-per-model" class="level2">
<h2 class="anchored" data-anchor-id="one-library-per-model">One Library Per Model</h2>
<p>In addition to a common library for sharing code that‚Äôs very often used across the data org, our team has also gotten into the habit of having a library per ML model in production. This definition can be a bit flexible (both in terms of what ‚ÄúML model‚Äù means, and also what ‚Äúproduction‚Äù means), but the basic principle should be the same: ML in production requires at least some training logic and some monitoring logic. It‚Äôs a good idea to share code between those two things. Let‚Äôs consider another simple example.</p>
<section id="iris-species-prediction" class="level3">
<h3 class="anchored" data-anchor-id="iris-species-prediction">Iris Species Prediction</h3>
<p>Let‚Äôs imagine that we work for a florist. On our website, we have a service where someone can provide some measurements about an iris (either a setosa or a virginica), as we‚Äôll tell them which of the two we think it is. We know we‚Äôll want to retrain the model periodically as we get more data, and we‚Äôll also want to monitor how our model performs out-of-sample. Both training the model and monitoring will require some shared logic: loading raw data, doing feature engineering, and making predictions. So it would make sense to have those two jobs rely on a single library, as opposed to needing to repeat the logic. Let‚Äôs write that library here.</p>
<section id="fetching-the-data" class="level4">
<h4 class="anchored" data-anchor-id="fetching-the-data">Fetching the Data</h4>
<p>First, let‚Äôs write a method to fetch the raw data from our data warehouse. In practice, it probably makes sense to factor out the SQL here into individual SQL scripts, but for this example I‚Äôll just include the SQL directly as a string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fetch_raw_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(conn) {</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb6-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT *</span></span>
<span id="cb6-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM blog.iris</span></span>
<span id="cb6-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    WHERE species IN ('setosa', 'virginica')</span></span>
<span id="cb6-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "</span></span>
<span id="cb6-9">  )</span>
<span id="cb6-10">}</span></code></pre></div>
</div>
</section>
<section id="feature-engineering" class="level4">
<h4 class="anchored" data-anchor-id="feature-engineering">Feature Engineering</h4>
<p>Next, let‚Äôs write some methods to create features.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">create_sepal_length_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(sepal_length) {</span>
<span id="cb7-2">  sepal_length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(sepal_length))</span>
<span id="cb7-3">}</span>
<span id="cb7-4"></span>
<span id="cb7-5">create_petal_width_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(petal_width) {</span>
<span id="cb7-6">  petal_width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgamma</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(petal_width), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-7">}</span></code></pre></div>
</div>
<p>And then we can write a function to take our raw data, run the feature engineering steps, and return the features.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">create_features <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(raw_data) {</span>
<span id="cb8-2">  sepal_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_sepal_length_feature</span>(raw_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sepal_length)</span>
<span id="cb8-3">  petal_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_petal_width_feature</span>(raw_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>petal_width)</span>
<span id="cb8-4">  is_setosa <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setosa"</span></span>
<span id="cb8-5">  </span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb8-7">    sepal_length,</span>
<span id="cb8-8">    petal_width,</span>
<span id="cb8-9">    is_setosa</span>
<span id="cb8-10">  )</span>
<span id="cb8-11">}</span></code></pre></div>
</div>
</section>
<section id="model-fitting-and-prediction" class="level4">
<h4 class="anchored" data-anchor-id="model-fitting-and-prediction">Model Fitting and Prediction</h4>
<p>Next, let‚Äôs write methods to fit the model and make predictions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">fit_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(features) {</span>
<span id="cb9-2">  formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> is_setosa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sepal_length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> petal_width</span>
<span id="cb9-3"></span>
<span id="cb9-4">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Dynamically extract the variables in the formula</span></span>
<span id="cb9-5">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## so we don't need to repeat ourselves</span></span>
<span id="cb9-6">  predictors <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">terms</span>(formula)))</span>
<span id="cb9-7">  target <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(formula[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb9-8">  </span>
<span id="cb9-9">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Very basic error handling</span></span>
<span id="cb9-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(predictors, target) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(features))) {</span>
<span id="cb9-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some required columns were missing from `features`"</span>)</span>
<span id="cb9-12">  }</span>
<span id="cb9-13">  </span>
<span id="cb9-14">  model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(</span>
<span id="cb9-15">    formula,</span>
<span id="cb9-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> features,</span>
<span id="cb9-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial</span>
<span id="cb9-18">  )</span>
<span id="cb9-19">  </span>
<span id="cb9-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(model) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"irises"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(model))</span>
<span id="cb9-21">  </span>
<span id="cb9-22">  model</span>
<span id="cb9-23">}</span>
<span id="cb9-24"></span>
<span id="cb9-25">predict.irises <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb9-26">  probs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict.glm</span>(</span>
<span id="cb9-27">    object,</span>
<span id="cb9-28">    newdata,</span>
<span id="cb9-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span></span>
<span id="cb9-30">  )</span>
<span id="cb9-31">  </span>
<span id="cb9-32">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## If the predicted probability is &gt; 50%,</span></span>
<span id="cb9-33">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## return `true`, else return `false`</span></span>
<span id="cb9-34">  probs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span></span>
<span id="cb9-35">}</span></code></pre></div>
</div>
</section>
<section id="model-evaluation" class="level4">
<h4 class="anchored" data-anchor-id="model-evaluation">Model Evaluation</h4>
<p>And finally, let‚Äôs add a function to compute the model‚Äôs accuracy on some evaluation data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">compute_accuracy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(prediction, is_setosa) {</span>
<span id="cb10-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(prediction <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> is_setosa) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(prediction)</span>
<span id="cb10-3">}</span></code></pre></div>
</div>
</section>
<section id="testing-1" class="level4">
<h4 class="anchored" data-anchor-id="testing-1">Testing</h4>
<p>It‚Äôs important to note that all of the methods above can and should be unit tested in the same way we tested our helper for connecting to the database. Testing is a great way to ensure the correctness of your code and make it more maintainable by making it easier to refactor in the future, and putting all of your modeling logic into a library like this makes it very easy to test. For instance, here‚Äôs how you might write a couple of unit tests for the petal width feature.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Petal width feature is created correctly"</span>, {</span>
<span id="cb11-2">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## The feature should be positive even when the</span></span>
<span id="cb11-3">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## petal width is zero, since we're adding gamma</span></span>
<span id="cb11-4">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## random noise.</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_gt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_petal_width_feature</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-6">  </span>
<span id="cb11-7">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## It should be extremely unlikely that a single </span></span>
<span id="cb11-8">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## draw from a gamma(2) is &gt;10, which means this</span></span>
<span id="cb11-9">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## feature should be &lt; 10 when the input is 0 in </span></span>
<span id="cb11-10">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## the vast majority of cases.</span></span>
<span id="cb11-11">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb11-12">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">: This is by definition a brittle test, and</span></span>
<span id="cb11-13">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## I wouldn't recommend writing tests that are</span></span>
<span id="cb11-14">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## probabilistic like this in practice unless</span></span>
<span id="cb11-15">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## you really need to. If you do, this will</span></span>
<span id="cb11-16">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## fail _some_ of the time, at random, even</span></span>
<span id="cb11-17">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## if "some" is a very small percentage.</span></span>
<span id="cb11-18">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(</span>
<span id="cb11-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), </span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb11-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_lt</span>(</span>
<span id="cb11-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_petal_width_feature</span>(x),</span>
<span id="cb11-23">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb11-24">      )</span>
<span id="cb11-25">    } </span>
<span id="cb11-26">  )</span>
<span id="cb11-27">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed ü•≥</code></pre>
</div>
</div>
</section>
</section>
<section id="a-retraining-job" class="level3">
<h3 class="anchored" data-anchor-id="a-retraining-job">A Retraining Job</h3>
<p>Great! Now that we have all of that library code written, we can package it up into a retraining job. A very simple training job might look like this:</p>
<p>First, connect to the data warehouse</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">connect_to_dwh</span>()</span></code></pre></div>
</div>
<p>Next, fetch the raw data from the warehouse that we need to train the model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_raw_data</span>(conn)</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(raw))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">sepal_length</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">sepal_width</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">petal_length</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">petal_width</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">5.1</td>
<td style="text-align: right;">3.5</td>
<td style="text-align: right;">1.4</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="even">
<td style="text-align: right;">4.9</td>
<td style="text-align: right;">3.0</td>
<td style="text-align: right;">1.4</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="odd">
<td style="text-align: right;">4.7</td>
<td style="text-align: right;">3.2</td>
<td style="text-align: right;">1.3</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="even">
<td style="text-align: right;">4.6</td>
<td style="text-align: right;">3.1</td>
<td style="text-align: right;">1.5</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5.0</td>
<td style="text-align: right;">3.6</td>
<td style="text-align: right;">1.4</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="even">
<td style="text-align: right;">5.4</td>
<td style="text-align: right;">3.9</td>
<td style="text-align: right;">1.7</td>
<td style="text-align: right;">0.4</td>
<td style="text-align: left;">setosa</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Next, create the features from the raw data by running the feature engineering pipeline.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">features <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_features</span>(raw)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(features))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">sepal_length</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">petal_width</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">is_setosa</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">5.260</td>
<td style="text-align: right;">0.868</td>
<td style="text-align: left;">TRUE</td>
</tr>
<tr class="even">
<td style="text-align: right;">5.307</td>
<td style="text-align: right;">1.297</td>
<td style="text-align: left;">TRUE</td>
</tr>
<tr class="odd">
<td style="text-align: right;">4.078</td>
<td style="text-align: right;">3.505</td>
<td style="text-align: left;">TRUE</td>
</tr>
<tr class="even">
<td style="text-align: right;">3.678</td>
<td style="text-align: right;">1.393</td>
<td style="text-align: left;">TRUE</td>
</tr>
<tr class="odd">
<td style="text-align: right;">4.739</td>
<td style="text-align: right;">1.597</td>
<td style="text-align: left;">TRUE</td>
</tr>
<tr class="even">
<td style="text-align: right;">3.329</td>
<td style="text-align: right;">2.272</td>
<td style="text-align: left;">TRUE</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Then fit a model using the features.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_model</span>(features)</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(model))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th"></th>
<th style="text-align: right;" data-quarto-table-cell-role="th">x</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">(Intercept)</td>
<td style="text-align: right;">10.810</td>
</tr>
<tr class="even">
<td style="text-align: left;">sepal_length</td>
<td style="text-align: right;">-1.443</td>
</tr>
<tr class="odd">
<td style="text-align: left;">petal_width</td>
<td style="text-align: right;">-0.742</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Finally, evaluate the performance of the model by making predictions and computing the accuracy of those predictions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model)</span>
<span id="cb17-2">accuracy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_accuracy</span>(preds, features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>is_setosa)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model accuracy is "</span>, accuracy, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model accuracy is 85%</code></pre>
</div>
</div>
<p>And that‚Äôs it ‚Äì you have a simple retraining job. This is a very minimal example, but this general framework is very flexible and modular, and it makes up the foundation for how we write our retraining jobs at CollegeVine. You can plug and play all different kinds of feature engineering logic, logic to fetch raw data, metrics, etc. We also use <a href="https://mlflow.org/">MLFlow</a> for versioning models and tracking experiments, so our retraining jobs have lots of logging of artifacts, parameters, and metrics to our MLFlow instance.</p>
</section>
<section id="a-monitoring-job" class="level3">
<h3 class="anchored" data-anchor-id="a-monitoring-job">A Monitoring Job</h3>
<p>Next, let‚Äôs imagine we want to monitor out-of-sample performance of the model. Let‚Äôs modify the table with our raw data in the database for this, just for the sake of an example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">transaction_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWithTransaction</span>(</span>
<span id="cb19-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb19-3">  {</span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbExecute</span>(</span>
<span id="cb19-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb19-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb19-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      ALTER TABLE blog.iris</span></span>
<span id="cb19-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      ADD COLUMN created_at TIMESTAMP</span></span>
<span id="cb19-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      "</span></span>
<span id="cb19-10">    )</span>
<span id="cb19-11">    </span>
<span id="cb19-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbExecute</span>(</span>
<span id="cb19-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb19-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb19-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      UPDATE blog.iris</span></span>
<span id="cb19-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      SET created_at = NOW() - random() * INTERVAL '2 weeks'</span></span>
<span id="cb19-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      "</span></span>
<span id="cb19-18">    )</span>
<span id="cb19-19">  }</span>
<span id="cb19-20">)</span></code></pre></div>
</div>
<p>Great, and now let‚Äôs make one or two small modifications to our code from above that pulled the raw data from the data warehouse.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">fetch_raw_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(conn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">created_after =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1970-01-01 00:00:00'</span>) {</span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(</span>
<span id="cb20-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(</span>
<span id="cb20-5">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb20-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      SELECT *</span></span>
<span id="cb20-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      FROM blog.iris</span></span>
<span id="cb20-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      WHERE </span></span>
<span id="cb20-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        species IN ('setosa', 'virginica')</span></span>
<span id="cb20-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        AND created_at &gt; '%s'</span></span>
<span id="cb20-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      "</span>,</span>
<span id="cb20-12">      created_after</span>
<span id="cb20-13">    )</span>
<span id="cb20-14">  )</span>
<span id="cb20-15">}</span></code></pre></div>
</div>
<p>All we‚Äôve done here is added the ability to specify a <code>created_at</code> date to use as the cutoff point, where we‚Äôd only include records in our raw data that were created after said point. In practice, this lets us filter our raw data down to only records that were created after the model was trained (the out-of-sample data).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## In practice, this would be set at training time and "frozen"</span></span>
<span id="cb21-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## possibly by logging the value as a parameter in the MLFlow run</span></span>
<span id="cb21-3">model_trained_at <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_raw_data</span>(conn)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>created_at)</span></code></pre></div>
</div>
<p>And now that we‚Äôve artificially created a <code>trained_at</code> date for the model, we can run our monitoring job. It‚Äôs quite simple, and very similar to the retraining job. All we do here is pull raw data that has been created since the model was trained, run the feature engineering pipeline, make predictions, and compute the accuracy of the model out-of-sample.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_raw_data</span>(conn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">created_after =</span> model_trained_at)</span>
<span id="cb22-2"></span>
<span id="cb22-3">features <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_features</span>(raw)</span>
<span id="cb22-4">predictions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, features)</span>
<span id="cb22-5"></span>
<span id="cb22-6">accuracy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_accuracy</span>(predictions, features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>is_setosa)</span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Out-of-sample accuracy is "</span>, accuracy, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Out-of-sample accuracy is 82%</code></pre>
</div>
</div>
</section>
</section>
<section id="tying-it-together" class="level2">
<h2 class="anchored" data-anchor-id="tying-it-together">Tying it Together</h2>
<p>The key piece to notice is how much we‚Äôre leveraging our library code in both the retraining and monitoring job. In both cases, we‚Äôre doing some very similar things ‚Äì pulling raw data, creating features, making predictions, computing accuracy ‚Äì so it makes a lot of sense that we‚Äôd want to reuse the code for those two jobs.</p>
<p>There might also be more use cases for the code: More retraining or monitoring jobs, REST APIs, ETL jobs, etc. The more times you need to rely on the same logic, the more benefit you‚Äôll derive from having a single source of truth for all of the logic for your modeling process.</p>
<p>It also might be useful to separate this library from the common library proposed at the start. There are important tradeoffs to consider: On one hand, a single library might be convenient for having all of your logic in a single place. But on the other hand, as your library grows in scope, it‚Äôll necessarily have a bigger footprint, rely on more dependencies, etc. which will make its use and maintenance more difficult. A happy middle ground for us has been having a single library per ‚Äúmodel‚Äù or use case. For instance, at CollegeVine we have a package called <code>mlchancing</code> for our <a href="https://www.collegevine.com/admissions-calculator">chancing model</a> and a separate package called <code>schoolrecommendr</code> for school recommendations and affinity scoring. Keeping these separate has made it easier to iterate on each model individually while also not being a maintenance or ramp-up headache.</p>
<p>It‚Äôs my view that models and other analytics work that is in production is software, and should be treated as such. If a model is going to be shipped to production, it at the <em>very least</em> needs to be tested, documented, versioned, and put through some kind of CI/CD process. It‚Äôd be even better if it‚Äôs monitored automatically so that the data scientists working on it can be notified quickly if things start going wrong. Ultimately, writing library code for your modeling work is very well-suited to meeting all of these expectations. And it also just makes everyone‚Äôs lives easier by not needing to reinvent the wheel all the time.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-01-library-code/library-code.html</guid>
  <pubDate>Sat, 01 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Balancing Classes in Classification Problems</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="https://matthewrkaye.com/posts/2023-03-20-metrics-calibration/calibration.html">my last post</a> I wrote about common classifications metrics and, especially, calibration.</p>
<p>With calibration in mind, this post will show why balancing your classes ‚Äì which is an all-too-common practice when working on classification problems ‚Äì is generally a bad idea and leads to poorly calibrated models.</p>
</section>
<section id="some-example-data" class="level2">
<h2 class="anchored" data-anchor-id="some-example-data">Some Example Data</h2>
<p>For the purposes of this example, I‚Äôll use the Wisconsin breast cancer data. The data is built into the <code>mlbench</code> package in R and <code>scikit-learn</code> in python. You can also get it from the <a href="https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)">UCI Machine Learning Repository</a>.</p>
<p>I‚Äôll only be using <code>cl_thickness</code>, which is the indicator for clump thickness.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-2_2d07da233c515f06e9ba17c34c77b64e">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janitor)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mlbench)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(BreastCancer)</span>
<span id="cb1-8"></span>
<span id="cb1-9">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> BreastCancer <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(</span>
<span id="cb1-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cl_thickness =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(cl_thickness), </span>
<span id="cb1-13">    class</span>
<span id="cb1-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb1-16"></span>
<span id="cb1-17">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">cl_thickness</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">benign</td>
</tr>
<tr class="even">
<td style="text-align: right;">3</td>
<td style="text-align: left;">benign</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: left;">malignant</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: left;">benign</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">benign</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>The data is imbalanced: There are far more (about 2x) benign tumors than malignant ones in the sample.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-3_52ea88dedd038573a8a6f2ef94ce554e">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">class</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">n</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">prop</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">benign</td>
<td style="text-align: right;">458</td>
<td style="text-align: right;">0.6552217</td>
</tr>
<tr class="even">
<td style="text-align: left;">malignant</td>
<td style="text-align: right;">241</td>
<td style="text-align: right;">0.3447783</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
<section id="model-fitting" class="level2">
<h2 class="anchored" data-anchor-id="model-fitting">Model Fitting</h2>
<p>With that class imbalance in mind, let‚Äôs get to model fitting. The first thing I‚Äôll do is fit a simple logistic regression model to predict the class (either malignant or benign) from the clump thickness.</p>
<p>First, I‚Äôve written a bit of <code>tidymodels</code> helper code below for reuse later.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-4_4dc844657887e02084b5bd5224e2a415">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidymodels)</span>
<span id="cb3-2"></span>
<span id="cb3-3">fit_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, spec) {</span>
<span id="cb3-4">  spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(spec, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classification"</span>)</span>
<span id="cb3-5">  </span>
<span id="cb3-6">  rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(</span>
<span id="cb3-7">    class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cl_thickness,</span>
<span id="cb3-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data</span>
<span id="cb3-9">  )</span>
<span id="cb3-10">  </span>
<span id="cb3-11">  wf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_model</span>(spec) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_recipe</span>(rec)</span>
<span id="cb3-14">  </span>
<span id="cb3-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(wf, data)</span>
<span id="cb3-16">}</span>
<span id="cb3-17"></span>
<span id="cb3-18">predict_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(model, data) {</span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prob"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.pred_malignant</span>
<span id="cb3-20">}</span></code></pre></div>
</div>
<p>Now, I‚Äôll fit a simple logistic regression model by specifying <code>logistic_reg()</code> as the model specification in <code>fit_model()</code>.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-5_5ddb90f924073d8a54cad67b62f080c3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(probably)</span>
<span id="cb4-2"></span>
<span id="cb4-3">unbalanced_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_model</span>(</span>
<span id="cb4-4">  data,</span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logistic_reg</span>()</span>
<span id="cb4-6">)</span>
<span id="cb4-7"></span>
<span id="cb4-8">preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class,</span>
<span id="cb4-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth_int =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict_prob</span>(unbalanced_model, data)</span>
<span id="cb4-12">)</span></code></pre></div>
</div>
<p>And now we can make a calibration plot of our predictions. Remember, the goal is to have the points on the plot lie roughly along the line <code>y = x</code>. Lying below the line means that our predictions are too high, and above the line means our predictions are too low.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-6_20a805dbf7b4dfcacd10ad444a4c3c16">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cal_plot_breaks</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> truth_int, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> estimate)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Awesome! Even with the class imbalance, our model‚Äôs probability predictions are well-calibrated. In other words, when we predict that there‚Äôs a 25% chance that a tumor is malignant, it‚Äôs actually malignant about 25% of the time.</p>
</section>
<section id="balancing-the-training-data" class="level2">
<h2 class="anchored" data-anchor-id="balancing-the-training-data">Balancing the Training Data</h2>
<p>So then, what happens if we balance the training data as we‚Äôre so often told to do? First, let‚Äôs balance by undersampling from the majority class.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-7_2380b25282112c841a0375cfc3ca3e14">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">minority_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(n))</span>
<span id="cb6-4"></span>
<span id="cb6-5">balanced <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_split</span>(class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keep =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb6-8">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> {</span>
<span id="cb6-9">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (.x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> minority_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class) {</span>
<span id="cb6-10">        .x</span>
<span id="cb6-11">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb6-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(</span>
<span id="cb6-13">          .x,</span>
<span id="cb6-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> minority_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n,</span>
<span id="cb6-15">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb6-16">        )</span>
<span id="cb6-17">      }</span>
<span id="cb6-18">    }</span>
<span id="cb6-19">  )</span>
<span id="cb6-20"></span>
<span id="cb6-21">balanced <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">class</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">n</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">benign</td>
<td style="text-align: right;">241</td>
</tr>
<tr class="even">
<td style="text-align: left;">malignant</td>
<td style="text-align: right;">241</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now we have the same number of observations for each class. Let‚Äôs go ahead and fit another logistic regression model, but this time on the balanced data.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-8_735757caafdc44ca11c2c7594b73d407">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">balanced_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_model</span>(balanced, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logistic_reg</span>())</span>
<span id="cb7-2"></span>
<span id="cb7-3">preds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balanced_preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict_prob</span>(</span>
<span id="cb7-4">  balanced_model,</span>
<span id="cb7-5">  data</span>
<span id="cb7-6">)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cal_plot_breaks</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> truth_int, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> balanced_preds)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>All of a sudden, our model is very poorly calibrated. We‚Äôre consistently overpredicting the probability of a tumor being malignant. Why is that? Think back to what we just did: We removed a bunch of examples of benign tumors from our training data.</p>
<p>Let‚Äôs think about that from first principles for a minute. If you had no information at all, a reasonable guess for whether or not a tumor is malignant would be the overall proportion of tumors that are malignant. In the unbalanced data, that number was about 34%. But after balancing, it‚Äôs now 50%. That means that we‚Äôve just biased our ‚Äúno-information‚Äù prediction upwards by about 16 percentage points (or 50%). And so it shouldn‚Äôt be surprising that in our calibration plot above, we see that we‚Äôre consistently over-predicting. Our probabilities are too high because the baseline rate at which the true class appears in our training data has just increased significantly.</p>
<blockquote class="blockquote">
<p>An important note which I‚Äôll circle back to later is that this intuition about a baseline guess is directly rated to the intercept term of the logistic regression model you fit.</p>
</blockquote>
</section>
<section id="smote" class="level2">
<h2 class="anchored" data-anchor-id="smote">SMOTE</h2>
<p>‚ÄúBut no!‚Äù you might be thinking. ‚ÄúWhy would you just undersample directly? You‚Äôre supposed to use an algorithm like SMOTE to overcome your class imbalance problem.‚Äù</p>
<p>Great! Let‚Äôs see if using SMOTE fixes our calibration issues. I‚Äôll first use SMOTE to intelligently oversample the minority class.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-9_b45531424bf2bcd7f30a57e581010e5a">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(themis)</span>
<span id="cb8-2"></span>
<span id="cb8-3">smote <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cl_thickness, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_smote</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bake</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_data =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb8-7"></span>
<span id="cb8-8">smote <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">class</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">n</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">benign</td>
<td style="text-align: right;">458</td>
</tr>
<tr class="even">
<td style="text-align: left;">malignant</td>
<td style="text-align: right;">458</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now that we have balanced classes thanks to SMOTE, let‚Äôs fit another logistic regresion model and see if it‚Äôs any better-calibrated.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-10_6b34fe011f168962a48acd30cbdb7259">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">smote_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_model</span>(smote, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logistic_reg</span>())</span>
<span id="cb9-2"></span>
<span id="cb9-3">preds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>smote_preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict_prob</span>(</span>
<span id="cb9-4">  smote_model,</span>
<span id="cb9-5">  data</span>
<span id="cb9-6">)</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cal_plot_breaks</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> truth_int, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> smote_preds)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Interesting ‚Äì same problem. With SMOTE, we still make very similar errors to the ones we made in the case where we naively undersampled from our majority class. But let‚Äôs think back to first principles again, because the exact same rationale applies. When we undersampled, we ended up artificially increasing the baseline rate of malignant tumors in our training data, which resulted in predictions that were too high. With SMOTE, we‚Äôre doing the exact same thing: We‚Äôve stil rebalanced our data to 50/50, we‚Äôve just done it a fancier way. So of course we‚Äôll have the same problem with overprediction.</p>
</section>
<section id="a-random-forest" class="level2">
<h2 class="anchored" data-anchor-id="a-random-forest">A Random Forest</h2>
<p>‚ÄúBut no!‚Äù you might be thinking. ‚ÄúYou need to use a more complicated model like a random forest, because logistic regression won‚Äôt pick up on complexities in your data well enough to be well-calibrated.‚Äù</p>
<p>Great! Let‚Äôs try a random forest:</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-11_1a783e29f38834cc1c230212e4000d0a">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">rf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_model</span>(smote, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand_forest</span>())</span>
<span id="cb10-2"></span>
<span id="cb10-3">preds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rf_preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict_prob</span>(</span>
<span id="cb10-4">  rf,</span>
<span id="cb10-5">  data</span>
<span id="cb10-6">)</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cal_plot_breaks</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> truth_int, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> rf_preds)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Same issue again, albeit not quite as severe. And the same logic holds. In fact, it‚Äôs even more straightforward with tree-based models. In a decision tree, you would determine a predicted probability by seeing what proportion of the labels in the leaf node that you end up in based on the features belong to the positive class. But then there‚Äôs the same logic as before: We‚Äôve just artifically increased the number of instances of the positive class dramatically, so of course the proportion of labels belonging to the positive class in our leaf nodes will increase.</p>
</section>
<section id="coefficients" class="level2">
<h2 class="anchored" data-anchor-id="coefficients">Coefficients</h2>
<p>Looking at the coefficients of our three models can help understand what‚Äôs going on here.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-12_5a969a88051dbbffacc249a1c1f0b7d3">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb11-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unbalanced_model, </span>
<span id="cb11-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Undersampled"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> balanced_model, </span>
<span id="cb11-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smote"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> smote_model</span>
<span id="cb11-5">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(tidy) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">imap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(.x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Term"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> term, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y :=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"estimate"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>(inner_join, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Term"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">Term</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Original</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Undersampled</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Smote</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">(Intercept)</td>
<td style="text-align: right;">-5.1601677</td>
<td style="text-align: right;">-4.0441444</td>
<td style="text-align: right;">-4.4363999</td>
</tr>
<tr class="even">
<td style="text-align: left;">cl_thickness</td>
<td style="text-align: right;">0.9354593</td>
<td style="text-align: right;">0.8190776</td>
<td style="text-align: right;">0.9159715</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>In all three models, the coefficient associated with the clump thickness is very similar. This should make sense intuitively: Our sampling was at random, so the relationship between the clump thickness and whether or not the tumor was malignant shouldn‚Äôt change at all.</p>
<p>The thing that does change, though, is the intercept term. In both the model where we undersampled from the majority class and in the SMOTE model, the intercept term is significantly higher than it is in the original model on the unbalanced data. This should feel similar intuitively to the idea of the baseline guess from before. As its core, the intercept term in your logistic regression model is the guess you‚Äôd make with ‚Äúno‚Äù information (in this particular case, no information means a clump thickness of 0).</p>
<p>We can illustrate this more clearly with three intercept-only models:</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-13_78f63c1f411976c37ab83d6c098efd89">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">unbalanced_intercept_only <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span>
<span id="cb12-2">undersampled_intecept_only <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> balanced, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span>
<span id="cb12-3">smote_intercept_only <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> smote, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span></code></pre></div>
</div>
<p>Now, let‚Äôs compare the intercept coefficients of these three models on a probability (read: not a log-odds) scale.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-14_59bf20284da8fe1d1340e69222ef67fe">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">convert_log_odds_to_probability <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb13-2">  odds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(x)</span>
<span id="cb13-3">  odds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> odds)</span>
<span id="cb13-4">}</span>
<span id="cb13-5"></span>
<span id="cb13-6">unbalanced_intercept <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(unbalanced_intercept_only)</span>
<span id="cb13-7">undersampled_intercept <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(undersampled_intecept_only)</span>
<span id="cb13-8">smote_intercept <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(smote_intercept_only)</span>
<span id="cb13-9"></span>
<span id="cb13-10">intercepts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb13-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">original =</span>     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_log_odds_to_probability</span>(unbalanced_intercept),</span>
<span id="cb13-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">undersampled =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_log_odds_to_probability</span>(undersampled_intercept),</span>
<span id="cb13-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">smote =</span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_log_odds_to_probability</span>(smote_intercept)</span>
<span id="cb13-14">)</span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>(intercepts)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">original</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">undersampled</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">smote</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">0.3447783</td>
<td style="text-align: right;">0.5</td>
<td style="text-align: right;">0.5</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>And it‚Äôs just as we expected: The intercept coefficient in the SMOTE model and the undersampling model are exactly 1/2, which corresponds to the fact that we balanced the classes to be exactly 50/50. And the intercept in the original model with the unbalanced classes is exactly the percentage of the data made up by the true class (malignant).</p>
</section>
<section id="when-to-rebalance" class="level2">
<h2 class="anchored" data-anchor-id="when-to-rebalance">When To Rebalance</h2>
<p>There are some times where re-balancing the classes in your training data might make sense. One application that comes to mind is if you have strong prior information that your training data is actually biased, and is over-representing one of the two classes.</p>
<p>For instance, let‚Äôs imagine we have data from 1000 breast cancer patients and we know a priori that about 20% of tumors are malignant, but in the training data, maybe 40% of the tumors we have are malignant. Depending on the long-term goal of the project, it might make sense to undersample from the malignant cases to get the overall rate of tumors being malignant down to around the 20% prior.</p>
<p>The rationale behind doing this would be that if you wanted your model to generalize well to future cases (outside of your training set) and you knew that in the broader population about 20% of cases are malignant, your biased training data could very well result in biased predictions out-of-sample even if your predictions look good in-sample.</p>
<p>Another case where rebalancing can make sense is if you plan to use a technique like <a href="https://en.wikipedia.org/wiki/Platt_scaling">Platt Scaling</a> or <a href="https://en.wikipedia.org/wiki/Isotonic_regression#:~:text=In%20statistics%20and%20numerical%20analysis,to%20the%20observations%20as%20possible.">Isotonic Regression</a> to re-calibrate your predictions ex-post. These methods are a bit beyond the scope of this post, but they‚Äôre both fantastic ways to make sure a model is giving well-calibrated predictions while using classifiers that don‚Äôt guarantee calibration, such as tree-based models. For instance, a combination of upsampling with SMOTE, using an often poorly-calibrated classifier like a tree booster such as XGBoost, and then re-calibrating ex-post with a Platt Scaler can result in a rare win-win scenario: Well-calibrated predictions, but also improved performance on normal classification metrics like the F1 score or AUC.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In the <a href="https://matthewrkaye.com/posts/2023-03-20-metrics-calibration/calibration.html">previous post</a>, I wrote about calibration. In short, I think calibration is the single most important metric in evaluating the performance of classification models.</p>
<p>And so with that in mind, the main takeaway of this post is that you should be <em>very</em> careful about trying to ‚Äúfix‚Äù the ‚Äúproblem‚Äù of class imbalances when you‚Äôre working on classification problems. If I could summarize the principle that I would follow in just a sentence, it would be that class imbalances often reflect important information about the prevalence of your classes in the real world, and it‚Äôs often risky to dismiss that information in the name of having data that‚Äôs split equally. In other words, class imbalances are usually not a problem at all. They‚Äôre a feature, not a bug.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes.html</guid>
  <pubDate>Sat, 01 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Calibration and Evaluating Classification Models</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2023-03-20-metrics-calibration/calibration.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>There‚Äôs something of a complexity trajectory in evaluating classification models that I‚Äôve observed over the past few years. It starts with accuracy. But soon after learning about accuracy, data scientists are taught that accuracy is problematic for two reasons:</p>
<ol type="1">
<li>It doesn‚Äôt work well with unbalanced classes. This is the ‚Äúif 95% of people don‚Äôt have cancer and you always predict ‚Äòno cancer‚Äô, your model isn‚Äôt actually good‚Äù argument.</li>
<li>It doesn‚Äôt make any distinction between types of errors. In particular, it weighs false positives and false negatives equally, which may not be appropriate for the problem being solved.</li>
</ol>
<p>These are both perfectly valid drawbacks of using accuracy as a metric. So then we move on. Next stop: precision and recall.</p>
</section>
<section id="precision-and-recall" class="level2">
<h2 class="anchored" data-anchor-id="precision-and-recall">Precision and Recall</h2>
<p>Precision and recall are the two <em>next</em> most common classification metrics I‚Äôve seen. <em>Precision</em> is the percentage of the time that your model is correct when it labels something as <em>true</em>. Recall is the percentage of the actual <em>true</em> examples that your model labels as true. These metrics are important for different reasons.</p>
<p>A very precise model doesn‚Äôt make very many Type I errors. For instance, if you‚Äôre predicting whether or not someone has cancer, a very precise model is ‚Äútrustworthy‚Äù in the sense that if it tells you that they do have cancer, they most likely do. You might think about precision as a metric in hiring: You probably want your hiring process to be very good at evaluating good candidates. A high-precision hiring process would mean that when you think you‚Äôve found a person who would be a great fit on your team, you‚Äôre very likely correct.</p>
<p>Recall is a bit different: It‚Äôs the percentage of the true labels that your model finds. A high-recall model suffers few false <em>negatives</em>: When something actually belongs to the true class, your model very often predicts it as such. You might think about this in the context of our cancer example from before. A higher recall model would mean that your model catches more of the cancer cases.</p>
<p>Depending on your use case, you might optimize for one of these or the other. Or you could use a blend of the two, the most common of which is the <em>F1 score</em>, which is the harmonic mean of precision and recall. The idea of the F1 score is to optimize for a balance of both precision and recall, as opposed to optimizing for one at the cost of the other.</p>
</section>
<section id="predicting-probabilities" class="level2">
<h2 class="anchored" data-anchor-id="predicting-probabilities">Predicting Probabilities</h2>
<p>You might be reading this thinking about how this is all about predicting classes, but very often we care about predicting probabilities. For instance, at CollegeVine we make predictions about each student‚Äôs chances of getting into their favorite colleges and universities. It‚Äôs not useful for students if we predict an acceptance or a rejection. After all, they want to know their <em>chance</em>, and to make a class prediction would mean that we determine a cutoff point at which we decide that if someone‚Äôs chance is above that threshold, they‚Äôll get in. And if not, they won‚Äôt.</p>
<p>The problem is that there is no such threshold. More likely, college admissions is a bit of a game of chance: If five students each have a 20% chance of getting in to Carleton, for instance, I‚Äôd expect that about one of the five would get in on average. But it‚Äôd be disingenuous to make a class prediction, and I‚Äôm not sure how we‚Äôd even do that. For the five previously mentioned students, we‚Äôd expect one to get in. But if we were predicting classes we‚Äôd either predict all five to be accepted or all five to be rejected depending on where we set our threshold, and neither of those is the most likely scenario.</p>
<p>With all of that in mind, what metrics do we use instead? There are three metrics that we look at when we‚Äôre evaluating our models: The <a href="https://en.wikipedia.org/wiki/Brier_score">Brier Skill Score</a>, <a href="https://matthewrkaye.com/posts/2023-03-09-on-auc-roc/">AUC</a>, and calibration. I‚Äôve already written about AUC, and for the purposes of this post, I‚Äôm going to focus on the one I view as the most important: Calibration.</p>
</section>
<section id="calibration" class="level2">
<h2 class="anchored" data-anchor-id="calibration">Calibration</h2>
<p>The most important metric we track is calibration, which we‚Äôll often evaluate by looking at a calibration plot. Below is an example of such a plot from <a href="https://projects.fivethirtyeight.com/checking-our-work/us-senate-elections/">FiveThirtyEight</a></p>
<p><img src="https://www.matthewrkaye.com/posts/2023-03-20-metrics-calibration/fivethirtyeight-calibration.png" class="img-fluid"></p>
<p>The idea behind calibration is to answer the basic question ‚ÄúWhen my model said that someone had a 31% chance of winning an election, did they actually win about 31% of the time?‚Äù As you get more data, you can group your predictions into buckets to answer this question. For instance, if we‚Äôre predicting college chances we might take all the times that we said someone had between a 30 and 35% chance of getting accepted, and we‚Äôd calculate the actual proportion of the time that they were accepted. If it‚Äôs about 32.5% (close to the mean prediction in our bucket), we‚Äôd say that our model is making well-calibrated predictions in that bucket. If our model makes well-calibrated predictions of admissions chances across all buckets, it‚Äôs fair to say that it‚Äôs well-calibrated in general.</p>
<p>Calibration is important because it directly affects how we interpret our model‚Äôs predictions. If we‚Äôre making probability predictions and they‚Äôre <em>not</em> well-calibrated, then when we say something has a 25% chance of happening, or a 50% chance of happening, or a 90% chance of happening, those numbers aren‚Äôt actually meaningful. It might be the case that the 50% probablity event happens more than the 25% one and less that the 90% one, but that isn‚Äôt even a guarantee. It also is probably not the case with a badly-calibrated model that the 50% predicted probability event happens twice as often as the 25% one.</p>
<p>For instance, let‚Äôs imagine we‚Äôre working on a classic machine learning example (and real-world) problem: Email spam detection. Ultimately, we need to predict a class: Given an email, we need our model to tell us if it‚Äôs spam or not. But for a large proportion of classifiers, this requires setting a probability threshold. For instance, if our model says there‚Äôs a greater than 50% chance that some email is spam, we mark it as spam. If false positives (a real email being marked as spam) are more problematic than false negatives (a spam email being marked as not spam), then we might increase our probability threshold to 80%, for example, which would make it ‚Äúharder‚Äù for an email to be marked as spam. But with the higher threshold, the emails that we do mark as spam we‚Äôre more confident about. Often times, we‚Äôll use domain knowledge to determine this threshold. I‚Äôve had many conversations where we set arbitrary thresholds based on our experience or our gut instincts about how the system we‚Äôre working in should work. Often, those conversations end with something like ‚Äú80% feels about right‚Äù and we go with that.</p>
<p>Hopefully you‚Äôre starting to see the issue here: If our model‚Äôs predictions are poorly calibrated, then it‚Äôs not possible to make a decision like that. We can‚Äôt lean into our domain knowledge about any particular number being a threshold that makes sense, because the probabilities we‚Äôre predicting don‚Äôt actually <em>mean</em> anything in practice. In other words, the fact that we don‚Äôt know if when we say 80%, it‚Äôs actually 95% or 35% or some other number makes it impossible to make decisions based on our predictions. In short, if our predictions aren‚Äôt well-calibrated, it‚Äôs not possible to reason about them in any meaningful way. They can also very easily be misleading.</p>
<p>As I‚Äôve mentioned before, this is especially important is the probabilities themselves <em>are</em> the prediction. If you‚Äôre telling a student that their chances of getting into Carleton are 27%, it goes without saying that when you say they have a 27% chance, that if they were to apply four times they‚Äôd get in about once on average. If they get in about one in eight times instead, the miscalibrated prediction could have a meaningful, negative effect on their college outcomes. For instance, if you severely overpredict a student‚Äôs chances and they end up applying to fewer schools as a result, there‚Äôs an increased likelihood of them getting in <em>nowhere</em>, which would be a particularly bad outcome. In this case, better-calibrated predictions lead directly to better decision-making.</p>
<p>In statistics world, it might be helpful to think of poor calibration as a bias issue: You might think of better-calibrated predictions as being less biased, in the sense that the expected value of the outcome (the actual long-run frequency of a student being accepted) is closer to what your prediction was.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>Hopefully I‚Äôve convinced you that the calibration of your classifier‚Äôs predictions is important and practically meaningful. If a model‚Äôs predictions are poorly calibrated, it‚Äôs difficult (or impossible) to reason about them in a practical sense. Miscalibrated predictions can also be misleading, because we often naturally interpret probabilities as long-run frequencies. For instance ‚ÄúIf I flip this coin 100 times, it‚Äôll come up heads about half of the time.‚Äù You might think about working with poorly calibrated predictions being similar to flipping a biased coin when you‚Äôre unaware of its biases.</p>
<p>In the next post, I‚Äôll talk about class imbalances and why balancing your classes can be a particularly bad idea.</p>


</section>

 ]]></description>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/2023-03-20-metrics-calibration/calibration.html</guid>
  <pubDate>Mon, 20 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Interpreting AUC-ROC</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2023-03-09-on-auc-roc/index.html</link>
  <description><![CDATA[ 



<p><strong>AUC</strong> goes by many names: AUC, AUC-ROC, ROC-AUC, the area under the curve, and so on. It‚Äôs an extremely important metric for evaluating machine learning models and it‚Äôs an uber-popular data science interview question. It‚Äôs also, at least in my experience, the single most commonly misunderstood metric in data science.</p>
<p>I‚Äôve heard several common misunderstandings or flat-out falsehoods from people in all kinds of roles discussing AUC. The biggest offenses tend to come from overcomplicating the topic. It‚Äôs easy to see the <a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic">Wikipedia page for the ROC curve</a> and be confused, intimidated, or some combination of the two. ROC builds off of other fundamental data science concepts ‚Äì the true and false positives rates of a classifier ‚Äì so it‚Äôs certainly not a good place to <em>start</em> learning about metrics for evaluating the performance of models.</p>
<p>The most common cause for confusion about AUC seems to come from the plot of the <em>ROC</em> curve, and nothing particularly special about AUC itself. Generally, I‚Äôll hear AUC explained as being the area under the ROC curve, and that it‚Äôs all about testing how well your model balances false positives and false negatives. That‚Äôs all well and good, but it doesn‚Äôt give someone new to AUC any intuition about what AUC <em>actually</em> means in practice. For instance, let‚Äôs imagine we‚Äôre trying to predict the chance that a student is accepted at Carleton College ‚Äì a quite common problem at CollegeVine! How does saying ‚ÄúAUC tells me about how my model is balancing false negatives and false positives‚Äù tell me anything about how well my model is doing at predicting that student‚Äôs chances?</p>
<p>The main issue I have with this factual-yet-unhelpful explanation of AUC is just that: While it may be true, it doesn‚Äôt get to the point. And even worse, it‚Äôs sometimes used as a crutch: A fallback answer when someone feels stuck when asked how to interpret AUC in real, practical terms.</p>
<p>So in this post, I‚Äôll focus on just one thing, then: Answering the question above about how to interpret AUC.</p>
<section id="what-is-auc" class="level2">
<h2 class="anchored" data-anchor-id="what-is-auc">What is AUC?</h2>
<p>As I mentioned, it‚Äôs usually not helpful to try to explain AUC to someone by telling them that it‚Äôs just the area under the ROC curve, or that it‚Äôs a metric you can use for predicting <em>probabilities</em> as opposed to predicting <em>classes</em>, or that it‚Äôs a metric trying to balance false positives and false negatives. None of those things get to the crux of the problem.</p>
<p>So what <em>is</em> AUC, then? It‚Äôs pretty simple: Let‚Äôs imagine a model <img src="https://latex.codecogs.com/png.latex?M"> being evaluated on data <img src="https://latex.codecogs.com/png.latex?X"> where <img src="https://latex.codecogs.com/png.latex?X"> contains some instances of the true class and some instances of the false class. The AUC of <img src="https://latex.codecogs.com/png.latex?M"> on <img src="https://latex.codecogs.com/png.latex?X"> is the probability that given a random item from <img src="https://latex.codecogs.com/png.latex?X"> belonging to the <em>true</em> class (<img src="https://latex.codecogs.com/png.latex?T">) and another random item from <img src="https://latex.codecogs.com/png.latex?X"> belonging to the <em>false</em> class (<img src="https://latex.codecogs.com/png.latex?F">), that the model predicts that the probability of <img src="https://latex.codecogs.com/png.latex?T"> being true (belonging to the true class) is higher than the probability of <img src="https://latex.codecogs.com/png.latex?F"> being true (belonging to the true class).</p>
<p>Let‚Äôs go back to the example about Carleton admissions, and let‚Äôs imagine that we have a model that gives a probability of admission to Carleton given some information about a student. If I give the model one random <em>accepted</em> student and one random <em>rejected</em> student, the AUC of the model is the probability that the accepted student had a higher chance of acceptance (as estimated by the model) than the rejected student did.</p>
<p>For more on this, I‚Äôd refer everyone to <a href="https://developers.google.com/machine-learning/crash-course/classification/roc-and-auc">this fantastic blog post</a> by the team at Google, which does a great job at explaining further and/or better.</p>
</section>
<section id="a-simple-implementation" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-implementation">A Simple Implementation</h2>
<p>The easiest way to convey this idea might be to show a simple implementation of AUC. Below is some R code.</p>
<p>First, let‚Äôs start by writing a function to do exactly what‚Äôs described above. Again, here‚Äôs the algorithm given some evaluation data:</p>
<ol type="1">
<li>Choose a random item from the <code>true</code> class.</li>
<li>Choose a random item from the <code>false</code> class.</li>
<li>Make a prediction on each of the two items.</li>
<li>If the predicted probability for the actually true item is greater than the predicted probability for the actually false item, return true. Otherwise, return false. If they‚Äôre equal, flip a coin.</li>
<li>Repeat 1-4 many times, and calculate the proportion of the time your model guessed correctly. This is your AUC.</li>
</ol>
<p>Now, let‚Äôs write this in R with a little help from some vectorization.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Our AUC implementation</span></span>
<span id="cb1-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## In this implementation, we take a data frame containing a "truth" (i.e. whether</span></span>
<span id="cb1-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## the example is _actually_ in either the true class or the false class)</span></span>
<span id="cb1-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## and an "estimate" (our predicted probability).</span></span>
<span id="cb1-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This implementation is in line with how {{yardstick}} implements all of its metrics</span></span>
<span id="cb1-10">interpretable_auc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"truth"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"estimate"</span>) {</span>
<span id="cb1-11">  </span>
<span id="cb1-12">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## First, subset the data down to just trues and just falses, separately</span></span>
<span id="cb1-13">  trues <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(data, .data[[truth_col]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-14">  falses <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(data, .data[[truth_col]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-15">  </span>
<span id="cb1-16">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Sample the predicted probabilities for N `true` examples, with replacement</span></span>
<span id="cb1-17">  random_trues <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(trues[[estimate_col]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-18">  </span>
<span id="cb1-19">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Do the same for N `false` examples</span></span>
<span id="cb1-20">  random_falses <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(falses[[estimate_col]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## If the predicted probability for the actually true</span></span>
<span id="cb1-23">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  item is greater than that of the actually false item,</span></span>
<span id="cb1-24">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  return `true`. </span></span>
<span id="cb1-25">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## If the two are equal, flip a coin.</span></span>
<span id="cb1-26">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Otherwise, return false.</span></span>
<span id="cb1-27">  true_wins <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb1-28">    random_trues <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> random_falses,</span>
<span id="cb1-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(N) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span>,</span>
<span id="cb1-30">    random_trues <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> random_falses</span>
<span id="cb1-31">  )</span>
<span id="cb1-32">  </span>
<span id="cb1-33">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Compute the percentage of the time our model was "right"</span></span>
<span id="cb1-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(true_wins)</span>
<span id="cb1-35">}</span></code></pre></div>
</div>
<p>Next, we can test our simple implementation against <code>yardstick</code> on some real data. For the sake of demonstration, I just used the built-in <code>mtcars</code> data. Here‚Äôs how the data looks:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(knitr)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(kableExtra)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Doing a little data wrangling</span></span>
<span id="cb2-5">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(</span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(vs),</span>
<span id="cb2-8">    mpg,</span>
<span id="cb2-9">    cyl</span>
<span id="cb2-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb2-12"></span>
<span id="cb2-13">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Six rows of our training data'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full_width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<caption>Six rows of our training data</caption>
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">vs</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">mpg</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">cyl</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: right;">10.4</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="even">
<td style="text-align: left;">0</td>
<td style="text-align: right;">16.4</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: right;">19.2</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="even">
<td style="text-align: left;">0</td>
<td style="text-align: right;">18.7</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: right;">14.7</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="even">
<td style="text-align: left;">0</td>
<td style="text-align: right;">15.0</td>
<td style="text-align: right;">8</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now, let‚Äôs fit a few logistic regression models to the data to see how our AUC implementation compares to the <code>yardstick</code> one.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(yardstick)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Simplest model -- Just an intercept. AUC should be 50%</span></span>
<span id="cb3-5">model1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Adding another predictor</span></span>
<span id="cb3-8">model2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## And another</span></span>
<span id="cb3-11">model3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cyl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Make predictions for all three models</span></span>
<span id="cb3-14">preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vs,</span>
<span id="cb3-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>),</span>
<span id="cb3-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>),</span>
<span id="cb3-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>)</span>
<span id="cb3-19">)</span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## For each model, compute AUC with both methods: Yardstick (library) and "homemade"</span></span>
<span id="cb3-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb3-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m3"</span>),</span>
<span id="cb3-24">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> {</span>
<span id="cb3-25">    yardstick <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">roc_auc</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> truth, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>.x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">event_level =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"second"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.estimate</span>
<span id="cb3-26">    homemade <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interpretable_auc</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"truth"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate_col =</span> .x)</span>
<span id="cb3-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> .x,</span>
<span id="cb3-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yardstick =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(yardstick, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb3-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">homemade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(homemade, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-31">    )</span>
<span id="cb3-32">  }</span>
<span id="cb3-33">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yardstick vs. Our Implementation'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full_width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<caption>Yardstick vs. Our Implementation</caption>
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">model</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">yardstick</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">homemade</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">m1</td>
<td style="text-align: right;">0.50</td>
<td style="text-align: right;">0.50</td>
</tr>
<tr class="even">
<td style="text-align: left;">m2</td>
<td style="text-align: right;">0.91</td>
<td style="text-align: right;">0.91</td>
</tr>
<tr class="odd">
<td style="text-align: left;">m3</td>
<td style="text-align: right;">0.95</td>
<td style="text-align: right;">0.95</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>As we‚Äôve seen here, AUC actually shouldn‚Äôt be all that much of a cause for confusion! The way I like to frame it is this: The AUC of your model is how good your model is at making even-odds bets. If I give your model two options and ask it to pick which one it thinks is more likely, a ‚Äúbetter‚Äù model (by AUC standards) will be better at identifying the true class more often.</p>
<p>In real terms, that‚Äôs a meaningful, good thing. If we‚Äôre trying to predict the probability of a cancer patient having cancer, it‚Äôs important that our model can distinguish between people with cancer and people without it when given one person from each class. If it couldn‚Äôt - meaning the model was either randomly guessing or doing worse than random - the AUC would be 50% (or below 50%, in the worse-than-random disaster scenario).</p>
</section>
<section id="additional-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="additional-thoughts">Additional Thoughts</h2>
<p>I also often hear the misconception that AUC is sensitive to things like class imbalance. This means that if the true class makes up a disproportionately large (or small) proportion of the evaluation data, that can skew the AUC. But based on the intuition we just built before, that‚Äôs of course not true. The key thing to remember is that the model is given one true and one false example. In choosing those, it doesn‚Äôt matter if the true class only makes up 0.005% of all of the examples in the evaluation data: AUC is only evaluating the model on its ability to determine <em>which</em> of the two is the true class.</p>
<p>However, there is one thing related to class imbalance, and just sample size in general, that <em>would</em> affect AUC, which is the raw number of examples of each class in the evaluation data. If, for instance, you had only a single instance of the <code>true</code> class in the evaluation set, then the AUC of the model is entirely determined by how good the predictions of the model are on that single example. For instance, if we have a single <code>true</code> class and the model predicts a 100% probability of it being true, then, assuming the predictions for all of the other examples in the evaluation set are <em>not</em> 100%, the AUC of the model as evaluated on that data is 100%. This isn‚Äôt necessarily because the model is ‚Äúgood‚Äù in any sense, but just because the model is over-indexing to a single good prediction in the evaluation set. In practice though, this AUC estimate wouldn‚Äôt generalize. As we got more data, the predictions for all the true classes would certainly not all be 100%, so the AUC of the model would go down over time.</p>
<p>Fortunately, there‚Äôs an easy fix for this problem. AUCs are a point estimate, but we could also estimate a margin of error or a confidence interval for our AUC. For a situation where we only have a single instance of the true class in the evaluation set, the margin of error for our AUC would be very wide.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>Hopefully this post helped give a better intuition for what AUC actually is! A couple of major takeaways:</p>
<ol type="1">
<li>AUC doesn‚Äôt need to be this super complicated thing about trading off between false positives and negatives and trying many different classification thresholds and such. In my opinion, it‚Äôs much simpler to just think about it as the likelihood of a guess that your model makes between two choices being correct.</li>
<li>AUC isn‚Äôt affected by class imbalances.</li>
</ol>


</section>

 ]]></description>
  <category>data science</category>
  <category>R</category>
  <guid>https://www.matthewrkaye.com/posts/2023-03-09-on-auc-roc/index.html</guid>
  <pubDate>Thu, 09 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring the Tail Behavior of ESPN‚Äôs Win Probability Model</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2023-01-09-exploring-the-tail-behavior-of-espn-s-win-probability-model/index.html</link>
  <description><![CDATA[ 



<p>It‚Äôs College Football Playoff season, which means I‚Äôve been watching a lot of games lately. And I find myself complaining pretty often about how badly calibrated I think ESPN‚Äôs win probability model is. In particular, I‚Äôve noted a bunch of examples ‚Äì or at least enough for it to feel like a bunch ‚Äì of games where ESPN‚Äôs model gives a team a win probability that feels way <em>too</em> extreme in a situation where they‚Äôre clearly winning. I‚Äôm not talking about giving a team an 80% chance when they should have a 60% chance. The cases I‚Äôve been curious about are something more like teams getting a 99.7% chance of winning when, at least in my opinion, they should be getting something more like a 98% chance.</p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<blockquote class="blockquote">
<p>For classification problems like predicting win probabilities, model <em>calibration</em> is, at the highest level, the answer to the question ‚ÄúWhen my model says that Michigan has a 62% chance to win, do they actually end up winning about 62% of the time?‚Äù A well-calibrated model will have relatively low error over the long run. As we get more and more data, we‚Äôd expect that the amount of error in our calibration numbers would go down, and hopefully the predicted probabilities start to converge to the actual win probabilities as the games play out. For more on calibration, check out <a href="https://projects.fivethirtyeight.com/checking-our-work/">this cool FiveThirtyEight post</a>.</p>
</blockquote>
<p>You might be reading this thinking that the difference (both in absolute terms and ratio terms) between 60 and 80 percent is way bigger than the difference between, say, 98 and 99.7. And you‚Äôd be right. But I‚Äôd encourage you to think about it like this: The team that‚Äôs the <em>underdog</em> in the latter case has either a 2% chance (the first case) or a 0.3% chance (the second case). If you‚Äôre applying the same ratio of win probabilities back of the napkin math, that increase feels a lot bigger.</p>
<blockquote class="blockquote">
<p>For the statistically inclined folks in the back, the ‚Äúright‚Äù way to do this is just to use odds ratios, which would show that going from 98% to 99.7% is a massive magnitude odds (or log-odds) increase.</p>
</blockquote>
<p>So in a nutshell, what I‚Äôve been curious about is the <em>tail behavior</em> of the ESPN model ‚Äì I‚Äôm trying to answer the question of how ESPN‚Äôs model does at predicting events we know are unlikely. How often, for instance, does a team that ESPN gives a 0.5% mid-game chance of winning actually end up winning? My suspicion, based on my anecdotal evidence from watching games and complaining over the years, has been that the model is badly calibrated in the tails. I‚Äôve been on the record arguing that ESPN‚Äôs model gives win probabilities greater than 99% way too often, and can usually be heard saying things like ‚ÄúWell, they‚Äôre almost definitely going to win. But 99%? I‚Äôm not sure‚Ä¶‚Äù</p>
<p>So then, to the question. I looked into a couple of things: 1. How well-calibrated is their model in general? 2. When ESPN gives a team a very high chance of winning (&gt;98%), how often do they actually win? 3. Does the model perform better or worse for ranked teams?</p>
</section>
<section id="calibration" class="level2">
<h2 class="anchored" data-anchor-id="calibration"><strong>Calibration</strong></h2>
<p>First, how well-calibrated is the model in general? I usually like to look at calibration plots to evaluate models, similar to the ones in the FiveThirtyEight post above.</p>
<p>This first plot is the overall calibration of the model at kickoff time. What we‚Äôre looking for are the points to roughly lie along the dashed line, which is the line <code>y = x</code>.</p>
<p align="center">
<img src="https://www.matthewrkaye.com/posts/2023-01-09-exploring-the-tail-behavior-of-espn-s-win-probability-model/https:/raw.githubusercontent.com/mrkaye97/espn-cfb-win-prob/master/plots/calibration/kickoff/all.svg" class="img-fluid" style="width:85.0%">
</p>
<p>Two main things to notice in that plot:</p>
<ol type="1">
<li>The model, on aggregate, is quite well calibrated.</li>
<li>The model looks like it‚Äôs off by a bit in the lower tail, where it appears to be predicting win probabilities that are too low. That‚Äôs a sample size issue. For instance, there were 64 games where the model gave the home team a worse than 5% chance to win, and the home team ended up winning 6.25% in those games. But generating a confidence interval for that proportion gives us a range of 1.25%-12%, which is too wide to scold the model for that mistake</li>
</ol>
<p>We can also look at the same plot, broken down by the teams playing. For instance, the following plot is broken down by whether neither team is ranked, one team is, or both teams are:</p>
<p align="center">
<img src="https://www.matthewrkaye.com/posts/2023-01-09-exploring-the-tail-behavior-of-espn-s-win-probability-model/https:/raw.githubusercontent.com/mrkaye97/espn-cfb-win-prob/master/plots/calibration/kickoff/grouped-by-num-ranked.svg" class="img-fluid" style="width:85.0%">
</p>
<p>In this case, even with relatively wide error bars, we see that the model seems to perform worse for games where both teams are ranked. And it‚Äôs pretty clearly the best in games where neither team is ranked.</p>
</section>
<section id="edge-cases" class="level2">
<h2 class="anchored" data-anchor-id="edge-cases">Edge Cases</h2>
<p>Next, I was curious about how often teams given very high chances of winning ended up doing so. Anecdotally, I‚Äôve found myself complaining the most about games like the <a href="https://www.espn.com/college-football/game/_/gameId/401404047">Oregon - Oregon State game from 2022</a> where ESPN gives Oregon a 98.3% chance of winning when they‚Äôre up 18 with 6:53 left in the third. Of course, I‚Äôm leaning into confirmation bias. But it‚Äôs hard to not think to yourself that with more than 20 minutes of football to go, Oregon State only wins that game in a wild comeback less than two in one hundred times. I‚Äôm not sure what I‚Äôd view as a more ‚Äúcorrect‚Äù estimate of their win probability, but seventeen in a thousand seems low to me. Maybe even thirty in a thousand (3%) would be better.</p>
<p>One note is that the 3% probability I‚Äôd probably lobby for doesn‚Äôt <em>feel</em> that different from the 1.7% that ESPN gave, but that‚Äôs an odds ratio of 1.79, which is a big difference in practice. For instance, that‚Äôs a similar odds ratio to what you‚Äôd get if you went from a 35% chance to a 50% chance, which is significant. In FiveThirtyEight world, that‚Äôs the difference between being right in the middle of the ‚Äútoss-up‚Äù category vs.&nbsp;being solidly in the ‚Äúlean Oregon‚Äù category.</p>
<p>So anyways, back to Oregon - Oregon State. I was curious about games like that: Games where, with more than, say, five minutes to go and one team leading by at most three scores (24 points), how often ESPN was right when they gave the leading team a better than 98% chance of winning the game.</p>
<p>As it turns out, ESPN‚Äôs model is doing pretty well in the tails on the whole. See the table below:</p>
<center>
<table class="table">
<colgroup>
<col style="width: 12%">
<col style="width: 20%">
<col style="width: 29%">
<col style="width: 29%">
<col style="width: 8%">
</colgroup>
<thead>
<tr class="header">
<th>Ranked</th>
<th>Overall Win %</th>
<th>Win % CI Lower Bound</th>
<th>Win % CI Upper Bound</th>
<th>N</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Both</td>
<td>0.54%</td>
<td>0%</td>
<td>1.63%</td>
<td>184</td>
</tr>
<tr class="even">
<td>One</td>
<td>1%</td>
<td>0.4%</td>
<td>1.7%</td>
<td>1002</td>
</tr>
<tr class="odd">
<td>Neither</td>
<td>1.07%</td>
<td>0.7%</td>
<td>1.52%</td>
<td>2427</td>
</tr>
<tr class="even">
<td>All</td>
<td>1.02%</td>
<td>0.72%</td>
<td>1.36%</td>
<td>3613</td>
</tr>
</tbody>
</table>
</center>
<p><code>Ranked</code> corresponds to how many of the teams in the game were ranked (i.e.&nbsp;‚Äúboth‚Äù means ‚Äúboth teams were ranked‚Äù). ‚Äúall‚Äù is all of the data pooled together.</p>
<p>The main takeaway from the table above is that when ESPN gives a team a &lt;2% chance of winning a game, that tends to not be a severe underestimate as I was expecting. Across the crosstabs I checked, even the high end of a 95% confidence interval for the proportion of the time that the underdog would go on to win was below the 2% threshold.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>All told, I didn‚Äôt end up confirming my suspicions. At least from a cursory look through the data, ESPN‚Äôs model seems to be performing quite well in the tails. Or, at the very least, it‚Äôs not making predictions that are as ridiculous as I had thought they were. I still have my suspicions and will surely continue finding individual cases that don‚Äôt make sense to me intuitively, but after poking around a little I at least feel less concerned about the model making egregious predictions ‚Äì as far as I can tell, it‚Äôs doing a pretty good job on average.</p>
</section>
<section id="future-work" class="level2">
<h2 class="anchored" data-anchor-id="future-work">Future Work</h2>
<p>A couple of other things jump out at me as being worth exploring:</p>
<ol type="1">
<li>How well did the model do vs.&nbsp;my intuitions? In games where I was on the record as thinking the win probabilities given were far too high (or low), how do <em>I</em> perform?</li>
<li>How does ESPN‚Äôs model perform by other common ML metric standards? For instance, does its AUC outperform (e.g.) Vegas? (Almost certainly not). Or how negative is the model‚Äôs Brier Skill Score when using Vegas as a baseline?</li>
<li>Does the model perform better or worse for certain teams? Maybe some teams are being consistently overrated or underrated by the model.</li>
</ol>
</section>
<section id="appendix" class="level2">
<h2 class="anchored" data-anchor-id="appendix">Appendix</h2>
<p>You can find the code to reproduce this analysis <a href="https://github.com/mrkaye97/espn-cfb-win-prob">on my Github</a>.</p>


</section>

 ]]></description>
  <category>data science</category>
  <category>statistics</category>
  <category>sports analytics</category>
  <guid>https://www.matthewrkaye.com/posts/2023-01-09-exploring-the-tail-behavior-of-espn-s-win-probability-model/index.html</guid>
  <pubDate>Mon, 09 Jan 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Sequential Testing</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/a-b-testing/2022-04-17-sequential-testing/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>The last post proposed a solution to the multiple testing problem that often invalidates A/B test results test planning. The idea is to calculate the sample sizes you need for your test in advance, and then wait for your control and variant groups to hit those sample sizes in order to call the test. This approach is a significant methodological improvement from the ‚Äúcall it when it‚Äôs significant‚Äù heuristic: It prevents you from compounding the false positive rate of your test by checking on it all the time.</p>
<p>But there‚Äôs a different issue with planning the test in advance and running it until the end: It‚Äôs slow. I use ‚Äúslow‚Äù to mean ‚Äúslower than it needs to be,‚Äù in the sense that you will likely end up waiting too long to call a test for the variant when you could‚Äôve made the call earlier. This waiting around is expensive ‚Äì the difference between running a test for a day or two and a week or two matters <em>a lot</em> for the teams and businesses running the tests. Often, this big of a time difference can have massive effects on metrics, revenue, learnings, etc., so teams benefit from being able to call their tests faster without sacrificing any statistical rigor.</p>
<p>But how do we do that without checking in on the test all the time? Enter sequential testing.</p>
</section>
<section id="sequential-testing" class="level2">
<h2 class="anchored" data-anchor-id="sequential-testing">Sequential Testing</h2>
<p><a href="https://en.wikipedia.org/wiki/Sequential_analysis">Sequential testing</a> is a method for running experiments that allows us to evaluate the results of the test we‚Äôre running <em>along the way</em> instead of waiting to hit a pre-determined sample size. Intuitively, you might think about sequential testing like this: If early on in my test I see a massive lift in my metric, I should be able to use a lower p-value than the one I set at the start of my test to call it. It‚Äôs earlier, hence the lower p-value, but the intuitive idea is that the metric lift is so big that the p-value we‚Äôd see would be smaller than some yet undetermined p-value threshold, such that we could call the test.</p>
<p>In A/B testing world, this boils down to building checkpoints into our tests. For instance, imagine you have a test that you‚Äôre expecting to take six days to hit the final sample size that you need. If you build in three checkpoints, then you can check in on your test on day two, day four, and day six (the end of the test). On day two, if the p-value for your test is lower than the pre-determined day two p-value needed, you call the test. If it‚Äôs not, you move on to day four and repeat. Once you get to day six, if the test is still insignificant you call it for the control and end the test.</p>
<p>This gives us the best of both worlds: We have a setup where we can call the test on day two if the lift is big enough, but we can do so without inflating the false positive rate of our test. In practice, this means often being able to call tests in half, a third, a quarter, etc. of the time it‚Äôd otherwise take, which is hugely valuable for the team running the test.</p>
<blockquote class="blockquote">
<p>Statistical note: There are a number of ways to determine what p-value to use at each checkpoint when planning the test. We use the R package <code>rpact</code> for planning tests, and we plan our tests using the O‚ÄôBrien-Fleming method (with alpha spending). This results in p-value thresholds that increase over time and asymptote to a value slightly less than the initial alpha you specified, depending on the number of checkpoints you build into your test. Another popular method is Pocock‚Äôs approach.</p>
</blockquote>
</section>
<section id="in-practice" class="level2">
<h2 class="anchored" data-anchor-id="in-practice">In practice</h2>
<p>So how does this work in practice? We build an internal tool that lets you plan a test given a few inputs:</p>
<ul>
<li>The alpha level (we generally use 20%, since we‚Äôre not particularly afraid of false positives and want to be able to run tests quickly)</li>
<li>The <a href="https://en.wikipedia.org/wiki/Power_of_a_test">power</a> (we generally use 95%, since we don‚Äôt want to take on many false negatives)</li>
<li>The <a href="https://support.optimizely.com/hc/en-us/articles/4410288881293-Use-minimum-detectable-effect-MDE-when-designing-an-experiment">minimum detectable effect</a></li>
<li>The baseline conversion rate</li>
<li>The expected number of users entering the funnel per day</li>
<li>The number of checkpoints to build in</li>
<li>The split of the test (is it 50/50?)</li>
<li>The number of variants (is it a true A/B test? Are there multiple variants being tested?)</li>
</ul>
<p>With those inputs, we generate a test plan which you can save, tie to a JIRA card, and send to Slack. Then all you need to do is turn on your test and wait for it to hit the first checkpoint. Once it does, you evaluate the test to get a p-value, compare it to the p-value threshold that the test plan provided at the first checkpoint, and call the test if it‚Äôs significant. If it‚Äôs not, you keep running the test up to the next checkpoint and do the same thing, and so on.</p>
</section>
<section id="the-bottom-line" class="level2">
<h2 class="anchored" data-anchor-id="the-bottom-line">The Bottom Line</h2>
<p>The main takeaway from this post is that sequential testing lets us solve two huge problems in A/B testing simultaneously: It lets us run our tests fast, and it lets us do it without sacrificing any statistical rigor. Too often, I see teams committing atrocities against statistics in the name of moving fast when they don‚Äôt need to be ‚Äì using sequential designs for your A/B tests lets you control the false positive and false negative rates of your A/B tests while also allowing you to make calls on those tests as quickly as possible, which is hugely valuable.</p>
<p>And with that, we‚Äôve concluded a four-part series on A/B testing! Hopefully you found this interesting and useful, and have taken something away that will be beneficial for your own work. Or, if I‚Äôm lucky, maybe you‚Äôre even considering overhauling how you run A/B tests.</p>


</section>

 ]]></description>
  <category>data science</category>
  <category>statistics</category>
  <guid>https://www.matthewrkaye.com/posts/series/a-b-testing/2022-04-17-sequential-testing/index.html</guid>
  <pubDate>Sun, 17 Apr 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Calling A/B Tests</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/a-b-testing/2022-04-10-calling-a-b-tests/index.html</link>
  <description><![CDATA[ 



<p>In the last post, I gave a bird‚Äôs eye level overview of the mechanics of running an A/B test. But at the end, we reached a problem: We had two conversion rates ‚Äì 20% and 25% ‚Äì but we didn‚Äôt know if the difference between those was really big enough to make a strong claim that the blue underlines were actually performing better than the red ones in some real world sense. If you‚Äôre asking yourself whether the five percentage point difference between the two conversion rates is statistically significant, then your head‚Äôs in the right place.</p>
<p>In this post, we‚Äôll discuss how we can determine whether our test results are statistically significant. But since statistical significance is an often confusing and nebulous topic, we‚Äôll also explore what statistical significance even is (including what p-values are), when it‚Äôs important, and when it might not be.</p>
<section id="statistical-significance" class="level2">
<h2 class="anchored" data-anchor-id="statistical-significance">Statistical Significance</h2>
<p>Misunderstandings about statistical significance run rampant. It‚Äôs not a reach for me to say that the majority of the time I hear someone mention that something is ‚Äústatistically significant‚Äù I end up rolling my eyes. But before we get into common mistakes and misunderstandings, we need to first establish what statistical significance actually is.</p>
<p>Intuitively, if something is <strong>statistically significant</strong>, it‚Äôs unlikely to have happened due to random chance. Not that scary, after all! How unlikely, though, varies wildly depending on the setting. For instance, if we‚Äôre running clinical trials to determine if a new drug is capable of curing cancer, then we want it to be <em>very</em> unlikely that we make a consequential mistake and claim that the drug works when it actually doesn‚Äôt.</p>
<p>We use p-values as the indicator of the likelihood of our result being due to random chance. In this instance, we would run our test using the number of page views and the number of conversions for each group, and depending on how we ran our test we might get a p-value of 0.43% back. What this p-value actually means is that the probability of seeing the difference in conversion rates between groups that we do (five percentage points) due to purely random chance is 0.43%. A p-value threshold of 5% is very common, so in this case we‚Äôd call the test for the variant (since 0.43% is below 5%), and we‚Äôd assert that this difference in conversion rates is <em>statistically significant</em>.</p>
</section>
<section id="eye-rolling" class="level2">
<h2 class="anchored" data-anchor-id="eye-rolling">Eye Rolling</h2>
<p>Back to my eye rolling: I often roll my eyes when someone claims that something is statistically significant for two reasons.</p>
<p>First and foremost: Something being <em>statistically significant</em> does not mean that thing is <em>significant</em>. Often we get so hung up on things being statistically significant that we forget that lifting some metric by 0.0001% isn‚Äôt <em>practically</em> significant, since it won‚Äôt make any difference in the end. If 0.0001% more people read my blog posts, what do I care? That‚Äôs something like 1 extra person every hundred years (optimistically).</p>
<p>Secondly, I often roll my eyes because of the number of choices and assumptions that need to be made along the way, many of which tend to be difficult to defend. One choice, as previously mentioned, is the p-value threshold (alpha) that you choose. In some instances, we want to be <em>very</em> confident that we‚Äôre not leaning into results that are the result of random chance, and so we might use a lower threshold. In other cases, we might be okay with taking on more risk of a false positive result in order to run our tests faster and mitigate the risk of a false <em>negative</em> (saying something does not help when it actually does).</p>
<p>Another thing that will affect the results we see is the type of test we‚Äôre running: one-tailed or two-tailed. Often, online calculators like <a href="https://www.evanmiller.org/ab-testing/chi-squared.html">this one</a> will use two-tailed tests by default because they‚Äôre more conservative. But in my opinion, using a two-tailed test doesn‚Äôt actually make any sense. Here‚Äôs why: A two-tailed test checks if the conversion rates of the variant and the control are <em>not equal</em>, which means that we can get a statistically significant result if the variant is significantly <em>worse</em> than the control, in addition to if it‚Äôs significantly <em>better</em>. But in A/B testing, we‚Äôre only going to call a test for the variant when it‚Äôs significantly better, so why do we care about the case where it‚Äôs worse? We want to test the hypothesis that the variant is significantly better than the control, not that it‚Äôs not equal, and that‚Äôs what a one-tailed test does. If you use two-tailed tests, it‚Äôll be harder to get significant results without any real benefits.</p>
<blockquote class="blockquote">
<p>Yet another consideration is how the statistical test was actually conducted. For instance, if you use a Chi-square test with Yates‚Äôs continuity correction (the default in R, although a little controversial among statisticians), you‚Äôll end up with higher (more conservative) p-values than if you don‚Äôt correct, which is why the p-value I just reported is higher than the one you‚Äôd get from most online calculators that don‚Äôt use the correction.</p>
</blockquote>
<p>Finally, and most importantly, is that the mechanics of running the test actually affect the chance that you are reporting a false positive result. For example, if you were to run the test described in the past few posts and calculate the p-values every time a new user visited the page and call the test for the variant the first time it were significant, you‚Äôd have just blown up the chances of a false positive result.</p>
</section>
<section id="a-common-mistake" class="level2">
<h2 class="anchored" data-anchor-id="a-common-mistake">A Common Mistake</h2>
<p>The most common mistake I see that‚Äôs made by people running A/B tests is using the ‚Äúcall it when it‚Äôs significant‚Äù heuristic. As I mentioned before, checking in on your test often and calling it for the variant the first time you get a significant p-value is a huge problem because the false positive rate of your test compounds the more you check on it. The reason for this is a statistical concept called <a href="https://en.wikipedia.org/wiki/Multiple_comparisons_problem">multiple testing</a>, and there‚Äôs <a href="https://xkcd.com/882/">an XKCD comic</a> about it!</p>
<p>So we want to avoid checking the test all the time, but this raises another problem: If we can‚Äôt check our test all the time, how do we know when to call it? And this is where test planning comes in. There are a number of online test planners (which generally make shoddy assumptions, like that you‚Äôre running a two-tailed test when you should be running a one-tailed one instead) like <a href="https://www.evanmiller.org/ab-testing/sample-size.html">this one</a> that take a few parameters and tell you how long to run your test for. And these planners are great! The idea is that if you can plan your test in advance, given that you know your baseline conversion rate and can specify how big of a lift you‚Äôre shooting for, then all you have to do is wait until you hit the sample size number that the calculator gives you back. Once you hit it, you check in on your test, run your p-value calculation, and call the test.</p>
<p>So, problem solved, right? Well, not quite. Because while we‚Äôve solved the multiple testing problem where we blow up our false positive rate by checking the test all the time, now we have a new issue: We have to wait until we hit some (potentially big) sample size before we can call our test, and that‚Äôs problematic for teams that want to iterate quickly.</p>
<p>The next post in this series is the punch line. It‚Äôll discuss sequential testing, which is the methodology that makes up the guts of how we run A/B tests at CollegeVine. Sequential testing solves the problem of needing to wait until you hit a final sample size to call your test without making any sacrifices on the rigor front, which means you can call your tests quickly and reliably.</p>


</section>

 ]]></description>
  <category>data science</category>
  <category>statistics</category>
  <category>a/b testing</category>
  <guid>https://www.matthewrkaye.com/posts/series/a-b-testing/2022-04-10-calling-a-b-tests/index.html</guid>
  <pubDate>Sun, 10 Apr 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Running A/B Tests</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/a-b-testing/2022-04-10-running-a-b-tests/index.html</link>
  <description><![CDATA[ 



<p>This is the second post in a series on A/B testing. In <a href="https://matthewrkaye.com/posts/series/a-b-testing/2022-03-25-a-b-testing-a-primer/">the last post</a>, I gave a high-level overview of what A/B testing is and why we might do it. This post will go a few steps farther. I‚Äôll discuss <em>how</em> an A/B test is run, what we‚Äôre looking for along the way, and what happens when we call it one way or the other. This will set us up for the next post, which will discuss the mechanics of A/B testing.</p>
<section id="how-can-i-run-an-ab-test" class="level2">
<h2 class="anchored" data-anchor-id="how-can-i-run-an-ab-test">How Can I Run An A/B Test?</h2>
<p>In the last post, I laid out a hypothetical A/B test where I was considering changing the underline color for links on my blog from red to blue. As a refresher: Blue was the variant (the new proposed color) and red was the control (the current state of the world). We were testing to see if a blue underline would cause significantly more users to click the links to my blog posts. ‚ÄúBut,‚Äù you ask, ‚Äúhow does the test actually <em>happen</em>?‚Äù That‚Äôs a great question! But first, a disclaimer: I‚Äôm not an engineer, so I can only give a bird‚Äôs eye view of how we do it at CollegeVine. I‚Äôm sure there are many other solutions used by other companies.</p>
<p>At CV, we use a tool called <a href="https://launchdarkly.com/">LaunchDarkly</a> for running A/B tests. Essentially, LaunchDarkly lets us set up ‚Äúfeature flags‚Äù and show the version of the code that‚Äôs ‚Äúbehind‚Äù them to only certain users. For example, you might imagine you were rolling out a risky new change, and wanted to QA it first. One way we‚Äôve done this kind of thing at CV is to put the risky change behind a feature flag, and then roll it out to our own team. Then, our team can QA and if anything looks off we can either fix the issues or revert the changes before rolling out to external users.</p>
<p>A/B testing with LD works similarly. Instead of only showing a new version of the code to internal users, we use a feature flag that shows each version of the code to a certain proportion of users, at random. The idea is to use the feature flag in LD to randomly sample users of our site into either the control group or the variant group. Then we track metrics over time to see if the variant is outperforming the control group.</p>
</section>
<section id="my-experiment-is-running.-now-what" class="level2">
<h2 class="anchored" data-anchor-id="my-experiment-is-running.-now-what">My Experiment Is Running. Now What?</h2>
<p>Back to our hypothetical experiment on my blog. Now, half of users are seeing red-underlined links, and half are seeing blue underlines, at random. So now, we need a way to track the conversion rate of those links. In step a whole bunch of business intelligence (BI) tools, and other tools that brand themselves as being tools for all different flavors of analytics. At CV, we use a tool called <a href="https://heap.io/">Heap</a> for user analytics (including A/B testing).</p>
<p>Let‚Äôs imagine that my blog were wired up to Heap, and tracking page views on my landing page and clicks of the links on that page to individual posts behind the scenes. In Heap, we could visualize the conversion rate from the landing page to any post in a funnel or in a table, where the conversion rate between the two is the proportion of users who hit the landing page that end up clicking one of the links (‚Äúconverting‚Äù) to a post. We could also view these numbers in a table, where we‚Äôd have one cell that has the total number of sessions on the landing page and another cell with the number of sessions on the posts, and the conversion rate is the latter divided by the former (roughly).</p>
<p>Since we have our feature flag set up to track which users are being placed in each group, we can also group by that ‚Äúproperty‚Äù in Heap, which lets us separate our analysis into the control and the variant. This means that we can compare the conversion rates for the red underline and the blue underline, which is exactly what we‚Äôre trying to do! Generally, we‚Äôll set up a Heap dashboard with the funnel we‚Äôre interested in so we can track out metrics over time.</p>
</section>
<section id="interpreting-the-metrics" class="level2">
<h2 class="anchored" data-anchor-id="interpreting-the-metrics">Interpreting the Metrics</h2>
<p>Now that the funnel is set up, you‚Äôre watching results stream in. Let‚Äôs imagine that at some point in time, each group has 1000 users (i.e.&nbsp;1000 users have seen the variant and another 1000 have seen the control), and 250 users in the variant group converted while only 200 in the control group did. From there, we can calculate our conversion rates as 25% (variant) and 20% (control). And for the purposes of keeping this post simple, let‚Äôs assume that lift is big enough for us (by some definition of ‚Äúbig enough‚Äù, which we‚Äôll get to in a later post). In that case, we call our test for the variant. In practice, this means we route all traffic to the variant instead of splitting it 50/50, and then we can remove the feature flag from our code and boom! We now have some cool blue underlines for the links on the blog.</p>
<p>But back to the lift being big enough: In practice, is knowing that the variant is performing 25% better than the control enough to call the test for the variant? Making this call in a rigorous, informed way is what the rest of the posts in this series will discuss.</p>


</section>

 ]]></description>
  <category>data science</category>
  <category>statistics</category>
  <category>a/b testing</category>
  <guid>https://www.matthewrkaye.com/posts/series/a-b-testing/2022-04-10-running-a-b-tests/index.html</guid>
  <pubDate>Sat, 09 Apr 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A/B Testing: A Primer</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/a-b-testing/2022-03-25-a-b-testing-a-primer/index.html</link>
  <description><![CDATA[ 



<p>This is the first post in a series I‚Äôm planning on writing on A/B testing. In this post, I‚Äôll lay out a top-level overview of what A/B testing is and why companies do it. In future posts, I plan on diving into some common pitfalls, bad habits, and anti-patterns I‚Äôve seen, and the systems we‚Äôve put in place to mitigate them and allow our team to run statistically rigorous, fast A/B tests to make informed product decisions as quickly as possible.</p>
<p>At work, we generally try to keep documents like this written at a high level: The objective is for them to be understandable and useful for general audience. That will be the case here too, for the most part.</p>
<blockquote class="blockquote">
<p>In these posts, I‚Äôll use callout boxes like this (in addition to <code>Appendix</code> sections) to walk through technical details. If you‚Äôre not interested in the weeds, feel free to skip these sections entirely!</p>
</blockquote>
<section id="whats-an-ab-test" class="level2">
<h2 class="anchored" data-anchor-id="whats-an-ab-test">What‚Äôs an A/B Test?</h2>
<p>So, what is an A/B test, anyways? It‚Äôs probably easiest to explain with an example:</p>
<p>Let‚Äôs imagine that I had been tracking the click rate on my blog posts over time. It‚Äôs pretty terrible ‚Äì let‚Äôs say that the rate that someone clicks into any particular post from the main menu page is 5%. This means that of all of the views of my blog‚Äôs main page, only 5% of those page views actually result in a click on one of my posts. Pretty miserable, right?</p>
<p>But today I‚Äôm feeling optimistic. Right now, when a user hovers over a post title, it gets underlined in red. ‚ÄúBut wait!‚Äù I think. What would happen if I made the underline blue instead?</p>
<p>And now, I have an A/B test. In this test, the ‚ÄúA‚Äù group (or the ‚Äúcontrol‚Äù) is the current state of the world: The red underline. The ‚ÄúB‚Äù group (or the ‚Äúvariant‚Äù or ‚Äútreatment‚Äù group) is the proposed change: The blue underline.</p>
<p>The basic idea of an A/B test is to run these two versions of my blog side-by-side, measuring the click rate in each version, and seeing which version ends up performing better. If the blue underline version ‚Äì the variant ‚Äì ends up increasing the click rate to my blog posts, then the conclusion is that I‚Äôd be better off permanently changing the underline to blue.</p>
</section>
<section id="why-test" class="level2">
<h2 class="anchored" data-anchor-id="why-test">Why Test?</h2>
<p>In my trivial example above, the color of the underline doesn‚Äôt seem super consequential (and it‚Äôs not). But this isn‚Äôt always the case. For instance, Facebook changed their notification icon color from blue to red once upon a time, and the rest was history. Amazon might A/B test a new model for recommending products to users, or Netflix a new model for recommending shows. A company doing lots of email marketing might A/B test different types of ways of addressing their emails (e.g.&nbsp;‚ÄúDear Matt‚Äù vs.&nbsp;‚ÄúHey Matt‚Äù), and so, so much more. Changes like these can have enormous business implications, and, as such, A/B testing makes up the backbone of so much of the tech and products we interface with every day. Companies want to maximize their conversion rates, click rates, revenues, etc. and A/B testing is one tool in their tool box for optimizing all of the metrics they care about.</p>
<p>If there‚Äôs one takeaway here, it‚Äôs this: Someone wants to make their product ‚Äúbetter‚Äù in some sense, and to figure out whether or not a new idea of theirs is actually better than the current state of the world, they test it.</p>
<blockquote class="blockquote">
<p>In statistics world, generally A/B tests boil down to testing ‚Äúconversion rates‚Äù against each other, which usually means that the tests being run are Chi-square tests of independence of the proportions of success across the two groups. If the variant is significantly better than the control, we call the test for the variant and roll it out to 100% of users. You might also use a t-test to (e.g.) test if the variant results in significantly more sessions than the control does, or you might use a time series technique like Bayesian structural time series to do pre/post testing to compare user behavior before and after a treatment was applied. For the curious, Google has published an awesome R package called CausalImpact (and an associated talk and some papers, I believe) on this.</p>
</blockquote>
</section>
<section id="up-next" class="level2">
<h2 class="anchored" data-anchor-id="up-next">Up Next‚Ä¶</h2>
<p>As I mentioned before, the rest of this series of posts will focus, roughly, on the following topics: 1. Okay, so we know what an A/B test is, but how do we actually <em>run</em> one? 2. What are the most common anti-patterns, pitfalls, and bad habits that I‚Äôve seen, and why are they problematic? 3. What are we doing to correct those issues to allow our team to run fast, statistically rigorous A/B tests?</p>


</section>

 ]]></description>
  <category>data science</category>
  <category>statistics</category>
  <category>a/b testing</category>
  <guid>https://www.matthewrkaye.com/posts/series/a-b-testing/2022-03-25-a-b-testing-a-primer/index.html</guid>
  <pubDate>Fri, 25 Mar 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Deploying MLFlow on Heroku (with Heroku Postgres, S3, and nginx for basic auth)</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2021-12-26-deploying-mlflow-on-heroku-with-heroku-postgres-s3-and-nginx-for-basic-auth/index.html</link>
  <description><![CDATA[ 



<p>Disclaimer: I followed <a href="https://www.mikulskibartosz.name/how-to-deploy-mlflow-on-heroku/">this guide</a> to setting up MLFlow on Heroku initially. However, there were certain aspects of it that are either outdated or do not work, so this post remedies those issues.</p>
<section id="mlflow" class="level2">
<h2 class="anchored" data-anchor-id="mlflow">MLFlow</h2>
<p><a href="https://www.mlflow.org/">MLFlow</a> is an open source tool for the entire machine learning lifecycle. It lets you create and experiment with models, write notes and descriptions, track parameters, metrics, and artifacts, and deploy to production all through an easy-to-use API and an intuitive UI. You can make calls to a running MLFlow service through the <a href="https://www.mlflow.org/docs/latest/R-api.html">R API</a>, the <a href="https://www.mlflow.org/docs/latest/python_api/index.html">Python API</a>, the <a href="https://www.mlflow.org/docs/latest/java_api/index.html">Java API</a>, or via the command line (cURL) or your favorite language by interacting with the <a href="https://www.mlflow.org/docs/latest/rest-api.html">REST API</a>.</p>
</section>
<section id="overview" class="level2">
<h2 class="anchored" data-anchor-id="overview">Overview</h2>
<p>MLFlow is surprisingly easy to set up and deploy to Heroku. There are a few steps to follow to get everything running: 1. Dockerize an MLFlow instance 2. Set up an artifact store 3. Set up a database 4. Secure the instance with basic auth</p>
</section>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>This guide assumes you already have AWS (specifically S3) set up. It also assumes some knowledge of shell scripting, Docker, and Heroku.</p>
</section>
<section id="creating-a-heroku-app" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-heroku-app">Creating a Heroku App</h2>
<p>First, let‚Äôs create a Heroku app from the CLI. For the purposes of this example, I‚Äôm going to call the app <code>my-mlflow-example</code>. You‚Äôll need to choose your own app name.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">heroku</span> create my-mlflow-example</span></code></pre></div>
<p>Next, let‚Äôs attach a Heroku Postgres instance.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">heroku</span> addons:create heroku-postgresql:hobby-dev <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--app</span> my-mlflow-example</span></code></pre></div>
<p>Creating this hobby-dev Heroku Postgres instance will also automatically set the <code>DATABASE_URL</code> environment variable in your app‚Äôs configuration.</p>
<p>Next, we‚Äôll need some other environment variables to be set. You can set your config like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">heroku</span> config:set <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-2">  S3_URI=s3://YOUR-S3-URI <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-3">  AWS_SECRET_ACCESS_KEY=YOUR-SECRET <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-4">  AWS_ACCESS_KEY_ID=YOUR-KEY <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-5">  AWS_DEFAULT_REGION=YOUR-REGION <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-6">  MLFLOW_TRACKING_USERNAME=YOUR-USERNAME <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-7">  MLFLOW_TRACKING_PASSWORD=YOUR-PASSWORD <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--app</span> my-mlflow-example</span></code></pre></div>
<p>You can repeat fewer lines of code by creating a <code>.env</code> file that looks like this:</p>
<pre class="text"><code>S3_URI=s3://YOUR-S3-URI AWS_SECRET_ACCESS_KEY=YOUR-SECRET ...</code></pre>
<p>and then using <code>heroku config:set .env --app my-mlflow-example</code>.</p>
<p>Great! At this point, your Heroku app should be all set up. Now all we need to do is create the Docker image that will run MLFlow.</p>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>First thing‚Äôs first, let‚Äôs create a folder called <code>my-mlflow-example</code> where we‚Äôll store all the files we‚Äôll need. I‚Äôll do that with:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> my-mlflow-example <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> my-mlflow-example</span></code></pre></div>
<p>Next, let‚Äôs create a few files we‚Äôll need:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">touch</span> Dockerfile run.sh requirements.txt nginx.conf_template</span></code></pre></div>
<p>You‚Äôll also want to make your <code>run.sh</code> script executable.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x run.sh</span></code></pre></div>
<p>Great, now we‚Äôve to all the files we‚Äôll need to deploy our MLFlow instance!</p>
<section id="the-dockerfile" class="level3">
<h3 class="anchored" data-anchor-id="the-dockerfile">The <code>Dockerfile</code></h3>
<p>The <a href="https://www.docker.com/">Dockerfile</a> will contain all of the library installs and files you need to run your MLFlow instance. The Dockerfile you‚Äôll need to write for MLFlow should look something like this:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">FROM</span> continuumio/miniconda3</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Copy files into the image</span></span>
<span id="cb8-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">COPY</span> run.sh run.sh</span>
<span id="cb8-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">COPY</span> requirements.txt requirements.txt</span>
<span id="cb8-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">COPY</span> nginx.conf_template /etc/nginx/sites-available/default/nginx.conf_template</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Install Postgres</span></span>
<span id="cb8-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> update <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-10">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> upgrade <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-11">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> postgresql</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Install nginx and dependencies</span></span>
<span id="cb8-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> apt-get <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> update <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-15">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> make vim <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-16">  automake gcc g++ subversion <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-17">  musl-dev nginx gettext apache2-utils</span>
<span id="cb8-18"></span>
<span id="cb8-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Install pip and dependencies</span></span>
<span id="cb8-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">RUN</span> conda install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> anaconda pip <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-21">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--upgrade</span> pip <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-22">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> requirements.txt <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-23">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> update <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> base <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> defaults conda <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-24">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> env list <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-25">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> freeze list</span>
<span id="cb8-26"></span>
<span id="cb8-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Run your `run.sh` script on container boot</span></span>
<span id="cb8-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">CMD</span> ./run.sh</span></code></pre></div>
</section>
<section id="the-requirements.txt-file" class="level3">
<h3 class="anchored" data-anchor-id="the-requirements.txt-file">The <code>requirements.txt</code> File</h3>
<p>Next, copy the following lines into your <code>requirements.txt</code>:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb9-1">mlflow</span>
<span id="cb9-2">psycopg2-binary</span>
<span id="cb9-3">boto3</span></code></pre></div>
<p>This file will tell <code>pip</code> which libraries to install in your docker image in the <code>RUN pip install -r requirements.txt</code> line above.</p>
</section>
<section id="the-nginx-template" class="level3">
<h3 class="anchored" data-anchor-id="the-nginx-template">The <code>nginx</code> Template</h3>
<p>Next, we‚Äôll create a template for the <code>nginx.conf</code> file that we‚Äôll eventually use in the container for basic auth. One important issue here: This file is a <strong><em>template</em></strong> because Heroku randomly assigns a port on dyno start, which means we can‚Äôt hard code any ports for <code>nginx</code> (since we don‚Äôt know them ahead of time). Instead of hard-coding, we specify a couple of placeholders: <code>$HEROKU_PORT</code> and <code>$MLFLOW_PORT</code>. We‚Äôll replace these with the proper ports on container startup.</p>
<p>Your <code>nginx.conf_template</code> should look like this:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">events</span> {}</span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">http</span> {</span>
<span id="cb10-3">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">server</span> {</span>
<span id="cb10-4">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">listen</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HEROKU_PORT</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-5"></span>
<span id="cb10-6">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">access_log</span> /var/log/nginx/reverse-access.log<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-7">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">error_log</span> /var/log/nginx/reverse-error.log<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-8"></span>
<span id="cb10-9">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">location</span> / {</span>
<span id="cb10-10">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auth_basic</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Restricted Content"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-11">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">auth_basic_user_file</span> /etc/nginx/.htpasswd<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-12"></span>
<span id="cb10-13">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">proxy_pass</span>                          http://127.0.0.1:<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MLFLOW_PORT</span>/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-14">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">proxy_set_header</span> Host               <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$host</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-15">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">proxy_set_header</span> X-Real-IP          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$remote_addr</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-16">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">proxy_set_header</span> X-Forwarded-For    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$proxy_add_x_forwarded_for</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-17">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-18">    <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-19"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="run-script" class="level3">
<h3 class="anchored" data-anchor-id="run-script">Run Script</h3>
<p>Finally, let‚Äôs create a script, <code>run.sh</code>, which will run when the Heroku dyno starts.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">HEROKU_PORT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PORT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">export</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">MLFLOW_PORT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>5000</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">envsubst</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$HEROKU_PORT,$MLFLOW_PORT'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> /etc/nginx/sites-available/default/nginx.conf_template <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /etc/nginx/sites-available/default/nginx.conf</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">htpasswd</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-bc</span> /etc/nginx/.htpasswd <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MLFLOW_TRACKING_USERNAME</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MLFLOW_TRACKING_PASSWORD</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">killall</span> nginx</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mlflow</span> ui <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--port</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MLFLOW_PORT</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--host</span> 127.0.0.1 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--backend-store-uri</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$DATABASE_URL</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sed</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s/postgres/postgresql/"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--default-artifact-root</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$S3_URI</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;</span></span>
<span id="cb11-15"></span>
<span id="cb11-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nginx</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'daemon off;'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> /etc/nginx/sites-available/default/nginx.conf</span></code></pre></div>
<p>There are a few things happening here: 1. We set the <code>HEROKU_PORT</code> environment variable from the randomly assigned <code>PORT</code> that Heroku creates on dyno startup 2. We assign <code>MLFLOW_PORT</code> to <code>5000</code>. The chances that Heroku assigns <em>exactly</em> port <code>5000</code> are low. If you want, you can add a few more lines to first check if Heroku assigns <code>5000</code> as the port, and if it does, choose any other port instead (e.g.&nbsp;<code>1000</code>). 3. We substitute the port placeholder variables in our <code>nginx.conf_template</code> file with the actual environment variable values for the ports, so that <code>nginx</code> knows where to listen and direct traffic. 4. We create a new <code>.htpasswd</code> file from the <code>MLFLOW_TRACKING_USERNAME</code> and <code>MLFLOW_TRACKING_PASSWORD</code> environment variables that we set in the Heroku config. This file will be used by <code>nginx</code> to check inputted usernames and passwords against. 5. We start the MLFlow UI in the background, telling it to run on the <code>MLFLOW_PORT</code> variable we created, and pointing it to our Heroku Postgres instance for the backend store and our S3 bucket for artifact storage. <strong>Note: By default, Heroku Postgres provides a URL that begins with <code>postgres</code>. This is not compatible with <code>SQLAlchemy</code>, so we substitute <code>postgresql</code> (which is compatible) for <code>postgres</code>.</strong> 6. We start <code>nginx</code> for basic auth.</p>
</section>
</section>
<section id="deploying" class="level2">
<h2 class="anchored" data-anchor-id="deploying">Deploying</h2>
<p>Deployment is simple, and can be done with a few lines of <code>bash</code>:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">heroku</span> login</span>
<span id="cb12-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">heroku</span> container:login</span>
<span id="cb12-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">heroku</span> container:push web <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--app</span> my-mlflow-example</span>
<span id="cb12-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">heroku</span> container:release web <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--app</span> my-mlflow-example</span></code></pre></div>
<p>And that‚Äôs it! Running those four lines should build your Docker image, push it to Heroku, and release it as your app. Once it releases, Heroku will boot up a dyno and you should be able to go to <code>my-mlflow-example.herokuapp.com</code> and see the MLFlow UI.</p>
</section>
<section id="using-mlflow" class="level2">
<h2 class="anchored" data-anchor-id="using-mlflow">Using MLFlow</h2>
<p>Now that your instance is deployed, you should have no problem using MLFlow for your whole ML lifecycle. For example, in R you might want to create a new experiment. You could do something like this:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## install.packages("mlflow")</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mlflow)</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Set up some environment variables</span></span>
<span id="cb13-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This way, your R session will know where to</span></span>
<span id="cb13-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  look for your MLFlow instance and will have</span></span>
<span id="cb13-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  the proper credentials set up</span></span>
<span id="cb13-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(</span>
<span id="cb13-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MLFLOW_TRACKING_URI =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://my-mlflow-example.herokuapp.com"</span></span>
<span id="cb13-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MLFLOW_TRACKING_USERNAME =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YOUR-USERNAME"</span>,</span>
<span id="cb13-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">MLFLOW_TRACKING_PASSWORD =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YOUR-PASSWORD"</span></span>
<span id="cb13-13">)</span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mlflow_create_experiment</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-first-experiment"</span>)</span></code></pre></div>
<p>And with that, you should be able to harness all of the awesome power of MLFlow for all of your ML lifecycle needs!</p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://www.matthewrkaye.com/posts/2021-12-26-deploying-mlflow-on-heroku-with-heroku-postgres-s3-and-nginx-for-basic-auth/index.html</guid>
  <pubDate>Sun, 26 Dec 2021 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Notes on Hiring Data Analysts + Scientists</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2021-12-22-notes-on-hiring-data-analysts-scientists/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In the past four months, I‚Äôve been involved in hiring for two new roles at <a href="https://www.collegevine.com/">CollegeVine</a>: a second data scientist, and our first data analyst. I‚Äôve learned a lot along the way: Things that work, things that don‚Äôt, and things to ask in order to maximize the amount of signal we‚Äôre getting from our interviews. This post will sketch out our hiring process (the processes are very similar for our DS and DA roles, with slightly different questions), and I‚Äôll add some notes about things I‚Äôve learned along the way. It‚Äôs been a long time since I‚Äôve written anything! I‚Äôm excited, so here goes.</p>
</section>
<section id="our-process" class="level2">
<h2 class="anchored" data-anchor-id="our-process">Our Process</h2>
<p>Our hiring process only has a few steps. We try to keep things simple and quick:</p>
<ol type="1">
<li>A phone screen with the hiring manager (30-45 minutes)</li>
<li>A technical interview with two data scientists (60-90 minutes)</li>
<li>A technical interview with two software developers (60 minutes, data science only)</li>
<li>Two cultural / behavioral interviews</li>
</ol>
<p>Since my portion of the process is the <em>data science</em> part, I‚Äôll leave the phone screens, behavioral rounds, and system design round out of this post.</p>
</section>
<section id="the-data-science-analysis-interview" class="level2">
<h2 class="anchored" data-anchor-id="the-data-science-analysis-interview">The Data Science / Analysis Interview</h2>
<p>I‚Äôve done a whole bunch of data science interviews from both sides of the table. Some have been better than others. Often, while on the hot seat, I‚Äôve gotten a smorgasborg of questions that felt like they came from the first page of the first Google result for ‚ÄúData science interview questions.‚Äù A handful of examples:</p>
<ul>
<li>What‚Äôs the difference between supervised and unsupervised learning?</li>
<li>What‚Äôs the difference between linear regression and logistic regression?</li>
<li>What‚Äôs a p-value?</li>
<li>How do you know when something is an outlier?</li>
</ul>
<p>And many, many more. In my view, these questions are <em>fine</em>. They ask about a relevant concept to data science and put your skills to the test. But I have two issues with them. First, they‚Äôre neither challenging nor questions that are easy to build on in terms of difficulty. Second, they‚Äôre not going to be good questions to figure out someone‚Äôs ability level.</p>
<section id="creating-challenging-questions" class="level3">
<h3 class="anchored" data-anchor-id="creating-challenging-questions">Creating Challenging Questions</h3>
<p>When I say the questions above aren‚Äôt challenging, I mean that these are the kinds of questions that someone who‚Äôs taken a single stats or machine learning class would be able to answer. This is fine if you‚Äôre trying to figure out if someone has taken one of said classes, but that isn‚Äôt our goal. We‚Äôre trying to determine your ability to succeed as a data scientist or analyst. This means that we need to know more than just your academic background: We need to know how you reason about stats and ML, and how you think in general. How do you approach a statistics problem where you haven‚Äôt seen the solution before? Can you intuit an answer and defend it?</p>
<p>As a result, we‚Äôve designed our questions to be challenging enough that you wouldn‚Äôt have seen them in a class you took, and to build off of one another. For example, we often ask the following question:</p>
<blockquote class="blockquote">
<p>Imagine you‚Äôre looking at a distribution of the heights of men in Spain. How might you find which men are outliers?</p>
</blockquote>
<p>Sure, easy question. There are a handful of fine answers here, but we‚Äôre generally looking for something along the lines of using a <a href="https://en.wikipedia.org/wiki/Standard_score">Z-Score</a> or the <a href="https://en.wikipedia.org/wiki/Interquartile_range#:~:text=In%20descriptive%20statistics%2C%20the%20interquartile,25th%20percentiles%20of%20the%20data.">IQR</a>. Either of those shows that you‚Äôve seen some rule of thumb in a statistics class and realize that you can apply it to this problem.</p>
<p>But then, we ask a follow-up:</p>
<blockquote class="blockquote">
<p>Now, let‚Äôs imagine you‚Äôre looking at the distribution of <em>incomes</em> of men in Spain, instead of their heights. Does your approach change at all?</p>
</blockquote>
<p>This is a question that most candidates need to think about for a little bit. At first, it seems simple. But we give you a hint: We explicitly ask if your approach to the problem would change, which is a push to think about <em>how</em> it might change. Many candidates struggle with this question, seemingly for a few reasons:</p>
<ul>
<li>They understand the hint, but don‚Äôt immediately realize why the Z-Score or the IQR approach breaks down, so they feel stuck.</li>
<li>They understand why those approaches don‚Äôt work, but it doesn‚Äôt jump out at them what they should <em>do</em> about it.</li>
</ul>
<p>These types of responses aren‚Äôt surprising to us: In statistics classes, you normally work with normally distributed data where nice properties and rules of thumb hold up, but now we have a problem: Everyone knows that incomes are skewed, and so now what do we do? Some candidates stick to their guns and insist the IQR or Z-score would still be fine. Here‚Äôs how I‚Äôd answer the question:</p>
<ul>
<li>First, I‚Äôd make a point that incomes are <a href="https://en.wikipedia.org/wiki/Skewness">right-skewed</a>. Everyone probably has this image in their head already, but it‚Äôs important.</li>
<li>Next, I‚Äôd note that the IQR / Z-score approach would break down, since the rules of thumb we use about 95% of the data (e.g.) lying within 2 standard deviations of the mean only works on a normal distribution, which incomes do not follow. This means we can‚Äôt just arbitrarly say ‚ÄúOh, this person is more than 2 standard deviations from the mean, so he‚Äôs an outlier!‚Äù anymore.</li>
<li>Finally, I‚Äôd think about other approaches. One might be something fancy like an <a href="https://en.wikipedia.org/wiki/Isolation_forest">isolation forest</a>, but I think there‚Äôs a simpler approach that‚Äôd work: Since incomes are severely right skewed, we could try taking the log of the incomes to see if the logged income looks roughly normally distributed. If it does, we can fall back on our IQR or Z-score approach.</li>
</ul>
<p>The point here is to ask the candidate a question that makes them think intuitively about having to solve a real-world problem (in this case, one we face all the time) that they probably haven‚Äôt seen before, which gives us a lot of signal about their statistical foundations and intuitions.</p>
<p>We follow up this follow-up with another:</p>
<blockquote class="blockquote">
<p>Now, let‚Äôs imagine we‚Äôre looking for outliers in the heights of men again, but this time they‚Äôre from Sweden <em>and</em> Spain. Does your approach change?</p>
</blockquote>
<p>Similar question here, with no real clear, immediate answer that jumps out at most candidates. A reasonable response would be to just separate the distributions into Swedish and Spanish (since we know that Swedes are taller than Spaniards, on average), and then fall back on the Z-score or IQR approach again. Again, not a particularly challenging, in the weeds, or niche technical question by any stretch, but definitely one that lets us really get a sense for your intuitive ability.</p>
<blockquote class="blockquote">
<p><strong>TL;DR: We build questions that aren‚Äôt tricky (in the trick question sense), but should‚Äôt have an immediately obvious canned answer. These types of questions should give us a window into how you reason intuitvely about statistics and machine learning concepts at all levels of complexity.</strong></p>
</blockquote>
</section>
<section id="layering-questions" class="level3">
<h3 class="anchored" data-anchor-id="layering-questions">Layering Questions</h3>
<p>This point is a nice segue into the second issue I noted above: It‚Äôs important to build questions that have multiple layers of difficulty to them, so that if someone immediately answers your question, you don‚Äôt completely shift gears and move to a different topic. Instead, we want to keep digging, so that we can figure out just how much you know. The question I laid out above is a good example of a simple, relatively straightforward question with multiple layers.</p>
<p>Here‚Äôs another example:</p>
<blockquote class="blockquote">
<p>Imagine you‚Äôre asking people their symptoms and trying to figure out if they have COVID or not. Sometimes you‚Äôll say someone has COVID when they don‚Äôt, and sometimes you‚Äôll say they don‚Äôt when they do. What are these two types of mistakes called? And which one do you think is worse? Why?</p>
</blockquote>
<p>This is a question about <a href="https://en.wikipedia.org/wiki/Type_I_and_type_II_errors">Type I and Type II</a> error (also known as false positives and false negatives, respectively). Most candidates realize this right away, and then make an argument for why they think a Type II error (the false negative) is a worse mistake. Generally, the argument centers on someone who <em>is</em> infected unknowingly spreading COVID. That‚Äôs a great answer. It shows that they can reason about different types of mistakes and can make an argument for why we might want to minimize one or the other. But this isn‚Äôt a particularly challenging question.</p>
<p>We ask a follow-up:</p>
<blockquote class="blockquote">
<p>Now, let‚Äôs imagine you get some COVID test results back from the people whose symptoms you were asking about. What‚Äôs wrong with this statement: ‚ÄòIf COVID tests have a 10% false negative rate and you got a COVID test and it‚Äôs negative, that means there‚Äôs a 10% chance it‚Äôs wrong and you‚Äôre actually positive.‚Äô?</p>
</blockquote>
<p>This question is a little more challenging, and it builds of the types of error we discussed in the previous question. Here, you need to realize what a <a href="https://en.wikipedia.org/wiki/False_positives_and_false_negatives">false negative</a> is, and it‚Äôs easy to get the <a href="https://en.wikipedia.org/wiki/Conditional_probability">conditioning</a> flipped. In this case, the false negative rate of the test being 10% means that the probability that you test negative <em>given that you have COVID</em> is 10%. This is <em>not</em> the same as saying that the probability that you have COVID <em>given that you test negative</em> is 10%. In the second case, the conditioning is flipped around backwards. Most candidates get hung up on this, and rightfully so. It‚Äôs a tricky question to work out without pen and paper.</p>
<p>For those that get through that question, we have another, more difficult follow-up:</p>
<blockquote class="blockquote">
<p>Okay, so you got a negative test result, but you know the false negative rate of COVID tests is 10%. Imagine you wanted to calculate the actual chance you were <em>positive</em> given that you just got your negative result. What other information would you need to do your calculation?</p>
</blockquote>
<p>For the Bayesians in the back, this question should be a slam dunk. It‚Äôs an obvious <a href="https://en.wikipedia.org/wiki/Bayes%27_theorem">Bayes‚Äô Rule</a> question: we‚Äôre asking you to calculate <code>p( COVID | negative test )</code>, so you can use Bayes‚Äô Rule to find the answer. It turns out the other information you‚Äôd need to do this calculation (in addition to the false negative rate) are a true negative rate and a <a href="https://en.wikipedia.org/wiki/Prior_probability">prior</a>, and you‚Äôre golden.</p>
<p>Lastly, once a candidate successfully identified Bayes‚Äô Rule and (hopefully) discussed priors, we‚Äôd ask them how they‚Äôd elicit this prior. There‚Äôs no ‚Äúright‚Äù answer here, but there are a couple options that are better than others:</p>
<ul>
<li>Ask an expert</li>
<li>Use something relatively uninformative</li>
<li>Take an ‚Äúempirical‚Äù approach and use something like the overall positive test rate</li>
</ul>
<p>Any of these answers would be totally reasonable, given that there‚Äôs a whole literature on prior elicitation.</p>
<p>And that‚Äôs one example of a multi-layer question we might ask in a data science interview. The vast majority of candidates won‚Äôt get through all the parts, and that‚Äôs totally fine! Errr, maybe ‚Äúfine‚Äù isn‚Äôt actually the right word: That‚Äôs <em>the goal</em>. The point is that we‚Äôre constructing a question that lets us learn <em>a lot</em> about you: We learn how much you know about Type I / II error and how you reason about them. We learn about if you understand conditional probability and Bayes‚Äô Rule. And we learn how you reason about prior elicitation. We also learn how you argue for decisions you make, and how you communicate complicated statistical concepts (Bayes‚Äô Rule and Type I / II error aren‚Äôt simple). And finally, we learn something about the <em>depth</em> of your knowledge. The first part of this question you‚Äôd probably know the answer to if you‚Äôd taken an introductory statistics or ML class. The second part you‚Äôd likely see in a probability course or an inferential statistics course. The third part would also probably come up in one of those two courses, and if not, then certainly in a Bayesian statistics course. And finally, the fourth part you‚Äôd likely only see in a very advanced inferential statistics course or a Bayesian course. So not only do we see how you reason about statistics, how much you know, and how you communicate difficult concepts, we also learn something about the types of problems you‚Äôve seen or worked on in the past, whether they be in classes or in a former job or internship. This is <em>a lot</em> of useful information.</p>
</section>
</section>
<section id="the-take-home" class="level2">
<h2 class="anchored" data-anchor-id="the-take-home">The Take Home</h2>
<p>The other piece to our interview process is a take home project. For data science, we have a take-home that you can find in our <a href="https://github.com/collegevine/ds-hiring">CollegeVine DS Hiring Github repo</a>. For data analysts, we ask them to bring in any project they‚Äôve done in the past: Anything from a homework assignment to another company‚Äôs take home.</p>
<p>We spend about 25-30 minutes going through the take home project, and we‚Äôre looking for a few main things. For the most part, candidates are good at describing what they‚Äôve done, so we‚Äôre generally trying to dig to figure out <em>why</em> they made the decisions they did. Can they defend them? How did they think through the pros and cons of each decision? What‚Äôs their thought process like? The idea here is that everyone in a data-related role will need to make decisions where there‚Äôs no clear ‚Äúright‚Äù answer, so we want to see why you chose to make a pie chart instead of a box plot, or chose to use <a href="https://en.wikipedia.org/wiki/XGBoost">XGBoost</a> instead of logistic regression. Can you talk me through the pros and cons of each option?</p>
<p>In the data science take home we give, there are also some tricks we‚Äôre trying to test the candidates out on. In an effort to not give away our whole bag of tricks, I invite everyone to give the exercise a shot! I‚Äôd even be happy to take a look through your projects to see what you come up with. The short of it is that there are some issues in the data that, if you don‚Äôt notice them and do something to fix them, will end up ruining the predictions your model produces. We don‚Äôt expect anyone to catch all of these issues in the short amount of time we ask them to spend on the problem, but we hope that they‚Äôll be thoughtful about how they‚Äôd solve them once we point them out in the interview.</p>
<p>Finally, there‚Äôs one elephant in the room here that‚Äôs important to address: Many people feel negatively about take homes. So do we ‚Äì they tend to be long and unnecessarily complicated, and often feel like a waste of the candidate‚Äôs time. In our view, though, the take home is necessary for one main reason: It lets you familiarize yourself with a data science problem beforehand, so that when you get to the interview we can hit the ground running. In a sense, we‚Äôre giving you the rules of the game in advance so we can start playing right away. This lets us avoid any confusion or annoying ambiguity with regards to the types of problems were asking about, and to entirely avoid requiring candidates to reason through questions about entirely hypothetical problems that they‚Äôve never seen before. For these reasons, and also because there‚Äôs historically been lots of signal that we‚Äôve gotten from how candidates respond to our questions about the project they bring in, we‚Äôve decided to stick with the take home. In addition, we don‚Äôt screen out any candidates on the basis of their take home. We don‚Äôt ask them to be submitted in advance, so every candidate who does a take home gets an interview.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>In a nutshell, that‚Äôs our whole data scientific technical interview! We discuss a take home you bring in, and then we talk through some miscellaneous statistics and machine learning questions like the ones we discussed above. In general, we‚Äôre not looking for any specific expertise or knowledge ‚Äì we‚Äôre a start up, after all. Instead, we‚Äôre testing candidates to see how they reason about problems that are similar to the ones they‚Äôll work on at CollegeVine, and how they explain the ins and outs of different possible solutions to those problems. We‚Äôre looking at their intuitions about statistics and machine learning, their ability to think on their feet when faced with questions they don‚Äôt immediately know the answer to, and their curiosity and creativity when it comes to solving challenging questions. At the end of the day, it‚Äôs these traits, not any hyper-specific technical knowledge, that‚Äôll make for a great CV data team member.</p>


</section>

 ]]></description>
  <category>data science</category>
  <category>hiring</category>
  <guid>https://www.matthewrkaye.com/posts/2021-12-22-notes-on-hiring-data-analysts-scientists/index.html</guid>
  <pubDate>Wed, 22 Dec 2021 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Working With Your Fitbit Data in R</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2021-06-08-working-with-your-fitbit-data-in-r/index.html</link>
  <description><![CDATA[ 



<section id="note-this-post-was-updated-as-of-3252023-for-fitbitr-v0.3.0" class="level3">
<h3 class="anchored" data-anchor-id="note-this-post-was-updated-as-of-3252023-for-fitbitr-v0.3.0">Note: This post was updated as of 3/25/2023 for <code>fitbitr v0.3.0</code></h3>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><code>fitbitr 0.1.0</code> is now available on CRAN! You can install it with</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fitbitr"</span>)</span></code></pre></div>
<p>or you can get the latest dev version with</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## install.packages("devtools")</span></span>
<span id="cb2-2">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrkaye97/fitbitr"</span>)</span></code></pre></div>
<p><code>fitbitr</code> makes it easy to pull your Fitbit data into R and use it for whatever interests you: personal projects, visualization, medical purposes, etc.</p>
<p>This post shows how you might use <code>fitbitr</code> to pull and visualize some of your data.</p>
</section>
<section id="sleep" class="level2">
<h2 class="anchored" data-anchor-id="sleep">Sleep</h2>
<p>First, you should either generate a new token with <code>generate_token()</code> or load a cached token with <code>load_cached_token()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(fitbitr)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Dates to use throughout post</span></span>
<span id="cb3-6">start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020-01-01"</span>)</span>
<span id="cb3-7">end <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021-10-18"</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_fitbitr_token</span>()</span></code></pre></div>
</div>
<p>And then you can start pulling your data!</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-4_2f14a0443cc6b122ece6398ada43397c">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">sleep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sleep_summary</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_date =</span> end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_date =</span> end</span>
<span id="cb4-4">)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(sleep)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">log_id</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">date</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">start_time</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">end_time</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">duration</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">efficiency</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">minutes_to_fall_asleep</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">minutes_asleep</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">minutes_awake</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">minutes_after_wakeup</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">time_in_bed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">34207402675</td>
<td style="text-align: left;">2021-10-18</td>
<td style="text-align: left;">2021-10-17 23:01:00</td>
<td style="text-align: left;">2021-10-18 06:30:00</td>
<td style="text-align: right;">26940000</td>
<td style="text-align: right;">91</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">391</td>
<td style="text-align: right;">58</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">449</td>
</tr>
<tr class="even">
<td style="text-align: right;">34193579435</td>
<td style="text-align: left;">2021-10-17</td>
<td style="text-align: left;">2021-10-16 23:03:30</td>
<td style="text-align: left;">2021-10-17 08:11:00</td>
<td style="text-align: right;">32820000</td>
<td style="text-align: right;">95</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">472</td>
<td style="text-align: right;">75</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">547</td>
</tr>
<tr class="odd">
<td style="text-align: right;">34183584553</td>
<td style="text-align: left;">2021-10-16</td>
<td style="text-align: left;">2021-10-15 22:46:30</td>
<td style="text-align: left;">2021-10-16 06:57:30</td>
<td style="text-align: right;">29460000</td>
<td style="text-align: right;">94</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">424</td>
<td style="text-align: right;">67</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">491</td>
</tr>
<tr class="even">
<td style="text-align: right;">34174304493</td>
<td style="text-align: left;">2021-10-15</td>
<td style="text-align: left;">2021-10-14 23:50:00</td>
<td style="text-align: left;">2021-10-15 08:20:30</td>
<td style="text-align: right;">30600000</td>
<td style="text-align: right;">94</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">438</td>
<td style="text-align: right;">72</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">510</td>
</tr>
<tr class="odd">
<td style="text-align: right;">34159751655</td>
<td style="text-align: left;">2021-10-14</td>
<td style="text-align: left;">2021-10-13 23:34:00</td>
<td style="text-align: left;">2021-10-14 09:18:00</td>
<td style="text-align: right;">35040000</td>
<td style="text-align: right;">98</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">524</td>
<td style="text-align: right;">60</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">584</td>
</tr>
<tr class="even">
<td style="text-align: right;">34146865838</td>
<td style="text-align: left;">2021-10-13</td>
<td style="text-align: left;">2021-10-12 23:50:00</td>
<td style="text-align: left;">2021-10-13 08:32:30</td>
<td style="text-align: right;">31320000</td>
<td style="text-align: right;">94</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">461</td>
<td style="text-align: right;">61</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">522</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Once you‚Äôve loaded some data, you can visualize it!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(zoo)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scales)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb5-4"></span>
<span id="cb5-5">sleep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sleep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-7">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(date),</span>
<span id="cb5-8">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(start_time),</span>
<span id="cb5-9">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(end_time),</span>
<span id="cb5-10">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time)), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create numeric times</span></span>
<span id="cb5-11">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sm =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span>(start_time),</span>
<span id="cb5-12">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">st =</span> sh <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb5-13">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(end_time),</span>
<span id="cb5-14">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">em =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span>(end_time),</span>
<span id="cb5-15">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">et =</span> eh <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> em<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb5-16">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mst =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rollmean</span>(st, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create moving averages</span></span>
<span id="cb5-17">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">met =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rollmean</span>(et, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb5-18">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">year</span>(start_time)</span>
<span id="cb5-19">)</span>
<span id="cb5-20"></span>
<span id="cb5-21">sleep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> et), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coral'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> st), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dodgerblue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> met), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coral'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mst), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dodgerblue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(</span>
<span id="cb5-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb5-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trans_format</span>(</span>
<span id="cb5-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, x), </span>
<span id="cb5-31">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">comma_format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">suffix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">accuracy =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-32">      )</span>
<span id="cb5-33">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_fivethirtyeight</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_breaks =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1 month'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_labels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%b'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> year, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">space =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'free'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'free_x'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">switch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.spacing.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.placement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outside"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.matthewrkaye.com/posts/2021-06-08-working-with-your-fitbit-data-in-r/static/rmarkdown-libsunnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This bit of code makes a nicely formatted plot of the times you went to sleep and woke up over the past three months. You can also use <code>fitbitr</code> to expand the time window with a little help from <code>purrr</code> (the Fitbit API rate limits you, so you can‚Äôt request data for infinitely long windows in a single request).</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-6_af35efd52163eeefe06857cbd3a33893">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Pull three months of data</span></span>
<span id="cb6-2">sleep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb6-3">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb6-4">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleep_summary</span>(</span>
<span id="cb6-5">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x), </span>
<span id="cb6-6">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-7">  )</span>
<span id="cb6-8">)</span></code></pre></div>
</div>
<p>After pulling the data, we can use the same code again to visualize it.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">sleep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sleep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb7-3">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(date),</span>
<span id="cb7-4">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(start_time),</span>
<span id="cb7-5">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(end_time),</span>
<span id="cb7-6">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time)), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create numeric times</span></span>
<span id="cb7-7">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sm =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span>(start_time),</span>
<span id="cb7-8">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">st =</span> sh <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb7-9">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(end_time),</span>
<span id="cb7-10">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">em =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span>(end_time),</span>
<span id="cb7-11">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">et =</span> eh <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> em<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb7-12">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mst =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rollmean</span>(st, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create moving averages</span></span>
<span id="cb7-13">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">met =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rollmean</span>(et, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb7-14">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">year</span>(start_time)</span>
<span id="cb7-15">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>()</span>
<span id="cb7-17"></span>
<span id="cb7-18">sleep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> et), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coral'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> st), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dodgerblue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> met), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coral'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mst), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dodgerblue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(</span>
<span id="cb7-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb7-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trans_format</span>(</span>
<span id="cb7-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, x), </span>
<span id="cb7-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">comma_format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">suffix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">accuracy =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-29">      )</span>
<span id="cb7-30">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_fivethirtyeight</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_breaks =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1 month'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_labels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%b'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> year, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">space =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'free'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'free_x'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">switch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.spacing.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.placement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outside"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.matthewrkaye.com/posts/2021-06-08-working-with-your-fitbit-data-in-r/static/rmarkdown-libsunnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="heart-rate-and-steps" class="level2">
<h2 class="anchored" data-anchor-id="heart-rate-and-steps">Heart Rate and Steps</h2>
<p>You can also pull your heart rate data with <code>fitbitr</code>. Maybe we‚Äôre curious about seeing how the number of minutes spent in the ‚Äúfat burn,‚Äù ‚Äúcardio,‚Äù and ‚Äúpeak‚Äù zones correlates with the number of steps taken that day. Let‚Äôs find out!</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-8_df41135438270860bd7e0fd1091a4efa">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">hr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb8-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb8-3">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_rate_zones</span>(</span>
<span id="cb8-4">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x), </span>
<span id="cb8-5">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-6">  )</span>
<span id="cb8-7">)</span>
<span id="cb8-8"></span>
<span id="cb8-9">steps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb8-10">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb8-11">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span>(</span>
<span id="cb8-12">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x), </span>
<span id="cb8-13">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-14">  )</span>
<span id="cb8-15">)</span></code></pre></div>
</div>
<p>First, we can examine the heart rate data:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(hr)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">date</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">zone</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">min_hr</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">max_hr</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">minutes_in_zone</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">calories_out</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2021-07-18</td>
<td style="text-align: left;">Out of Range</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">113</td>
<td style="text-align: right;">1440</td>
<td style="text-align: right;">2530.16460</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-18</td>
<td style="text-align: left;">Fat Burn</td>
<td style="text-align: right;">113</td>
<td style="text-align: right;">141</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00000</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2021-07-18</td>
<td style="text-align: left;">Cardio</td>
<td style="text-align: right;">141</td>
<td style="text-align: right;">176</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00000</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-18</td>
<td style="text-align: left;">Peak</td>
<td style="text-align: right;">176</td>
<td style="text-align: right;">220</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00000</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2021-07-19</td>
<td style="text-align: left;">Out of Range</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">113</td>
<td style="text-align: right;">1408</td>
<td style="text-align: right;">2689.45124</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-19</td>
<td style="text-align: left;">Fat Burn</td>
<td style="text-align: right;">113</td>
<td style="text-align: right;">141</td>
<td style="text-align: right;">9</td>
<td style="text-align: right;">86.59917</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>and the steps data:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(steps)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">date</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">steps</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2021-07-18</td>
<td style="text-align: right;">5620</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-19</td>
<td style="text-align: right;">7537</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2021-07-20</td>
<td style="text-align: right;">5513</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-21</td>
<td style="text-align: right;">9014</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2021-07-22</td>
<td style="text-align: right;">10883</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-23</td>
<td style="text-align: right;">2975</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now, let‚Äôs plot them against each other.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(zone <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Out of Range"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_minutes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(minutes_in_zone), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.groups =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(steps, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>)</span>
<span id="cb11-6">  </span>
<span id="cb11-7">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">steps =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(steps)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(total_minutes) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb11-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb11-12">      steps,</span>
<span id="cb11-13">      total_minutes</span>
<span id="cb11-14">    )</span>
<span id="cb11-15">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> F) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_log10</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.matthewrkaye.com/posts/2021-06-08-working-with-your-fitbit-data-in-r/static/rmarkdown-libsunnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Or maybe it‚Äôd be interesting to predict your zone minutes from your steps:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">predictions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">steps =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(steps)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(total_minutes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> steps, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> .) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">  broom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), round, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(predictions)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">term</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">estimate</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">std.error</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">statistic</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">p.value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">(Intercept)</td>
<td style="text-align: right;">23.09761</td>
<td style="text-align: right;">5.77502</td>
<td style="text-align: right;">3.99957</td>
<td style="text-align: right;">0.00011</td>
</tr>
<tr class="even">
<td style="text-align: left;">steps</td>
<td style="text-align: right;">0.00252</td>
<td style="text-align: right;">0.00056</td>
<td style="text-align: right;">4.52922</td>
<td style="text-align: right;">0.00001</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>And that‚Äôs it! Hopefully this helped show how <code>fitbitr</code> makes pulling your data easy, and gets you curious about the insights you can glean from your own data. The Fitbit API gives you access to so much interesting information about yourself, your habits, your fitness, and so much more, and <code>fitbitr</code> is just meant to be a door into that gold mine.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/2021-06-08-working-with-your-fitbit-data-in-r/index.html</guid>
  <pubDate>Tue, 08 Jun 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Highlights From rstudio::global</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2021-02-11-highlights-from-rstudio-global/index.html</link>
  <description><![CDATA[ 



<p><code>rstudio::global</code>, this year‚Äôs iteration of the annual RStudio conference, was a few weeks ago. Here were some highlights:</p>
<section id="talks" class="level2">
<h2 class="anchored" data-anchor-id="talks">Talks</h2>
<p>There were a few talks I really loved:</p>
<ul>
<li><a href="https://rstudio.com/resources/rstudioglobal-2021/using-r-to-up-your-experimentation-game/">Using R to Up Your Experimentation Game</a>, by Shirbi Ish-Shalom. On experimentation, sequential testing, taking big swings, and being statistically rigorous</li>
<li><a href="https://rstudio.com/resources/rstudioglobal-2021/maintaining-the-house-the-tidyverse-built/">Maintaining the House the Tidyverse Built</a>, by Hadley Wickham. On building and maintaining the Tidyverse, and what package maintenance in the real world is like when you have millions of downloads.</li>
<li><a href="https://rstudio.com/resources/rstudioglobal-2021/organization-how-to-make-internal-r-packages-part-of-your-team/">oRganization: How to Make Internal R Packages Part of Your Team</a>, by Emily Riederer. On how using internal packages (like <code>collegeviner</code> at CollegeVine!) can improve your R workflow and make teamwork in R dramatically easier, smoother, and more efficient.</li>
<li><a href="https://rstudio.com/resources/rstudioglobal-2021/fairness-and-data-science-failures-factors-and-futures/">Fairness and Data Science: Failures, Factors, and Futures</a>, by Grant Fleming. On model fairness, bias, and evaluation techniques, and why they‚Äôre important to get right.</li>
</ul>
</section>
<section id="cool-new-things" class="level2">
<h2 class="anchored" data-anchor-id="cool-new-things">Cool New Things</h2>
<ul>
<li><code>finetune</code>, Max Kuhn‚Äôs new <code>tune</code>-adjacent package, is live (albeit a little buggy)! It has some cool new model tuning algorithms, including racing methods with <code>tune_race_anova()</code> and <code>tune_race_win_loss()</code>, in addition to my personal favorite: <code>tune_sim_anneal()</code> for Simulated Annealing! <a href="https://rstudio.com/resources/rstudioglobal-2021/whats-new-in-tidymodels/">Link to the talk</a></li>
<li>Major improvements to <code>shiny</code>, including some serious caching upgrades that‚Äôll improve performance dramatically! <a href="https://rstudio.com/resources/rstudioglobal-2021/making-shiny-apps-faster-with-caching/">Link to the talk</a></li>
</ul>
</section>
<section id="other-highlights" class="level2">
<h2 class="anchored" data-anchor-id="other-highlights">Other Highlights</h2>
<ul>
<li>Meeting a bunch of people in the breakout sessions! This year, there were virtual ‚Äútables‚Äù where you could drag your avatar to ‚Äúsit down‚Äù, and once you were close enough to a table you could hear all of its conversation.</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/2021-02-11-highlights-from-rstudio-global/index.html</guid>
  <pubDate>Thu, 11 Feb 2021 05:00:00 GMT</pubDate>
</item>
<item>
  <title>What‚Äôs New in slackr 2.1.0</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2021-02-07-what-s-new-in-slackr-2-1-0/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><code>slackr 2.1.0+</code> is live! There are a whole bunch of exciting changes that we (mostly <a href="https://github.com/andrie">Andrie de Vries</a> and I) have made to improve the package a bunch.</p>
</section>
<section id="changes" class="level2">
<h2 class="anchored" data-anchor-id="changes">Changes</h2>
<p>Here are some of the things that are new in <code>slackr 2.1.0+</code>. For more info on the package, check out the <a href="https://github.com/mrkaye97/slackr">Github repo</a> and the <a href="https://mrkaye97.github.io/slackr/index.html">pkgdown site</a>.</p>
<section id="ease-of-use-improvements" class="level3">
<h3 class="anchored" data-anchor-id="ease-of-use-improvements">Ease of Use Improvements</h3>
<ul>
<li>We‚Äôve dramatically improved error messaging, so long gone are the days of errors like <code>No 'id' column found in 'x'</code>! Now, error messages should be far more helpful, with some hints about what might be going wrong.</li>
<li>We‚Äôve updated the package documentation significantly, so now there‚Äôs a far more informative <a href="https://github.com/mrkaye97/slackr">README</a>, some vignettes, and a <a href="https://mrkaye97.github.io/slackr/index.html">pkgdown site</a>.</li>
<li>We‚Äôve more clearly described the different use cases for <code>slackr</code>, in order to better help users set up <code>slackr</code> in a way that makes sense for them.</li>
</ul>
</section>
<section id="new-features" class="level3">
<h3 class="anchored" data-anchor-id="new-features">New Features</h3>
<ul>
<li>We‚Äôve fixed a bunch of bugs that were preventing things like <code>icon_emoji</code> and <code>username</code> from working, so those are fixed now!</li>
<li>We‚Äôve brought back some old functions that were removed in <code>slackr 2.0.0</code>: <code>slackr_history()</code> and <code>slackr_delete()</code>. See the docs for descriptions of what these functions can do.</li>
</ul>
</section>
<section id="back-end-changes" class="level3">
<h3 class="anchored" data-anchor-id="back-end-changes">Back-End Changes</h3>
<p>We‚Äôve made a ton of changes for how <code>slackr</code> interacts with the Slack API:</p>
<ul>
<li>We now allow paging, which is especially helpful when you have a workspace of more than 1000 channels.</li>
<li>We cache requests to get lists of channels and users so that we don‚Äôt need to repeat common API calls. This speeds up calls to <code>slackr_***()</code> and limits how often you need to actually hit the API.</li>
<li>We‚Äôve gotten rid of a really nasty implementation of channel caching (writing a local cache to the disk) in favor of the method described above.</li>
<li>We‚Äôve factored out API calls into a separate function, which makes the package easier to understand and test.</li>
<li>Speaking of testing, we‚Äôve implemented a whole bunch of unit tests, and will be working on more.</li>
</ul>
</section>
<section id="deprecations" class="level3">
<h3 class="anchored" data-anchor-id="deprecations">Deprecations</h3>
<ul>
<li>We‚Äôve deprecated a bunch of camel case functions in favor of their snake case counterparts for simplicity. Don‚Äôt worry! These are soft-deprecated for now. They won‚Äôt go away fully until a future version of <code>slackr</code></li>
<li>We‚Äôve deprecated <code>text_slackr</code> in favor of <code>slackr_msg</code>, since they do basically the same thing.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>R</category>
  <guid>https://www.matthewrkaye.com/posts/2021-02-07-what-s-new-in-slackr-2-1-0/index.html</guid>
  <pubDate>Sun, 07 Feb 2021 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
