<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Matt Kaye</title>
<link>https://www.matthewrkaye.com/posts.html#category=R</link>
<atom:link href="https://www.matthewrkaye.com/posts-r.xml" rel="self" type="application/rss+xml"/>
<description>Matt Kaye&#39;s personal website</description>
<generator>quarto-1.3.353</generator>
<lastBuildDate>Sun, 28 May 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Dependency Management</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-05-27-renv-dependency-management/renv-dependency-management.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>When I was first learning to program, I’d face problems that would require (or at least were just made easier by using) library code. For instance, I learned about the Tidyverse the hard way my first summer in college when I was interning at a FinTech firm doing lots of data wrangling, because I had just finished spending the summer very hackily implementing <code>group_by</code> and <code>summarize</code> by hand using lots and lots of layers of nested for loops. That experience taught me an important lesson: I realized that thinking “Someone else must have solved this problem before” and then seeing what they’ve done is a very practical way to solve problems.</p>
<p>And with that realization (that I could use libraries for data wrangling), I started writing lots of lines of code like this one:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyverse"</span>)</span></code></pre></div>
<p>or the not-quite-equivalent Python:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pandas</span></code></pre></div>
<p>And as soon as I began doing that, I started running into one of the most common, if not <em>the</em> most common, source of headaches for new programmers: Dependency conflicts. I was getting errors like these:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> Error<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> package or namespace load failed <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ‘foo’ <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loadNamespace</span>(j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i[[1L]], </span>
<span id="cb3-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(lib.loc, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.libPaths</span>()), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">versionCheck =</span> vI[[j]])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-3">    namespace ‘bar’ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span> is being loaded, but <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span> is required</span></code></pre></div>
</section>
<section id="whats-the-problem" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-problem">What’s the Problem?</h2>
<p>At the time, I saw these types of errors and was frustrated. I didn’t understand them – why is a package requiring a specific version of another package? And I also thought there was a quick fix: I’d just install the required version of the dependency and everything would work again.</p>
<p>Until I inevitably ran into the same problem again soon after, while trying to install some other dependency.</p>
<p>At its core, I was experiencing my first foray into what might be considered a semi-pro version of <a href="https://en.wikipedia.org/wiki/Dependency_hell">dependency hell</a>. I thought I could “solve” my problem of incompatible dependencies with duct tape – installing the correct version in order to fix the immediate error – but that doesn’t actually work in practice, since the same issue is bound to come up again with another version of a different library, or in a different project, or on another day.</p>
</section>
<section id="dependency-resolution" class="level2">
<h2 class="anchored" data-anchor-id="dependency-resolution">Dependency Resolution</h2>
<p>In practice, this is a <em>dependency management</em> problem. And the basic story goes as follows.</p>
<p>You start on your programming journey, and you want to use some great library – take <code>dplyr</code>, for example – for some of your work. So you <code>install.packages("dplyr")</code> and it installs the most recent version. Then you decide you’re interested in working with spatial data, so you install <code>sf</code> with <code>install.packages("sf")</code>. Next, you realize you need to work with Census data (what else are you going to be making maps of, after all?), so you <code>install.packages("tidycensus")</code> and with those three packages, you do your project.</p>
<p>But then next week you have a homework assignment, which, entirely hypothetically, requires you to install some niche package like <code>rethinking</code>, so, of course, you <code>install.packages("rethinking")</code> and you do your homework.</p>
<p>And then later that night, you get curious about seeing what the Elon Jet Tracker has been up to on Twitter, and so you install <code>rtweet</code>: <code>install.packages("rtweet")</code>, but this time, you get one of the errors above about a namespace clash.</p>
<p>And so now, you’re at a block in the road. You can either upgrade or downgrade the dependency that’s clashing and risk one of your <em>other</em> projects breaking, or you can try to get around the problem another way, such as using an old version of <code>rtweet</code> or not using <code>rtweet</code> at all.</p>
<p>This is the point at which former you – and former me – should have been thinking “someone must have solved this problem.”</p>
</section>
<section id="declaring-your-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="declaring-your-dependencies">Declaring Your Dependencies</h2>
<p>The root cause of the errors in situations like these is that we have a dependency leakage problem. In the example I gave above, there were three separate “projects”: Your Census data analysis, your homework, and your keeping tabs on Elon’s jet. Those three projects don’t need to know about each other, and it’s actually a <em>problem</em> that they <em>do</em>. The issue is that in using <code>install.packages("...")</code> (or <code>pip install ...</code>) everywhere, you’re installing all of these packages <em>globally</em> on your machine. This means that <em>every</em> project you’re working on needs to use the <em>same</em> dependencies, even when the projects are separate.</p>
<p>Above, I proposed the solution to this problem that I used to use, which was to just install the version of the package that was needed by the package I was trying to install, and continue on until I was inevitably frustrated by the issue once again, generally sooner rather than later. But there’s a battle-hardened way of solving this problem: Declaring your dependencies, and using a dependency isolation tool.</p>
<p>In R, there’s the great <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a> for this. In Python, I personally like <a href="https://python-poetry.org/">Poetry</a>, but <a href="https://docs.conda.io/en/latest/">Conda</a>, <a href="https://pipenv.pypa.io/en/latest/">pipenv</a>, or just a plain old <a href="https://docs.python.org/3/library/venv.html">virtualenv</a> would work just fine too. The key is that you want to be declaring the dependencies that your project needs in some kind of file (such as an <code>DESCRIPTION</code> file in R, or a <code>pyproject.toml</code> or a <code>requirements.txt</code> in Python, or a <code>Gemfile</code> in Ruby, and so on), and then preferably having a dependency manager like <code>renv</code> or <code>poetry</code> resolve those dependencies and save the result into a <em>lockfile</em>, like a <code>poetry.lock</code> or an <code>renv.lock</code>. Then, when you want to work on your project, or homework, or whatever, you restore the dependencies as they’re recorded in that lockfile. This means that whenever you want to run a project, you know exactly what versions of every dependency need to be installed. And at the same time, if you want to add a new dependency, your dependency manager can do its best to resolve conflicts between that new dependency and all of the other libraries in your lockfile.</p>
</section>
<section id="dependency-isolation" class="level2">
<h2 class="anchored" data-anchor-id="dependency-isolation">Dependency Isolation</h2>
<p>The other key piece to the puzzle is dependency <em>isolation</em>, which is the leakage problem from before. In an ideal world, the dependencies for your project should be “isolated”, meaning that they’re only installed in your <em>project</em> environment (the R project, the virtualenv, etc.) and <em>not</em> globally on your machine.</p>
<p>Let’s take an example in R to see how dependency isolation works. Start by initializing a very simple R project by running the command below in a terminal.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> renv-test <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-2">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> renv-test <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-3">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"library(example)"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> test.R <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-4">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"install.packages('renv', repos='http://cran.us.r-project.org'); renv::init()"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-5">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv::install('mrkaye97/mrkaye97.github.io:posts/series/doing-data-science/2023-05-27-renv-dependency-management/example'); renv::snapshot()"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> renv.lock</span></code></pre></div>
<p>You should see some R output about installing packages, and then you should see something like this:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"R"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4.1.2"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Repositories"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CRAN"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"URL"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://cloud.r-project.org"</span></span>
<span id="cb5-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-9">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb5-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Packages"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"example"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Package"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.1.0"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GitHub"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-16">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteType"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"github"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-17">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteHost"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"api.github.com"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-18">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteUsername"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrkaye97"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-19">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteRepo"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrkaye97.github.io"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-20">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteSubdir"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"posts/series/doing-data-science/2023-05-27-renv-dependency-management/example"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-21">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteRef"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"master"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-22">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"RemoteSha"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a72bb805e175c77e7bb8a2f4fb11780b76807d4d"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-23">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Hash"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"22d8e981dd94e2fab693636781631008"</span></span>
<span id="cb5-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb5-25">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"renv"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-26">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Package"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"renv"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-27">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.17.3"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-28">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Repository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-29">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Repository"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CRAN"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-30">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Requirements"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb5-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utils"</span></span>
<span id="cb5-32">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-33">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"Hash"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4543b8cd233ae25c6aba8548be9e747e"</span></span>
<span id="cb5-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This last bit is the <code>renv</code> <em>lockfile</em>. It’s where all of the dependencies of your project are enumerated. Here, the project is trivial. We’re just installing <code>example</code>, which has no dependencies, so it’s the only thing (in addition to <code>renv</code> itself) that’s recorded in the lockfile. But this also generalizes to arbitrarily complicated projects and sets of dependencies. As you add more packages, the lockfile grows, but you can simply run <code>renv::restore()</code> to restore all of the dependencies for your project.</p>
<p>Next, if you run the following, you should be able to use the package just fine:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"library(example); hello()"</span></span></code></pre></div>
<p>And you’ll see:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[1]</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span></code></pre></div>
<p>But then, try this:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> .. <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb8-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"library(example); hello()"</span></span></code></pre></div>
<p>Unless you have another package installed globally called <code>example</code> that does the same thing as my example package, you’ll see:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">Error <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(example) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> there is no package called ‘example’</span>
<span id="cb9-2">Execution halted</span></code></pre></div>
<p>But this time, this error is a feature, not a bug! This is an example of dependency isolation. When you’re inside of your <code>renv-test</code> project, you install the <code>example</code> package, record it in the lockfile, and can use it just fine. But as soon as you’re no longer inside of that project, this package is no longer available. This means that if you, for instance, start a new project that needs a different version of <code>example</code>, you don’t need to worry about this <code>renv-test</code> project being corrupted. The two projects are isolated from each other, so they can rely on separate sets of dependencies with no leakage from one to the other.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>As an aside, tools like <code>renv</code> and <code>pip</code> are also usually good at dependency <em>resolution</em>, meaning they can figure out which versions of the dependencies of the packages you want to use you should install in order to make sure that everything is compatible. If you’re interested, you can read about how <code>pip</code> does dependency resolution <a href="https://pip.pypa.io/en/stable/topics/dependency-resolution/">on their site</a>.</p>
</div>
</div>
</div>
</section>
<section id="other-resources" class="level2">
<h2 class="anchored" data-anchor-id="other-resources">Other Resources</h2>
<p>There are <em>tons</em> of amazing resources on managing dependencies. This is a problem that every software team needs to manage, so virtually every programming language will have at least one, if not many widely-used dependency management tools. Since this is such a common problem, there’s also a lot written (and spoken!) about it. A few resources I particularly like are <a href="https://www.youtube.com/watch?v=GwVx_pf2uz4&amp;t=6s&amp;ab_channel=PositPBC">David Aja’s RStudio::conf 2022 talk</a> about <code>renv</code> (which I was enthusiastically in the audience for!) and something he mentions, which is <a href="https://12factor.net/dependencies">The 12-Factor App</a>, which our team’s Head of Engineering recommended to me very soon after starting at CollegeVine.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>David Aja’s talk on this topic was called “You Should Be Using <code>renv</code>,” and you should be. In the short run, it might feel like setting up the scaffolding for <code>renv</code> or <code>poetry</code> or whatever your tool of choice is adds too much overhead. But if you’re feeling that way, it’s important to keep in mind that it’s inevitable that you end up running into dependency issues, and it’ll be much harder to untangle them once you’re already in deep than it will be to build good habits from the get-go.</p>
<p>You should be using <code>renv</code>.</p>


</section>

 ]]></description>
  <category>data science</category>
  <category>R</category>
  <category>python</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-05-27-renv-dependency-management/renv-dependency-management.html</guid>
  <pubDate>Sun, 28 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Pull Requests, Code Review, and The Art of Requesting Changes</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-14-code-review/code-review.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="https://matthewrkaye.com/posts/series/doing-data-science/2023-04-03-unit-testing/unit-testing.html">my last post</a> on unit testing analytics code, I started off by saying that I had never heard of unit testing until my second data science job. Not in college, not in internships, and not in my first data science job. The same is true for pull requests and code review – they were completely new to me.</p>
<p>This, in my view, is a very unfortunate commonality in analytics teams. All too often, code will go unreviewed or kept out of any kind of version control system entirely. Ultimately, this practice, albeit common, is detrimental to the teams practicing it.</p>
<p>Since then, code review – both doing code review for others and getting feedback from others on my code – has grown to become one of my favorite parts of my job. It’s also a mission-critical process for any team that strives to maintain a high-quality codebase. But more importantly, it’s an valuable social exercise, and an fun way for contributors to come together as a team to collaborate, learn from each other, and improve their skills.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>I’d also like to note that the Tidyverse team just published a <a href="https://tidyverse.github.io/code-review/">great series on code review</a>, which I’d highly recommend reading.</p>
</div>
</div>
</div>
</section>
<section id="but-first-git" class="level2">
<h2 class="anchored" data-anchor-id="but-first-git">But First: Git</h2>
<p>There are a ton of introductions to Git online, all of which are far better than anything I could write here. If you’re not already at least somewhat familiar with Git, I’d recommend starting with a post like one of these:</p>
<ul>
<li><a href="https://docs.github.com/en/get-started/using-git/about-git">From GitHub</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/what-is-version-control">From Atlassian</a></li>
<li><a href="https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F">From Git itself</a></li>
</ul>
<p>That said, what I’ll discuss here doesn’t require any particular Git knowledge.</p>
</section>
<section id="on-code-review" class="level2">
<h2 class="anchored" data-anchor-id="on-code-review">On Code Review</h2>
<p>I wasn’t sure where to start this post. I considered discussing Git itself, but I decided it would be better to leave it to the experts. Then I thought about discussing the function of <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests">pull requests</a>, but that didn’t seem particularly valuable either. So I figured I might just jump into the meat of it: Why code review is valuable, and why analytics teams should be doing more of it than they are.</p>
<section id="why-do-we-review-code" class="level3">
<h3 class="anchored" data-anchor-id="why-do-we-review-code">Why Do We Review Code?</h3>
<p>People and teams have wildly differing opinions about what the main objective of code review is. The following is the opinion of the Tidyverse team:</p>
<blockquote class="blockquote">
<p>The primary purpose of code review is to ensure that the overall “code health” of our packages is improving over time.</p>
</blockquote>
<p>Another common opinion on the main purpose of code review is to catch bugs in code before they hit production.</p>
<p>In my opinion, these are both important objectives of code review to be sure, but are not the <em>main</em> objective. My team’s view is that the main objective of code review is knowledge transfer between teammates. On our team – with “team” encompassing both data and engineering – we talk often about the <a href="https://en.wikipedia.org/wiki/Bus_factor">bus factor</a> of our work. A toned-down explanation of the bus factor is that it represents the number of people who need to go on vacation, or be out sick, or leave for a new job for a project to come to a grinding halt because else nobody on the team knows how a particular system works. We’ve been bitten multiple times by projects with a bus factor of one, meaning that if one person were to leave, that project would be left in limbo.</p>
<p>Analytics work is no different than engineering work in this respect: If one data scientist lives in a dark room for two years building a novel model and ships it to production without anyone else knowing how it works, how to maintain it, and how to monitor it, then that project is risky. If that data scientist were to leave, there would be a model in production that nobody else had experience working with, which could result in any number of issues. In steps code review to help us solve this problem.</p>
</section>
<section id="other-reasons-to-review-code" class="level3">
<h3 class="anchored" data-anchor-id="other-reasons-to-review-code">Other Reasons To Review Code</h3>
<p>Aside from knowledge transfer, code review is also a valuable opportunity to do quality control. In no particular order, all of the following (and more) can be suggested in code review:</p>
<ol type="1">
<li>Bug fixes</li>
<li>Maintainability improvements, such as improving the readability of the code, adding comments, adding tests, etc.</li>
<li>Performance improvements</li>
<li>Security improvements</li>
</ol>
<p>All of these are important aspects of maintaining a codebase over the long-term, and, in my experience, are far too often overlooked by analytics teams. In particular, a past team of mine – as well as many others, from what I’ve read and heard in talking to others in analytical roles – had a bad habit of data scientists being siloed and not having any eyes on their work until things were “ready” to be shipped to production. In my opinion, data products are software and should be treated as such. This means that if our models will be shipped to production, then it’s imperative that the code underlying them is written in a way that’s understandable by others, safe, correct, and, to whatever extent necessary, performant. Code review helps achieve all of these goals.</p>
<p>Lastly, code review is a social exercise. It’s a great way for a team to work together, especially in the world of remote work. In getting feedback from teammates, data scientists get to flex their collaboration muscle and, ideally, this type of collaboration allows the whole to be more than the sum of its parts.</p>
</section>
<section id="an-example-review" class="level3">
<h3 class="anchored" data-anchor-id="an-example-review">An Example Review</h3>
<p>Since code review is unfamiliar to a lot of us in the analytics world, I’ll give an example of how I might do a review. Our team often works with data from external sources like the Census for doing all kinds of analysis. Let’s imagine reviewing the following code that a hypothetical teammate has put in to determine the five counties in Arizona with the highest percentage of Native American residents:</p>
<div class="cell" data-layout-align="center" data-hash="code-review_cache/html/unnamed-chunk-2_c1ec406875876f9127deb3a4b1812bb4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(httr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5">variables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb1-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NAME"</span>,</span>
<span id="cb1-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001A_001E"</span>,</span>
<span id="cb1-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001B_001E"</span>,</span>
<span id="cb1-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001C_001E"</span>,</span>
<span id="cb1-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001D_001E"</span>,</span>
<span id="cb1-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001E_001E"</span>,</span>
<span id="cb1-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001F_001E"</span>,</span>
<span id="cb1-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001G_001E"</span></span>
<span id="cb1-14">)</span>
<span id="cb1-15"></span>
<span id="cb1-16">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GET</span>(</span>
<span id="cb1-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.census.gov/data/2019/acs/acs5"</span>,</span>
<span id="cb1-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">query =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(variables, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>),</span>
<span id="cb1-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"for"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tract:*"</span>,</span>
<span id="cb1-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state:04"</span>,</span>
<span id="cb1-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> secret<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_secret</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CENSUS_API_KEY"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vault =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%s/posts/config"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SITE_ROOT_DIR"</span>)))</span>
<span id="cb1-23">  )</span>
<span id="cb1-24">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">content</span>()</span>
<span id="cb1-26"></span>
<span id="cb1-27">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> response[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb1-28">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> response[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-29"></span>
<span id="cb1-30">response <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb1-32">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(.x, cols)</span>
<span id="cb1-33">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-34">  janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb1-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb1-37">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(name, tract, county, state),</span>
<span id="cb1-38">      as.numeric</span>
<span id="cb1-39">    )</span>
<span id="cb1-40">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-41">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(county) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(</span>
<span id="cb1-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na_pct =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(b01001c_001e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric))))</span>
<span id="cb1-44">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(</span>
<span id="cb1-46">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order_by =</span> na_pct,</span>
<span id="cb1-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-48">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-49">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">county</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">na_pct</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">001</td>
<td style="text-align: right;">0.7377187</td>
</tr>
<tr class="even">
<td style="text-align: left;">017</td>
<td style="text-align: right;">0.4465544</td>
</tr>
<tr class="odd">
<td style="text-align: left;">005</td>
<td style="text-align: right;">0.2654699</td>
</tr>
<tr class="even">
<td style="text-align: left;">007</td>
<td style="text-align: right;">0.1630934</td>
</tr>
<tr class="odd">
<td style="text-align: left;">012</td>
<td style="text-align: right;">0.1495215</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>At first glance, this code looks pretty involved and poorly written to me. In the real world, we often write complicated code that relies on hyper-specific domain knowledge about the problem being solved in order to really understand it. As I mentioned above, our team often finds ourselves working with external data sources, such as the Census data shown here. And these sources usually have their own internal codes or identifiers that denote what the data you’re actually looking at is about. For instance, the series <code>B01001C_001E</code> used above represents the total Native American population in a region. In the Census, it’s corresponding “concept” is defined as the following:</p>
<blockquote class="blockquote">
<p>B01001C_001E: SEX BY AGE (AMERICAN INDIAN AND ALASKA NATIVE ALONE)</p>
</blockquote>
<p>Obviously, these codes are not comprehensible for the layman. There’s method to the madness, but we so often work with gibberish codes that don’t correspond to anything intuitive and make code review and maintenance dramatically harder. The challenge here is that in order to effectively review this code, the reviewer not only needs to review what the code is trying to accomplish in some high-level sense, but also needs to understand the data itself and its schema in order to understand how the author is trying to accomplish their goal. Unfortunately, the code’s author has not done a good job of helping the reviewer (me) understand the code.</p>
<p>Not only do I not have any context on the Census codes, but there’s no documentation linked (or written out) to help me find what the codes mean, there’s no documentation of the API response to explain why they’re seemingly removing the first item in the response’s body and setting it as the names of the columns in my final data frame, and there’s no explanation of what <code>na_pct</code> means, which in the context of this work means “percentage Native American” but could also reasonably mean something like “percentage of the data that’s <code>null</code>”.</p>
<p>And this is exactly where the value of code review comes in. We often like to say that you’re not writing code for yourself right now. Instead, you should be writing it for a future you in six months or a year who won’t remember all of the intricacies of this problem anymore. In short, you want your code to be understandable to future you, and, by extension, your teammates. But code authors, just like anyone else working on a project of any sort, are often so deep in the weeds of their work and so familiar with all of the ins and outs that it’s easy to forget just how confusing their work can be at times. Code review is a great opportunity for others to ask for clarification, which is the knowledge transfer I mentioned before.</p>
<p>If a teammate put in these changes, I’d request a few improvements:</p>
<ol type="1">
<li>What do the Census codes mean?</li>
<li>What does <code>na_pct</code> mean?</li>
<li>What does the response from the Census API look like?</li>
<li>What does <code>state:04</code> mean?</li>
</ol>
<p>After requesting clarification on all of those points, I’d hope the code would ultimately end up looking something like this:</p>
<div class="cell" data-layout-align="center" data-hash="code-review_cache/html/unnamed-chunk-3_bc7e9589d4c80bfdaf8689be7b9da287">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Data from the Census ACS (American Community Survey)</span></span>
<span id="cb2-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb2-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## ACS 2019 5-year data</span></span>
<span id="cb2-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001A_001E: Total White alone population</span></span>
<span id="cb2-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001B_001E: Total Black or African American alone population</span></span>
<span id="cb2-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001C_001E: Total American Indian and Alaska Native alone population</span></span>
<span id="cb2-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001D_001E: Total Asian alone population</span></span>
<span id="cb2-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001E_001E: Total Native Hawaiian and Other Pacific Islander alone population</span></span>
<span id="cb2-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001F_001E: Total Some other race alone population</span></span>
<span id="cb2-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001G_001E: Total Two or more races population</span></span>
<span id="cb2-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb2-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Codes of the form B01001X_001E</span></span>
<span id="cb2-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## correspond to "Total X population" where X</span></span>
<span id="cb2-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## is a race as defined by the Census. For instance,</span></span>
<span id="cb2-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## B01001A_001E: Total White alone population</span></span>
<span id="cb2-16">variables <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb2-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">white_alone =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001A_001E"</span>,</span>
<span id="cb2-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">black =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001B_001E"</span>,</span>
<span id="cb2-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">native_american =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001C_001E"</span>,</span>
<span id="cb2-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">asian =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001D_001E"</span>,</span>
<span id="cb2-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hawaiian_pacific_islander =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001E_001E"</span>,</span>
<span id="cb2-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">other_alone =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001F_001E"</span>,</span>
<span id="cb2-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">multi_racial =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001G_001E"</span></span>
<span id="cb2-24">)</span>
<span id="cb2-25"></span>
<span id="cb2-26">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">GET</span>(</span>
<span id="cb2-27">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.census.gov/data/2019/acs/acs5"</span>,</span>
<span id="cb2-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">query =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(variables, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>),</span>
<span id="cb2-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"for"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tract:*"</span>,</span>
<span id="cb2-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state:04"</span>,</span>
<span id="cb2-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> secret<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_secret</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CENSUS_API_KEY"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vault =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%s/posts/config"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SITE_ROOT_DIR"</span>)))</span>
<span id="cb2-33">  )</span>
<span id="cb2-34">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">content</span>()</span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## The first item in the JSON response body is a vector</span></span>
<span id="cb2-38"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## of the names of the fields returned.</span></span>
<span id="cb2-39"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## For this query, we get: </span></span>
<span id="cb2-40"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb2-41"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001A_001E</span></span>
<span id="cb2-42"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001B_001E</span></span>
<span id="cb2-43"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001C_001E</span></span>
<span id="cb2-44"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001D_001E</span></span>
<span id="cb2-45"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001E_001E</span></span>
<span id="cb2-46"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001F_001E</span></span>
<span id="cb2-47"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * B01001G_001E</span></span>
<span id="cb2-48"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * state</span></span>
<span id="cb2-49"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * county</span></span>
<span id="cb2-50"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   * tract</span></span>
<span id="cb2-51"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb2-52"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Every other record contains data corresponding to these fields.</span></span>
<span id="cb2-53"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## The values in the population fields (e.g. B01001A_001E) are integers</span></span>
<span id="cb2-54"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## representing the total population for that racial group in that tract.</span></span>
<span id="cb2-55"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## The state, county, and tract are all FIPS codes.</span></span>
<span id="cb2-56">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> response[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb2-57">response <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> response[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-58"></span>
<span id="cb2-59">response <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-60">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb2-61">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(.x, cols)</span>
<span id="cb2-62">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-63">  janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-64">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(</span>
<span id="cb2-66">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(variables))),</span>
<span id="cb2-67">      as.numeric</span>
<span id="cb2-68">    )</span>
<span id="cb2-69">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-70">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(county) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-71">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(</span>
<span id="cb2-72">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">percent_native_american =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(b01001c_001e) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_of</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(variables))))))</span>
<span id="cb2-73">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-74">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_max</span>(</span>
<span id="cb2-75">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">order_by =</span> percent_native_american,</span>
<span id="cb2-76">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-77">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-78">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">county</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">percent_native_american</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">001</td>
<td style="text-align: right;">0.7377187</td>
</tr>
<tr class="even">
<td style="text-align: left;">017</td>
<td style="text-align: right;">0.4465544</td>
</tr>
<tr class="odd">
<td style="text-align: left;">005</td>
<td style="text-align: right;">0.2654699</td>
</tr>
<tr class="even">
<td style="text-align: left;">007</td>
<td style="text-align: right;">0.1630934</td>
</tr>
<tr class="odd">
<td style="text-align: left;">012</td>
<td style="text-align: right;">0.1495215</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now that the code has been rewritten, future readers of the code have some much needed context. The author has explained what the data looks like when we get it back from the API, has explained what each of the codes corresponds to, and has renamed a variable to be more helpful. Ultimately, these changes will make it easier for readers to understand what this code is trying to accomplish and work with it.</p>
</section>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>The key takeaway here should be that in doing this review, we’ve established some shared sense of how this code works between <em>multiple</em> people instead of just one (the author) understanding it. In addition, the reviewer helped the author rework their code to make it easier for anyone else on the team to understand. This means that when we need to use this code in the future, it’ll be written in a way that makes it easier for that future person to work with, which will ultimately lead to them being able to ship more quickly and confidently, and needing to reinvent the wheel less often.</p>
<p>A popular saying is that code is read ten times more than it’s written since we often need to understand existing code to author new code. Reviews are a great way to make sure that code is written in a maintainable, understandable way so that when it’s read all of those many times in the future, it’s able to be understood effortlessly.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-14-code-review/code-review.html</guid>
  <pubDate>Mon, 24 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Unit Testing Analytics Code</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-03-unit-testing/unit-testing.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Unit testing was a concept I had never even heard of before I started my <em>second</em> data science job. It never came up in any of my college statistics or computer science courses. It never came up in any of my data science internships. It never came up in my first data science job.</p>
<p>In conversations I have with friends – and, broadly, conversations with basically anyone doing data science or analytics – I face lots of pushback when it comes to unit testing. Usually the objections come in the form of either not knowing <em>why</em> you might test, since the code is just so simple and straightforward that nothing could go wrong, or not understanding the value added. In my opinion, both of these objections come from the same place. At first glance, it seems like some combination of blissful ignorance about what could go wrong and overconfidence in one’s own ability or in their code’s correctness, but I think that the objections actually come from something deeper. In my opinion, it’s the unfamiliarity of testing. It’s not something that’s commonly taught to people involved in analytics, and so it feels new. That can be scary.</p>
</section>
<section id="whats-a-unit-test" class="level2">
<h2 class="anchored" data-anchor-id="whats-a-unit-test">What’s A Unit Test?</h2>
<p>First thing’s first: What’s a unit test? It’s actually really simple! Unit testing tests the smallest possible components of your code for correctness and what I would define as “good behavior.” In analytics, you might test things like feature engineering steps, metric definitions, or data wrangling code. The basic idea of a unit test is that you take a function you’ve written, and you’d make up some inputs to the function and then check if your code produces the outputs you’d expect. In the simplest case, you might test the identity function as follows:</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-2_baedc5f932b2628f085597b746bbe0fd">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">identity <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb1-2">  x</span>
<span id="cb1-3">}</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The identity returns the input"</span>, {</span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identity</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identity</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo"</span>))</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identity</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Width), </span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identity</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Width))</span>
<span id="cb1-12">  )</span>
<span id="cb1-13">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 😸</code></pre>
</div>
</div>
<p>All we’re doing here is checking that for some given input, our function returns the expected (correct) output. You can also test that your function returns an error or warning, returns nothing, returns <em>some</em> output, and much more. I’d highly recommend looking at the documentation for <a href="https://testthat.r-lib.org/">testthat</a> or <a href="https://docs.pytest.org/en/7.2.x/">pytest</a> to get a sense for what and how to test.</p>
</section>
<section id="case-study-feature-engineering" class="level2">
<h2 class="anchored" data-anchor-id="case-study-feature-engineering">Case Study: Feature Engineering</h2>
<p>Data scientists very often write feature engineering code. And as it turns out, feature engineering is a very common place where bugs can pop up unbeknownst to the code’s author.</p>
<div class="callout callout-style-simple callout-important no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>It’s important to note that data scientists are usually writing Python or R, which are both dynamically typed, interpreted languages. Unit testing is doubly valuable in these types of languages, since you don’t get the benefits of a compiler and static type checks to catch issues in your code. In languages like Python and R, anything can go wrong in your code. And you often won’t find out about issues until runtime, or, depending on the nature of the bug, even later (if ever).</p>
</div>
</div>
</div>
<section id="an-example" class="level3">
<h3 class="anchored" data-anchor-id="an-example">An Example</h3>
<p>Let’s write some example code to create a simple feature to use in a hypothetical machine learning model downstream.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-3_c0b2015731146ce93b02b161739792e3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">create_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb3-2">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x)</span>
<span id="cb3-3">}</span></code></pre></div>
</div>
<p>This might look familiar: It’s a function that takes a variable <code>x</code> and standardizes it. Now I’ll generate some data to show how it works.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-4_9ac936cca1e25eb9019ac68762ca5b1d">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1000 draws from a Normal(25, 5)</span></span>
<span id="cb4-2">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>We can plot a histogram of our data to show what it looks like:</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-5_17a166d70193940a337fca5e0b5ca90d">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(raw, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-03-unit-testing/unit-testing_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Now, let’s run <code>raw</code> through our feature engineering function.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-6_f4f67fc856df93ccf70f288974bb0b99">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">std <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(raw)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(std, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-03-unit-testing/unit-testing_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Great! Now <code>std</code>, the new variable that we created from standardizing <code>raw</code>, looks like it follows a standard normal distribution.</p>
</section>
<section id="trivial-examples-unexpected-results" class="level3">
<h3 class="anchored" data-anchor-id="trivial-examples-unexpected-results">Trivial Examples, Unexpected Results</h3>
<p>Now that we’ve written a function to create a feature, let’s use that feature engineering step on a couple of real-world examples. Keep in mind that as data scientists, we’re often working with messy data – it could include missing values, outliers, data of an incorrect type, etc. and there are often very few guarantees about what our data will look like in practice. These next few examples show how things could go wrong (often very quietly) in our seemingly correct feature engineering step we wrote above.</p>
<section id="missings" class="level4">
<h4 class="anchored" data-anchor-id="missings">Missings</h4>
<p>Let’s do the simplest thing first: What happens when we have missing values in our data?</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-7_66d14569627d7f135f70aba9b621a747">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA NA NA NA</code></pre>
</div>
</div>
<p>If you’re familiar with R, this should be expected. And you’re probably thinking to yourself that we just need to set <code>na.rm = TRUE</code>, and you’d be right! But this brings me to the first major point I’d like to make on how things can go wrong.</p>
<div class="callout callout-style-simple callout-important no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>When you’re writing your code, it’s easy to forget things like adding <code>na.rm = TRUE</code> when the data you’re working with doesn’t appear to need it. It’s probably not your default behavior to remember to always set the flag to tell R to remove <code>NA</code> values, since if you’re not working with any of them, why would you remember to do that? Expecting yourself to <em>remember</em> to do something like this is a recipe for very brittle, error-prone code.</p>
</div>
</div>
</div>
<p>Let’s fix this bug the naïve way.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-8_beddeadd9fea526fe93dd5c2c16d30d8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">create_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb9-2">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-3">}</span></code></pre></div>
</div>
<p>Great, and now let’s test it.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-9_610ec24f14a67ee57097ae419c1bf0a7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1  0  1 NA</code></pre>
</div>
</div>
<p>Looks good. Now all of our non-missing values have been correctly transformed.</p>
</section>
<section id="zero-standard-deviation" class="level4">
<h4 class="anchored" data-anchor-id="zero-standard-deviation">Zero Standard Deviation</h4>
<p>How about another non-trivial bug: A standard deviation of zero. Consider a toy example: Predicting whether or not someone plays basketball.</p>
<p>In this example, let’s say we have both men and women in our training data, and we want to use the height of each person to predict whether that person plays basketball. It probably doesn’t make sense to standardize the heights without grouping, since we don’t want to end up with a distribution of heights where most of the women are below average and most of the men are above average. It’d be much smarter to standardize <em>within group</em>, which would then produce a measure of height relative to the “competition” in some sense. Let’s give that a shot on a trivial data set where every man is the same height.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-10_bc7fd46e599dfc1c3b6a52f79cff7f6c">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb12-3"></span>
<span id="cb12-4">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb12-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">player_id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb12-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sex =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>),</span>
<span id="cb12-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">71</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">72</span>)</span>
<span id="cb12-8">)</span>
<span id="cb12-9"></span>
<span id="cb12-10">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(sex) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb12-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height_std =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(height)</span>
<span id="cb12-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">player_id</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">sex</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">height</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">height_std</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">77</td>
<td style="text-align: right;">NaN</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">77</td>
<td style="text-align: right;">NaN</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: left;">M</td>
<td style="text-align: right;">77</td>
<td style="text-align: right;">NaN</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">70</td>
<td style="text-align: right;">-1</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">71</td>
<td style="text-align: right;">0</td>
</tr>
<tr class="even">
<td style="text-align: right;">6</td>
<td style="text-align: left;">F</td>
<td style="text-align: right;">72</td>
<td style="text-align: right;">1</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>So what happened here? In the male group, all of the heights were the same. This resulted in a standard deviation of zero when we went to standardize our height variable, which meant dividing by zero. So we get <code>NaN</code> back – Not a Number.</p>
<p>This example feels trivial, but in practice it’s not. If your data had hundreds or thousands of groups, it’s not all that unlikely to have a situation like this. And note that R doesn’t throw any kind of warning or error, it just quietly returns you <code>NaN</code> when you’re expecting a real number.</p>
</section>
</section>
<section id="infinity" class="level3">
<h3 class="anchored" data-anchor-id="infinity">Infinity</h3>
<p>R also has a built in value for infinity: <code>Inf</code>. What happens if we try to build our feature when we had an <code>Inf</code> in our data?</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-11_1a72ecd0170ee247890cedea5ca0fc4c">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NaN NaN NaN NaN</code></pre>
</div>
</div>
<p>A bunch of <code>NaN</code>. This seems trivial too, but imagine the following example, which you very well might run into in the real world: Computing GDP per capita.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-12_be3d01bf006bc4dde1dcb2773c82909c">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb15-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gdp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>),</span>
<span id="cb15-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">population =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb15-4">)</span>
<span id="cb15-5"></span>
<span id="cb15-6">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb15-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gdp_per_capita =</span> gdp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> population</span>
<span id="cb15-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb15-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gdp_per_capita_std =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(gdp_per_capita)</span>
<span id="cb15-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb15-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">gdp</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">population</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">gdp_per_capita</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">gdp_per_capita_std</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1000</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">Inf</td>
<td style="text-align: right;">NaN</td>
</tr>
<tr class="even">
<td style="text-align: right;">2000</td>
<td style="text-align: right;">50</td>
<td style="text-align: right;">40</td>
<td style="text-align: right;">NaN</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3000</td>
<td style="text-align: right;">100</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">NaN</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>R doesn’t yell at you for dividing by zero unlike Python for instance, or virtually any other self-respecting programming language. This means that if you accidentally divide by zero somewhere in your data pipeline, you could very well end up with a bunch of <code>NaN</code> if you standardize. And working with real-world data means that dividing by zero happens fairly often, generally because of small issues in the data we’re working with.</p>
<section id="one-row-per-group" class="level4">
<h4 class="anchored" data-anchor-id="one-row-per-group">One Row Per Group</h4>
<p>Back to grouping: It’s also pretty likely when working with real-world data that you might have a group with only one row. Let’s see what happens in that case.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-13_1b416dece320c2ff339e61ec34c96db0">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb16-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-4">)</span>
<span id="cb16-5"></span>
<span id="cb16-6">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value_std =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(value)</span>
<span id="cb16-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">group</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">value</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">value_std</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">NA</td>
</tr>
<tr class="even">
<td style="text-align: right;">2</td>
<td style="text-align: right;">2</td>
<td style="text-align: right;">-0.7071068</td>
</tr>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">0.7071068</td>
</tr>
<tr class="even">
<td style="text-align: right;">3</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">-0.7071068</td>
</tr>
<tr class="odd">
<td style="text-align: right;">3</td>
<td style="text-align: right;">5</td>
<td style="text-align: right;">0.7071068</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Once again, same issue. A single-row group returns <code>NA</code>, since the standard deviation of a single number isn’t defined.</p>
</section>
</section>
<section id="lessons" class="level3">
<h3 class="anchored" data-anchor-id="lessons">Lessons</h3>
<p>What have we learned here?</p>
<p>In short, there are many ways for things to quietly go wrong in your data pipelines, especially in a language like R. Even with a function as simple as standardization, it’s easy to cook up all kinds of possible corner cases or other issues that would cause your function to return any number of unpredictable results. And when working with real-world data, some of these quirks are inevitable. It’s virtually impossible that you’d never run into any of the issues enumerated above when working with messy data for any amount of time. And these examples were about as simple as they could be. In the real world, analytical code is often far more complicated and data far messier than this, which compounds the likelihood of issues like these.</p>
</section>
</section>
<section id="enter-testing" class="level2">
<h2 class="anchored" data-anchor-id="enter-testing">Enter Testing</h2>
<p>And with all of that: Back to testing. Testing is the only way to know that your code is actually doing what you think it’s doing, and writing tests is a great way to make guarantees about the ability of your code to handle some of these issues that we’ve discussed. Writing tests also lets you ensure that your implementation is correct, and it lets you refactor your code more easily by loudly alerting you if you’ve broken something, which should make you much more confident in the correctness of your implementation.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>If you’re not familiar with it, this is a good point to introduce <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test-Driven Development</a>. It’s not something I would <em>always</em> recommend, but at least being familiar with it might make for a good starting point when it comes to learning how to think about writing tests for your code</p>
</div>
</div>
</div>
<section id="testing-our-standardization-function" class="level3">
<h3 class="anchored" data-anchor-id="testing-our-standardization-function">Testing Our Standardization Function</h3>
<p>And with that, let’s write some tests. Imagine that we knew that we wanted to write our feature engineering function to do standardization. We also know that we want to avoid some of the bugs that we introduced in the examples above. One possible option for handling those cases where our function will do something unexpected would be to throw an error if we get unexpected inputs. That’s what I’ll illustrate here – it’d let the user learn about the issue quickly and debug. There are many options for how to handle these issues though. You might also fall back on a default value when your code will return a <code>NA</code> or <code>NaN</code>, for instance. Now, on to the tests.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-14_ef42be270c0b4a2180a42e0f12a36fff">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb17-2"></span>
<span id="cb17-3">test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standardized variable is transformed correctly"</span>, {</span>
<span id="cb17-5">    random_normal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb17-6">    </span>
<span id="cb17-7">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Expect that the mean of the transformed data is within</span></span>
<span id="cb17-8">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 0.005 of zero</span></span>
<span id="cb17-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_lt</span>(</span>
<span id="cb17-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(random_normal))),</span>
<span id="cb17-11">      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span></span>
<span id="cb17-12">    )</span>
<span id="cb17-13">    </span>
<span id="cb17-14">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Expect that the stddev of the transformed data is within</span></span>
<span id="cb17-15">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 0.005 of 1</span></span>
<span id="cb17-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_lt</span>(</span>
<span id="cb17-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(random_normal))),</span>
<span id="cb17-18">      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span></span>
<span id="cb17-19">    )</span>
<span id="cb17-20">    </span>
<span id="cb17-21">    <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Expect that the math is done correctly</span></span>
<span id="cb17-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_identical</span>(</span>
<span id="cb17-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb17-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-25">    )</span>
<span id="cb17-26">  })</span>
<span id="cb17-27">  </span>
<span id="cb17-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inifinity causes an error"</span>, {</span>
<span id="cb17-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_error</span>(</span>
<span id="cb17-30">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)),</span>
<span id="cb17-31">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must not contain any infinite values"</span></span>
<span id="cb17-32">    )</span>
<span id="cb17-33">  })</span>
<span id="cb17-34">  </span>
<span id="cb17-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zero stddev causes an error"</span>, {</span>
<span id="cb17-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_error</span>(</span>
<span id="cb17-37">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb17-38">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have a non-zero standard deviation"</span></span>
<span id="cb17-39">    )</span>
<span id="cb17-40">  })</span>
<span id="cb17-41">  </span>
<span id="cb17-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Length one causes an error"</span>, {</span>
<span id="cb17-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_error</span>(</span>
<span id="cb17-44">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb17-45">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have more than one unique element"</span></span>
<span id="cb17-46">    )</span>
<span id="cb17-47">  })</span>
<span id="cb17-48">}</span></code></pre></div>
</div>
<p>And now let’s run our test suite.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-15_f3981b5864d544f963cae4722f3e8480">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🥳
── Failure (&lt;text&gt;:29:5): Inifinity causes an error ────────────────────────────
`create_feature(c(1, 2, 3/0))` did not throw an error.</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>Error in `reporter$stop_if_needed()`:
! Test failed</code></pre>
</div>
</div>
<p>Unsurprisingly, we get some failures. So now let’s refactor our feature engineering function to pass our tests.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-16_a73c51c5b2a787a6ae1a655434346bc3">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb21-2"></span>
<span id="cb21-3">create_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb21-4">  </span>
<span id="cb21-5">  mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb21-6">  sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb21-7"></span>
<span id="cb21-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have a non-zero standard deviation."</span>)</span>
<span id="cb21-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> 1L)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have more than one unique element."</span>)</span>
<span id="cb21-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.nan</span>(x)))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must not contain any `NaN` values."</span>)</span>
<span id="cb21-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.infinite</span>(x)))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must not contain any infinite values."</span>)</span>
<span id="cb21-12"></span>
<span id="cb21-13">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma</span>
<span id="cb21-14">}</span>
<span id="cb21-15"></span>
<span id="cb21-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🥳
Test passed 🥳
Test passed 🥳
Test passed 🥳</code></pre>
</div>
</div>
<p>Woohoo! Our tests all passed. Now, if the user of our function tries to do something like only providing a single value for <code>x</code>, they get an informative error back.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-17_19da53894d89db6c1f9cf12905f7fca1">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `create_feature()`:
! `x` must have more than one unique element.</code></pre>
</div>
</div>
<p>In a less trivial example, consider our grouped computation from before:</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-18_4f030a334d25f2c3e8643902d66d4d59">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb25-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb25-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb25-4">)</span>
<span id="cb25-5"></span>
<span id="cb25-6">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb25-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value_std =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_feature</span>(value)</span>
<span id="cb25-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>Error in `mutate()`:
ℹ In argument: `value_std = create_feature(value)`.
ℹ In group 1: `group = 1`.
Caused by error in `create_feature()`:
! `x` must have more than one unique element.</code></pre>
</div>
</div>
<p>Not only do we get a helpful error, but in this particular case <code>dplyr</code> also adds helpful context: It tells us which step failed and which group it failed on so that we can effectively debug.</p>
</section>
</section>
<section id="refactoring" class="level2">
<h2 class="anchored" data-anchor-id="refactoring">Refactoring</h2>
<p>Now that we have a test suite, we can also refactor our function and be much more confident that we haven’t broken anything. Let’s do an overly complicated refactor.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-19_939f340cf3b4d95e2e88831c4af67082">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">create_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb27-2">  </span>
<span id="cb27-3">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Compute the mean as the sum of the non-null elements </span></span>
<span id="cb27-4">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## divided by the number of non-null elements</span></span>
<span id="cb27-5">  mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(x))</span>
<span id="cb27-6">  sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb27-7"></span>
<span id="cb27-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have a non-zero standard deviation."</span>)</span>
<span id="cb27-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> 1L)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must have more than one unique element."</span>)</span>
<span id="cb27-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.nan</span>(x)))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must not contain any `NaN` values."</span>)</span>
<span id="cb27-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTRUE</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.infinite</span>(x)))) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`x` must not contain any infinite values."</span>)</span>
<span id="cb27-12"></span>
<span id="cb27-13">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sigma</span>
<span id="cb27-14">}</span></code></pre></div>
</div>
<p>And now let’s run our tests again.</p>
<div class="cell" data-layout-align="center" data-hash="unit-testing_cache/html/unnamed-chunk-20_e2a30e02b399e6ee2fe3cfc2cf4bbe95">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🥳
Test passed 🥳
Test passed 🥳
Test passed 🥇</code></pre>
</div>
</div>
<p>Awesome! We just did a simple refactor and our tests passed, so I feel good about the correctness of that refactor. This was a very simple example, but you could imagine arbitrarily complex refactors. The value of a test suite increases exponentially as the complexity of the code increases.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>There are a few important takeaways from this post.</p>
<p>First and most importantly, it’s important to test your code. There are so many ways that things can go wrong, and writing tests is the only way to really be confident that nothing is. This is especially true in dynamically typed, interpreted languages like R or Python, where data scientists don’t get the benefits of a compiler or a static type system to catch bugs in their code.</p>
<p>Second, analytical code that’s well-written should be easy to test. Ultimately, lots of the code we write for analytics work takes some data, does something to it, and returns some new data. That type of logic makes for a great use case for unit testing: If your code doesn’t produce the values you expect, it’s incorrect.</p>
<p>Lastly, there are many tools in Python (<code>pytest</code>, <code>unittest</code>, etc.) and R (<code>testthat</code>) to make unit testing as simple as writing a few lines of logic and an assertion or two. And then you get all the benefits of having well-tested code, such as the newly-found ease of refactoring said code without being concerned about breaking it.</p>
<p>Happy testing, and enjoy the peace of mind!</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-03-unit-testing/unit-testing.html</guid>
  <pubDate>Wed, 05 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Writing Internal Libraries for Analytics Work</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-01-library-code/library-code.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>This post is part of a series called <a href="https://matthewrkaye.com/series.html#the-missing-semester-of-your-ds-education">The Missing Semester of Your DS Education</a>.</p>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>By definition, library code is code that’s written to being reused by programs other than itself that are unrelated to each other. For instance, <code>dplyr</code> (R) and <code>pandas</code> (Python) are common examples of library code: Instead of writing code from scratch to work with tabular data, you might use one of those two fantastic libraries. And you get some additional benefits from using them:</p>
<ol type="1">
<li>Those libraries are well-documented, so it’s easy to figure out how to use them.</li>
<li>They’re well-tested, so you (presumably) know that bugs are less likely than if you were to try to write the same functionality from scratch.</li>
<li>They’re (relatively) performant.</li>
<li>They’re widely used, so it’s easy to find answers to questions and get help from the communities using them.</li>
</ol>
</section>
<section id="a-common-library" class="level2">
<h2 class="anchored" data-anchor-id="a-common-library">A Common Library</h2>
<p>At CollegeVine, we have <code>collegeviner</code>: An R package containing a lot of code that we use very often for all kinds of analytics projects. Some things that live in <code>collegeviner</code> include:</p>
<ol type="1">
<li>Plot theming code, so that we can consistently theme graphics across all of our work.</li>
<li>A custom implementation of item-based collaborative filtering, which is core to our school recommendation system.</li>
<li><code>DBI</code> and <code>aws.s3</code> wrappers for connecting to and querying our databases and working with data in S3.</li>
<li>Helper methods for common math we do, such as converting between odds, log-odds, and probabilities.</li>
<li>Miscellaneous helper code for things that don’t exist natively in R, such as <code>yeet</code> for removing an item from a list and <code>%notin%</code>, the inverse of the <code>%in%</code> operator.</li>
<li>An implementation of the Brier Skill Score, which is a metric we often use for evaluating classification models.</li>
<li>A lot more!</li>
</ol>
<p>You might think of <code>collegeviner</code> as being a common library of things that our team does often, so we don’t need to repeat ourselves or reinvent the wheel.</p>
<section id="a-toy-example" class="level3">
<h3 class="anchored" data-anchor-id="a-toy-example">A Toy Example</h3>
<p>Let’s imagine that you’re setting up a common library (in this example, an R package) for your team. The first thing you might want to do is have some logic to help your team connect to your data warehouse. For this example, let’s just imagine that “warehouse” is your local Postgres instance. Then, you might write a method for your library called <code>connect_to_dwh</code> like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DBI)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(httr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RPostgres)</span>
<span id="cb1-5"></span>
<span id="cb1-6">connect_to_dwh <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">url =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.getenv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATA_WAREHOUSE_URL"</span>)) {</span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (url <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You must specify a dwh URL."</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_installed</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"httr"</span>)</span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_installed</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RPostgres"</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12">  db_params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_url</span>(url)</span>
<span id="cb1-13"></span>
<span id="cb1-14">  db_drv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Postgres</span>()</span>
<span id="cb1-15">  db_user <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>username</span>
<span id="cb1-16">  db_password <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>password</span>
<span id="cb1-17">  db_host <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hostname</span>
<span id="cb1-18">  db_port <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>port <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%||%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span></span>
<span id="cb1-19">  db_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> db_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>path</span>
<span id="cb1-20"></span>
<span id="cb1-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbConnect</span>(</span>
<span id="cb1-22">    db_drv,</span>
<span id="cb1-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dbname =</span> db_name,</span>
<span id="cb1-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">host =</span> db_host,</span>
<span id="cb1-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">port =</span> db_port,</span>
<span id="cb1-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">user =</span> db_user,</span>
<span id="cb1-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password =</span> db_password</span>
<span id="cb1-28">  )</span>
<span id="cb1-29">}</span></code></pre></div>
</div>
<p>Now you have a single function that your whole team can share to connect to your data warehouse, assuming that they can provide the connection string. Let’s test out how the workflow might look for querying data now.</p>
<section id="connecting" class="level4">
<h4 class="anchored" data-anchor-id="connecting">Connecting</h4>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DATA_WAREHOUSE_URL =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgresql://localhost:5432/postgres"</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3">conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">connect_to_dwh</span>()</span></code></pre></div>
</div>
<p>And that’s it! You’re connected. You can now query away using <code>dbGetQuery()</code>, a custom wrapper, <code>dbplyr</code>, or any other method of choice.</p>
</section>
<section id="querying" class="level4">
<h4 class="anchored" data-anchor-id="querying">Querying</h4>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Put some data into the warehouse for example purposes</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWriteTable</span>(conn, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Id</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">schema =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blog"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">table =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iris"</span>), janitor<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>(iris))</span>
<span id="cb3-3"></span>
<span id="cb3-4">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb3-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  SELECT species, MAX(sepal_length) AS max_sepal_length</span></span>
<span id="cb3-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  FROM blog.iris</span></span>
<span id="cb3-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  GROUP BY species</span></span>
<span id="cb3-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ORDER BY 2 DESC</span></span>
<span id="cb3-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  "</span></span>
<span id="cb3-12">)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>(result)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">max_sepal_length</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">virginica</td>
<td style="text-align: right;">7.9</td>
</tr>
<tr class="even">
<td style="text-align: left;">versicolor</td>
<td style="text-align: right;">7.0</td>
</tr>
<tr class="odd">
<td style="text-align: left;">setosa</td>
<td style="text-align: right;">5.8</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
<section id="testing" class="level4">
<h4 class="anchored" data-anchor-id="testing">Testing</h4>
<p>It’s also important to test your code. <code>testthat</code> makes writing unit tests for your new <code>connect_to_dwh</code> function very simple.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(testthat)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Connecting works as expected"</span>, {</span>
<span id="cb4-4">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This should error because the URL is empty</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_error</span>(</span>
<span id="cb4-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">connect_to_dwh</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>),</span>
<span id="cb4-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You must specify a dwh URL"</span></span>
<span id="cb4-8">  )</span>
<span id="cb4-9">  </span>
<span id="cb4-10">  conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">connect_to_dwh</span>()</span>
<span id="cb4-11"></span>
<span id="cb4-12">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Should return a PqConnection object</span></span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_s4_class</span>(conn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PqConnection"</span>)</span>
<span id="cb4-14">  </span>
<span id="cb4-15">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Should be able to query an example table</span></span>
<span id="cb4-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_equal</span>(</span>
<span id="cb4-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(conn, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT COUNT(*) FROM blog.iris"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>count,</span>
<span id="cb4-18">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span></span>
<span id="cb4-19">  )</span>
<span id="cb4-20">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🎊</code></pre>
</div>
</div>
</section>
<section id="versioning" class="level4">
<h4 class="anchored" data-anchor-id="versioning">Versioning</h4>
<p>Lastly, it’s important to <em>version</em> your code. <a href="https://semver.org/#semantic-versioning-200">Semantic Versioning</a> (SemVer) is a very common standard for versioning library code. In R specifically, you can read about versioning in <a href="https://r-pkgs.org/lifecycle.html">Chapter 22 of <em>R Packages</em></a>.</p>
<p>In our toy example, this means that if you change how the logic of your <code>connect_to_dwh</code> function works, you should change the version of your package so that your users (your teammates) don’t get blindsided by your change. Incrementing your package’s version shows your teammates that something has changed in your library, and they can update their code to rely on the latest version (if they wish), or continue using the current version they’re on, or anything else.</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>Note that being able to control which version of a library your code is using requires some manner of managing dependencies. In R, I would highly recommend <a href="https://rstudio.github.io/renv/articles/renv.html">renv</a>. In Python, I like <a href="https://python-poetry.org/">Poetry</a>.</p>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="one-library-per-model" class="level2">
<h2 class="anchored" data-anchor-id="one-library-per-model">One Library Per Model</h2>
<p>In addition to a common library for sharing code that’s very often used across the data org, our team has also gotten into the habit of having a library per ML model in production. This definition can be a bit flexible (both in terms of what “ML model” means, and also what “production” means), but the basic principle should be the same: ML in production requires at least some training logic and some monitoring logic. It’s a good idea to share code between those two things. Let’s consider another simple example.</p>
<section id="iris-species-prediction" class="level3">
<h3 class="anchored" data-anchor-id="iris-species-prediction">Iris Species Prediction</h3>
<p>Let’s imagine that we work for a florist. On our website, we have a service where someone can provide some measurements about an iris (either a setosa or a virginica), as we’ll tell them which of the two we think it is. We know we’ll want to retrain the model periodically as we get more data, and we’ll also want to monitor how our model performs out-of-sample. Both training the model and monitoring will require some shared logic: loading raw data, doing feature engineering, and making predictions. So it would make sense to have those two jobs rely on a single library, as opposed to needing to repeat the logic. Let’s write that library here.</p>
<section id="fetching-the-data" class="level4">
<h4 class="anchored" data-anchor-id="fetching-the-data">Fetching the Data</h4>
<p>First, let’s write a method to fetch the raw data from our data warehouse. In practice, it probably makes sense to factor out the SQL here into individual SQL scripts, but for this example I’ll just include the SQL directly as a string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fetch_raw_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(conn) {</span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb6-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT *</span></span>
<span id="cb6-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM blog.iris</span></span>
<span id="cb6-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    WHERE species IN ('setosa', 'virginica')</span></span>
<span id="cb6-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    "</span></span>
<span id="cb6-9">  )</span>
<span id="cb6-10">}</span></code></pre></div>
</div>
</section>
<section id="feature-engineering" class="level4">
<h4 class="anchored" data-anchor-id="feature-engineering">Feature Engineering</h4>
<p>Next, let’s write some methods to create features.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">create_sepal_length_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(sepal_length) {</span>
<span id="cb7-2">  sepal_length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(sepal_length))</span>
<span id="cb7-3">}</span>
<span id="cb7-4"></span>
<span id="cb7-5">create_petal_width_feature <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(petal_width) {</span>
<span id="cb7-6">  petal_width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgamma</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(petal_width), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-7">}</span></code></pre></div>
</div>
<p>And then we can write a function to take our raw data, run the feature engineering steps, and return the features.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">create_features <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(raw_data) {</span>
<span id="cb8-2">  sepal_length <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_sepal_length_feature</span>(raw_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sepal_length)</span>
<span id="cb8-3">  petal_width <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_petal_width_feature</span>(raw_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>petal_width)</span>
<span id="cb8-4">  is_setosa <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> raw_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"setosa"</span></span>
<span id="cb8-5">  </span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb8-7">    sepal_length,</span>
<span id="cb8-8">    petal_width,</span>
<span id="cb8-9">    is_setosa</span>
<span id="cb8-10">  )</span>
<span id="cb8-11">}</span></code></pre></div>
</div>
</section>
<section id="model-fitting-and-prediction" class="level4">
<h4 class="anchored" data-anchor-id="model-fitting-and-prediction">Model Fitting and Prediction</h4>
<p>Next, let’s write methods to fit the model and make predictions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">fit_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(features) {</span>
<span id="cb9-2">  formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> is_setosa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sepal_length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> petal_width</span>
<span id="cb9-3"></span>
<span id="cb9-4">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Dynamically extract the variables in the formula</span></span>
<span id="cb9-5">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## so we don't need to repeat ourselves</span></span>
<span id="cb9-6">  predictors <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labels</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">terms</span>(formula)))</span>
<span id="cb9-7">  target <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(formula[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb9-8">  </span>
<span id="cb9-9">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Very basic error handling</span></span>
<span id="cb9-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(predictors, target) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(features))) {</span>
<span id="cb9-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Some required columns were missing from `features`"</span>)</span>
<span id="cb9-12">  }</span>
<span id="cb9-13">  </span>
<span id="cb9-14">  model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(</span>
<span id="cb9-15">    formula,</span>
<span id="cb9-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> features,</span>
<span id="cb9-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial</span>
<span id="cb9-18">  )</span>
<span id="cb9-19">  </span>
<span id="cb9-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(model) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"irises"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(model))</span>
<span id="cb9-21">  </span>
<span id="cb9-22">  model</span>
<span id="cb9-23">}</span>
<span id="cb9-24"></span>
<span id="cb9-25">predict.irises <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, ...) {</span>
<span id="cb9-26">  probs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict.glm</span>(</span>
<span id="cb9-27">    object,</span>
<span id="cb9-28">    newdata,</span>
<span id="cb9-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span></span>
<span id="cb9-30">  )</span>
<span id="cb9-31">  </span>
<span id="cb9-32">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## If the predicted probability is &gt; 50%,</span></span>
<span id="cb9-33">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## return `true`, else return `false`</span></span>
<span id="cb9-34">  probs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span></span>
<span id="cb9-35">}</span></code></pre></div>
</div>
</section>
<section id="model-evaluation" class="level4">
<h4 class="anchored" data-anchor-id="model-evaluation">Model Evaluation</h4>
<p>And finally, let’s add a function to compute the model’s accuracy on some evaluation data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">compute_accuracy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(prediction, is_setosa) {</span>
<span id="cb10-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(prediction <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> is_setosa) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(prediction)</span>
<span id="cb10-3">}</span></code></pre></div>
</div>
</section>
<section id="testing-1" class="level4">
<h4 class="anchored" data-anchor-id="testing-1">Testing</h4>
<p>It’s important to note that all of the methods above can and should be unit tested in the same way we tested our helper for connecting to the database. Testing is a great way to ensure the correctness of your code and make it more maintainable by making it easier to refactor in the future, and putting all of your modeling logic into a library like this makes it very easy to test. For instance, here’s how you might write a couple of unit tests for the petal width feature.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test_that</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Petal width feature is created correctly"</span>, {</span>
<span id="cb11-2">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## The feature should be positive even when the</span></span>
<span id="cb11-3">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## petal width is zero, since we're adding gamma</span></span>
<span id="cb11-4">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## random noise.</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_gt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_petal_width_feature</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-6">  </span>
<span id="cb11-7">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## It should be extremely unlikely that a single </span></span>
<span id="cb11-8">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## draw from a gamma(2) is &gt;10, which means this</span></span>
<span id="cb11-9">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## feature should be &lt; 10 when the input is 0 in </span></span>
<span id="cb11-10">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## the vast majority of cases.</span></span>
<span id="cb11-11">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##</span></span>
<span id="cb11-12">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">: This is by definition a brittle test, and</span></span>
<span id="cb11-13">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## I wouldn't recommend writing tests that are</span></span>
<span id="cb11-14">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## probabilistic like this in practice unless</span></span>
<span id="cb11-15">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## you really need to. If you do, this will</span></span>
<span id="cb11-16">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## fail _some_ of the time, at random, even</span></span>
<span id="cb11-17">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## if "some" is a very small percentage.</span></span>
<span id="cb11-18">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(</span>
<span id="cb11-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), </span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb11-21">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expect_lt</span>(</span>
<span id="cb11-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_petal_width_feature</span>(x),</span>
<span id="cb11-23">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb11-24">      )</span>
<span id="cb11-25">    } </span>
<span id="cb11-26">  )</span>
<span id="cb11-27">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test passed 🥳</code></pre>
</div>
</div>
</section>
</section>
<section id="a-retraining-job" class="level3">
<h3 class="anchored" data-anchor-id="a-retraining-job">A Retraining Job</h3>
<p>Great! Now that we have all of that library code written, we can package it up into a retraining job. A very simple training job might look like this:</p>
<p>First, connect to the data warehouse</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">conn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">connect_to_dwh</span>()</span></code></pre></div>
</div>
<p>Next, fetch the raw data from the warehouse that we need to train the model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_raw_data</span>(conn)</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(raw))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">sepal_length</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">sepal_width</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">petal_length</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">petal_width</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">species</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">5.1</td>
<td style="text-align: right;">3.5</td>
<td style="text-align: right;">1.4</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="even">
<td style="text-align: right;">4.9</td>
<td style="text-align: right;">3.0</td>
<td style="text-align: right;">1.4</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="odd">
<td style="text-align: right;">4.7</td>
<td style="text-align: right;">3.2</td>
<td style="text-align: right;">1.3</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="even">
<td style="text-align: right;">4.6</td>
<td style="text-align: right;">3.1</td>
<td style="text-align: right;">1.5</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5.0</td>
<td style="text-align: right;">3.6</td>
<td style="text-align: right;">1.4</td>
<td style="text-align: right;">0.2</td>
<td style="text-align: left;">setosa</td>
</tr>
<tr class="even">
<td style="text-align: right;">5.4</td>
<td style="text-align: right;">3.9</td>
<td style="text-align: right;">1.7</td>
<td style="text-align: right;">0.4</td>
<td style="text-align: left;">setosa</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Next, create the features from the raw data by running the feature engineering pipeline.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">features <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_features</span>(raw)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(features))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">sepal_length</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">petal_width</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">is_setosa</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">6.609</td>
<td style="text-align: right;">0.749</td>
<td style="text-align: left;">TRUE</td>
</tr>
<tr class="even">
<td style="text-align: right;">5.557</td>
<td style="text-align: right;">2.572</td>
<td style="text-align: left;">TRUE</td>
</tr>
<tr class="odd">
<td style="text-align: right;">6.334</td>
<td style="text-align: right;">1.066</td>
<td style="text-align: left;">TRUE</td>
</tr>
<tr class="even">
<td style="text-align: right;">5.913</td>
<td style="text-align: right;">2.706</td>
<td style="text-align: left;">TRUE</td>
</tr>
<tr class="odd">
<td style="text-align: right;">6.371</td>
<td style="text-align: right;">3.431</td>
<td style="text-align: left;">TRUE</td>
</tr>
<tr class="even">
<td style="text-align: right;">4.344</td>
<td style="text-align: right;">1.518</td>
<td style="text-align: left;">TRUE</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Then fit a model using the features.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_model</span>(features)</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(model))</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th"></th>
<th style="text-align: right;" data-quarto-table-cell-role="th">x</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">(Intercept)</td>
<td style="text-align: right;">17.452</td>
</tr>
<tr class="even">
<td style="text-align: left;">sepal_length</td>
<td style="text-align: right;">-1.927</td>
</tr>
<tr class="odd">
<td style="text-align: left;">petal_width</td>
<td style="text-align: right;">-1.881</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Finally, evaluate the performance of the model by making predictions and computing the accuracy of those predictions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model)</span>
<span id="cb17-2">accuracy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_accuracy</span>(preds, features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>is_setosa)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model accuracy is "</span>, accuracy, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Model accuracy is 91%</code></pre>
</div>
</div>
<p>And that’s it – you have a simple retraining job. This is a very minimal example, but this general framework is very flexible and modular, and it makes up the foundation for how we write our retraining jobs at CollegeVine. You can plug and play all different kinds of feature engineering logic, logic to fetch raw data, metrics, etc. We also use <a href="https://mlflow.org/">MLFlow</a> for versioning models and tracking experiments, so our retraining jobs have lots of logging of artifacts, parameters, and metrics to our MLFlow instance.</p>
</section>
<section id="a-monitoring-job" class="level3">
<h3 class="anchored" data-anchor-id="a-monitoring-job">A Monitoring Job</h3>
<p>Next, let’s imagine we want to monitor out-of-sample performance of the model. Let’s modify the table with our raw data in the database for this, just for the sake of an example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">transaction_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbWithTransaction</span>(</span>
<span id="cb19-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb19-3">  {</span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbExecute</span>(</span>
<span id="cb19-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb19-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb19-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      ALTER TABLE blog.iris</span></span>
<span id="cb19-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      ADD COLUMN created_at TIMESTAMP</span></span>
<span id="cb19-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      "</span></span>
<span id="cb19-10">    )</span>
<span id="cb19-11">    </span>
<span id="cb19-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbExecute</span>(</span>
<span id="cb19-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb19-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb19-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      UPDATE blog.iris</span></span>
<span id="cb19-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      SET created_at = NOW() - random() * INTERVAL '2 weeks'</span></span>
<span id="cb19-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      "</span></span>
<span id="cb19-18">    )</span>
<span id="cb19-19">  }</span>
<span id="cb19-20">)</span></code></pre></div>
</div>
<p>Great, and now let’s make one or two small modifications to our code from above that pulled the raw data from the data warehouse.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">fetch_raw_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(conn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">created_after =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1970-01-01 00:00:00'</span>) {</span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dbGetQuery</span>(</span>
<span id="cb20-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conn =</span> conn,</span>
<span id="cb20-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(</span>
<span id="cb20-5">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb20-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      SELECT *</span></span>
<span id="cb20-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      FROM blog.iris</span></span>
<span id="cb20-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      WHERE </span></span>
<span id="cb20-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        species IN ('setosa', 'virginica')</span></span>
<span id="cb20-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        AND created_at &gt; '%s'</span></span>
<span id="cb20-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      "</span>,</span>
<span id="cb20-12">      created_after</span>
<span id="cb20-13">    )</span>
<span id="cb20-14">  )</span>
<span id="cb20-15">}</span></code></pre></div>
</div>
<p>All we’ve done here is added the ability to specify a <code>created_at</code> date to use as the cutoff point, where we’d only include records in our raw data that were created after said point. In practice, this lets us filter our raw data down to only records that were created after the model was trained (the out-of-sample data).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## In practice, this would be set at training time and "frozen"</span></span>
<span id="cb21-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## possibly by logging the value as a parameter in the MLFlow run</span></span>
<span id="cb21-3">model_trained_at <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_raw_data</span>(conn)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>created_at)</span></code></pre></div>
</div>
<p>And now that we’ve artificially created a <code>trained_at</code> date for the model, we can run our monitoring job. It’s quite simple, and very similar to the retraining job. All we do here is pull raw data that has been created since the model was trained, run the feature engineering pipeline, make predictions, and compute the accuracy of the model out-of-sample.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">raw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_raw_data</span>(conn, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">created_after =</span> model_trained_at)</span>
<span id="cb22-2"></span>
<span id="cb22-3">features <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_features</span>(raw)</span>
<span id="cb22-4">predictions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, features)</span>
<span id="cb22-5"></span>
<span id="cb22-6">accuracy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_accuracy</span>(predictions, features<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>is_setosa)</span>
<span id="cb22-7"></span>
<span id="cb22-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Out-of-sample accuracy is "</span>, accuracy, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Out-of-sample accuracy is 76%</code></pre>
</div>
</div>
</section>
</section>
<section id="tying-it-together" class="level2">
<h2 class="anchored" data-anchor-id="tying-it-together">Tying it Together</h2>
<p>The key piece to notice is how much we’re leveraging our library code in both the retraining and monitoring job. In both cases, we’re doing some very similar things – pulling raw data, creating features, making predictions, computing accuracy – so it makes a lot of sense that we’d want to reuse the code for those two jobs.</p>
<p>There might also be more use cases for the code: More retraining or monitoring jobs, REST APIs, ETL jobs, etc. The more times you need to rely on the same logic, the more benefit you’ll derive from having a single source of truth for all of the logic for your modeling process.</p>
<p>It also might be useful to separate this library from the common library proposed at the start. There are important tradeoffs to consider: On one hand, a single library might be convenient for having all of your logic in a single place. But on the other hand, as your library grows in scope, it’ll necessarily have a bigger footprint, rely on more dependencies, etc. which will make its use and maintenance more difficult. A happy middle ground for us has been having a single library per “model” or use case. For instance, at CollegeVine we have a package called <code>mlchancing</code> for our <a href="https://www.collegevine.com/admissions-calculator">chancing model</a> and a separate package called <code>schoolrecommendr</code> for school recommendations and affinity scoring. Keeping these separate has made it easier to iterate on each model individually while also not being a maintenance or ramp-up headache.</p>
<p>It’s my view that models and other analytics work that is in production is software, and should be treated as such. If a model is going to be shipped to production, it at the <em>very least</em> needs to be tested, documented, versioned, and put through some kind of CI/CD process. It’d be even better if it’s monitored automatically so that the data scientists working on it can be notified quickly if things start going wrong. Ultimately, writing library code for your modeling work is very well-suited to meeting all of these expectations. And it also just makes everyone’s lives easier by not needing to reinvent the wheel all the time.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/series/doing-data-science/2023-04-01-library-code/library-code.html</guid>
  <pubDate>Sat, 01 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Balancing Classes in Classification Problems</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="https://matthewrkaye.com/posts/2023-03-20-metrics-calibration/calibration.html">my last post</a> I wrote about common classifications metrics and, especially, calibration.</p>
<p>With calibration in mind, this post will show why balancing your classes – which is an all-too-common practice when working on classification problems – is generally a bad idea and leads to poorly calibrated models.</p>
</section>
<section id="some-example-data" class="level2">
<h2 class="anchored" data-anchor-id="some-example-data">Some Example Data</h2>
<p>For the purposes of this example, I’ll use the Wisconsin breast cancer data. The data is built into the <code>mlbench</code> package in R and <code>scikit-learn</code> in python. You can also get it from the <a href="https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+(Diagnostic)">UCI Machine Learning Repository</a>.</p>
<p>I’ll only be using <code>cl_thickness</code>, which is the indicator for clump thickness.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-2_2d07da233c515f06e9ba17c34c77b64e">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janitor)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mlbench)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data</span>(BreastCancer)</span>
<span id="cb1-8"></span>
<span id="cb1-9">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> BreastCancer <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(</span>
<span id="cb1-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cl_thickness =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(cl_thickness), </span>
<span id="cb1-13">    class</span>
<span id="cb1-14">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb1-16"></span>
<span id="cb1-17">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">cl_thickness</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">benign</td>
</tr>
<tr class="even">
<td style="text-align: right;">3</td>
<td style="text-align: left;">benign</td>
</tr>
<tr class="odd">
<td style="text-align: right;">5</td>
<td style="text-align: left;">malignant</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: left;">benign</td>
</tr>
<tr class="odd">
<td style="text-align: right;">1</td>
<td style="text-align: left;">benign</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>The data is imbalanced: There are far more (about 2x) benign tumors than malignant ones in the sample.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-3_52ea88dedd038573a8a6f2ef94ce554e">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prop =</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">class</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">n</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">prop</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">benign</td>
<td style="text-align: right;">458</td>
<td style="text-align: right;">0.6552217</td>
</tr>
<tr class="even">
<td style="text-align: left;">malignant</td>
<td style="text-align: right;">241</td>
<td style="text-align: right;">0.3447783</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
<section id="model-fitting" class="level2">
<h2 class="anchored" data-anchor-id="model-fitting">Model Fitting</h2>
<p>With that class imbalance in mind, let’s get to model fitting. The first thing I’ll do is fit a simple logistic regression model to predict the class (either malignant or benign) from the clump thickness.</p>
<p>First, I’ve written a bit of <code>tidymodels</code> helper code below for reuse later.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-4_4dc844657887e02084b5bd5224e2a415">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidymodels)</span>
<span id="cb3-2"></span>
<span id="cb3-3">fit_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, spec) {</span>
<span id="cb3-4">  spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_mode</span>(spec, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classification"</span>)</span>
<span id="cb3-5">  </span>
<span id="cb3-6">  rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(</span>
<span id="cb3-7">    class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cl_thickness,</span>
<span id="cb3-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data</span>
<span id="cb3-9">  )</span>
<span id="cb3-10">  </span>
<span id="cb3-11">  wf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">workflow</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_model</span>(spec) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_recipe</span>(rec)</span>
<span id="cb3-14">  </span>
<span id="cb3-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit</span>(wf, data)</span>
<span id="cb3-16">}</span>
<span id="cb3-17"></span>
<span id="cb3-18">predict_prob <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(model, data) {</span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model, data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"prob"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.pred_malignant</span>
<span id="cb3-20">}</span></code></pre></div>
</div>
<p>Now, I’ll fit a simple logistic regression model by specifying <code>logistic_reg()</code> as the model specification in <code>fit_model()</code>.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-5_5ddb90f924073d8a54cad67b62f080c3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(probably)</span>
<span id="cb4-2"></span>
<span id="cb4-3">unbalanced_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_model</span>(</span>
<span id="cb4-4">  data,</span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logistic_reg</span>()</span>
<span id="cb4-6">)</span>
<span id="cb4-7"></span>
<span id="cb4-8">preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class,</span>
<span id="cb4-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth_int =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict_prob</span>(unbalanced_model, data)</span>
<span id="cb4-12">)</span></code></pre></div>
</div>
<p>And now we can make a calibration plot of our predictions. Remember, the goal is to have the points on the plot lie roughly along the line <code>y = x</code>. Lying below the line means that our predictions are too high, and above the line means our predictions are too low.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-6_20a805dbf7b4dfcacd10ad444a4c3c16">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cal_plot_breaks</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> truth_int, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> estimate)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Awesome! Even with the class imbalance, our model’s probability predictions are well-calibrated. In other words, when we predict that there’s a 25% chance that a tumor is malignant, it’s actually malignant about 25% of the time.</p>
</section>
<section id="balancing-the-training-data" class="level2">
<h2 class="anchored" data-anchor-id="balancing-the-training-data">Balancing the Training Data</h2>
<p>So then, what happens if we balance the training data as we’re so often told to do? First, let’s balance by undersampling from the majority class.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-7_2380b25282112c841a0375cfc3ca3e14">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">minority_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(n))</span>
<span id="cb6-4"></span>
<span id="cb6-5">balanced <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_split</span>(class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keep =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb6-8">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> {</span>
<span id="cb6-9">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (.x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> minority_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class) {</span>
<span id="cb6-10">        .x</span>
<span id="cb6-11">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb6-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(</span>
<span id="cb6-13">          .x,</span>
<span id="cb6-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> minority_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n,</span>
<span id="cb6-15">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb6-16">        )</span>
<span id="cb6-17">      }</span>
<span id="cb6-18">    }</span>
<span id="cb6-19">  )</span>
<span id="cb6-20"></span>
<span id="cb6-21">balanced <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb6-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">class</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">n</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">benign</td>
<td style="text-align: right;">241</td>
</tr>
<tr class="even">
<td style="text-align: left;">malignant</td>
<td style="text-align: right;">241</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now we have the same number of observations for each class. Let’s go ahead and fit another logistic regression model, but this time on the balanced data.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-8_735757caafdc44ca11c2c7594b73d407">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">balanced_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_model</span>(balanced, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logistic_reg</span>())</span>
<span id="cb7-2"></span>
<span id="cb7-3">preds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balanced_preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict_prob</span>(</span>
<span id="cb7-4">  balanced_model,</span>
<span id="cb7-5">  data</span>
<span id="cb7-6">)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cal_plot_breaks</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> truth_int, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> balanced_preds)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>All of a sudden, our model is very poorly calibrated. We’re consistently overpredicting the probability of a tumor being malignant. Why is that? Think back to what we just did: We removed a bunch of examples of benign tumors from our training data.</p>
<p>Let’s think about that from first principles for a minute. If you had no information at all, a reasonable guess for whether or not a tumor is malignant would be the overall proportion of tumors that are malignant. In the unbalanced data, that number was about 34%. But after balancing, it’s now 50%. That means that we’ve just biased our “no-information” prediction upwards by about 16 percentage points (or 50%). And so it shouldn’t be surprising that in our calibration plot above, we see that we’re consistently over-predicting. Our probabilities are too high because the baseline rate at which the true class appears in our training data has just increased significantly.</p>
<blockquote class="blockquote">
<p>An important note which I’ll circle back to later is that this intuition about a baseline guess is directly rated to the intercept term of the logistic regression model you fit.</p>
</blockquote>
</section>
<section id="smote" class="level2">
<h2 class="anchored" data-anchor-id="smote">SMOTE</h2>
<p>“But no!” you might be thinking. “Why would you just undersample directly? You’re supposed to use an algorithm like SMOTE to overcome your class imbalance problem.”</p>
<p>Great! Let’s see if using SMOTE fixes our calibration issues. I’ll first use SMOTE to intelligently oversample the minority class.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-9_b45531424bf2bcd7f30a57e581010e5a">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(themis)</span>
<span id="cb8-2"></span>
<span id="cb8-3">smote <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cl_thickness, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_smote</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bake</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_data =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb8-7"></span>
<span id="cb8-8">smote <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">class</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">n</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">benign</td>
<td style="text-align: right;">458</td>
</tr>
<tr class="even">
<td style="text-align: left;">malignant</td>
<td style="text-align: right;">458</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now that we have balanced classes thanks to SMOTE, let’s fit another logistic regresion model and see if it’s any better-calibrated.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-10_6b34fe011f168962a48acd30cbdb7259">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">smote_model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_model</span>(smote, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logistic_reg</span>())</span>
<span id="cb9-2"></span>
<span id="cb9-3">preds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>smote_preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict_prob</span>(</span>
<span id="cb9-4">  smote_model,</span>
<span id="cb9-5">  data</span>
<span id="cb9-6">)</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cal_plot_breaks</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> truth_int, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> smote_preds)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Interesting – same problem. With SMOTE, we still make very similar errors to the ones we made in the case where we naively undersampled from our majority class. But let’s think back to first principles again, because the exact same rationale applies. When we undersampled, we ended up artificially increasing the baseline rate of malignant tumors in our training data, which resulted in predictions that were too high. With SMOTE, we’re doing the exact same thing: We’ve stil rebalanced our data to 50/50, we’ve just done it a fancier way. So of course we’ll have the same problem with overprediction.</p>
</section>
<section id="a-random-forest" class="level2">
<h2 class="anchored" data-anchor-id="a-random-forest">A Random Forest</h2>
<p>“But no!” you might be thinking. “You need to use a more complicated model like a random forest, because logistic regression won’t pick up on complexities in your data well enough to be well-calibrated.”</p>
<p>Great! Let’s try a random forest:</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-11_1a783e29f38834cc1c230212e4000d0a">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">rf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_model</span>(smote, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rand_forest</span>())</span>
<span id="cb10-2"></span>
<span id="cb10-3">preds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rf_preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict_prob</span>(</span>
<span id="cb10-4">  rf,</span>
<span id="cb10-5">  data</span>
<span id="cb10-6">)</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cal_plot_breaks</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> truth_int, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> rf_preds)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Same issue again, albeit not quite as severe. And the same logic holds. In fact, it’s even more straightforward with tree-based models. In a decision tree, you would determine a predicted probability by seeing what proportion of the labels in the leaf node that you end up in based on the features belong to the positive class. But then there’s the same logic as before: We’ve just artifically increased the number of instances of the positive class dramatically, so of course the proportion of labels belonging to the positive class in our leaf nodes will increase.</p>
</section>
<section id="coefficients" class="level2">
<h2 class="anchored" data-anchor-id="coefficients">Coefficients</h2>
<p>Looking at the coefficients of our three models can help understand what’s going on here.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-12_5a969a88051dbbffacc249a1c1f0b7d3">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb11-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> unbalanced_model, </span>
<span id="cb11-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Undersampled"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> balanced_model, </span>
<span id="cb11-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smote"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> smote_model</span>
<span id="cb11-5">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(tidy) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">imap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(.x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Term"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> term, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y :=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"estimate"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reduce</span>(inner_join, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Term"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>()</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">Term</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Original</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Undersampled</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">Smote</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">(Intercept)</td>
<td style="text-align: right;">-5.1601677</td>
<td style="text-align: right;">-4.0441444</td>
<td style="text-align: right;">-4.4363999</td>
</tr>
<tr class="even">
<td style="text-align: left;">cl_thickness</td>
<td style="text-align: right;">0.9354593</td>
<td style="text-align: right;">0.8190776</td>
<td style="text-align: right;">0.9159715</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>In all three models, the coefficient associated with the clump thickness is very similar. This should make sense intuitively: Our sampling was at random, so the relationship between the clump thickness and whether or not the tumor was malignant shouldn’t change at all.</p>
<p>The thing that does change, though, is the intercept term. In both the model where we undersampled from the majority class and in the SMOTE model, the intercept term is significantly higher than it is in the original model on the unbalanced data. This should feel similar intuitively to the idea of the baseline guess from before. As its core, the intercept term in your logistic regression model is the guess you’d make with “no” information (in this particular case, no information means a clump thickness of 0).</p>
<p>We can illustrate this more clearly with three intercept-only models:</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-13_78f63c1f411976c37ab83d6c098efd89">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">unbalanced_intercept_only <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span>
<span id="cb12-2">undersampled_intecept_only <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> balanced, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span>
<span id="cb12-3">smote_intercept_only <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> smote, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span></code></pre></div>
</div>
<p>Now, let’s compare the intercept coefficients of these three models on a probability (read: not a log-odds) scale.</p>
<div class="cell" data-hash="balancing-classes_cache/html/unnamed-chunk-14_59bf20284da8fe1d1340e69222ef67fe">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">convert_log_odds_to_probability <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb13-2">  odds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(x)</span>
<span id="cb13-3">  odds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> odds)</span>
<span id="cb13-4">}</span>
<span id="cb13-5"></span>
<span id="cb13-6">unbalanced_intercept <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(unbalanced_intercept_only)</span>
<span id="cb13-7">undersampled_intercept <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(undersampled_intecept_only)</span>
<span id="cb13-8">smote_intercept <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(smote_intercept_only)</span>
<span id="cb13-9"></span>
<span id="cb13-10">intercepts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb13-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">original =</span>     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_log_odds_to_probability</span>(unbalanced_intercept),</span>
<span id="cb13-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">undersampled =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_log_odds_to_probability</span>(undersampled_intercept),</span>
<span id="cb13-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">smote =</span>        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convert_log_odds_to_probability</span>(smote_intercept)</span>
<span id="cb13-14">)</span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pretty_print</span>(intercepts)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">original</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">undersampled</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">smote</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">0.3447783</td>
<td style="text-align: right;">0.5</td>
<td style="text-align: right;">0.5</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>And it’s just as we expected: The intercept coefficient in the SMOTE model and the undersampling model are exactly 1/2, which corresponds to the fact that we balanced the classes to be exactly 50/50. And the intercept in the original model with the unbalanced classes is exactly the percentage of the data made up by the true class (malignant).</p>
</section>
<section id="when-to-rebalance" class="level2">
<h2 class="anchored" data-anchor-id="when-to-rebalance">When To Rebalance</h2>
<p>There are some times where re-balancing the classes in your training data might make sense. One application that comes to mind is if you have strong prior information that your training data is actually biased, and is over-representing one of the two classes.</p>
<p>For instance, let’s imagine we have data from 1000 breast cancer patients and we know a priori that about 20% of tumors are malignant, but in the training data, maybe 40% of the tumors we have are malignant. Depending on the long-term goal of the project, it might make sense to undersample from the malignant cases to get the overall rate of tumors being malignant down to around the 20% prior.</p>
<p>The rationale behind doing this would be that if you wanted your model to generalize well to future cases (outside of your training set) and you knew that in the broader population about 20% of cases are malignant, your biased training data could very well result in biased predictions out-of-sample even if your predictions look good in-sample.</p>
<p>Another case where rebalancing can make sense is if you plan to use a technique like <a href="https://en.wikipedia.org/wiki/Platt_scaling">Platt Scaling</a> or <a href="https://en.wikipedia.org/wiki/Isotonic_regression#:~:text=In%20statistics%20and%20numerical%20analysis,to%20the%20observations%20as%20possible.">Isotonic Regression</a> to re-calibrate your predictions ex-post. These methods are a bit beyond the scope of this post, but they’re both fantastic ways to make sure a model is giving well-calibrated predictions while using classifiers that don’t guarantee calibration, such as tree-based models. For instance, a combination of upsampling with SMOTE, using an often poorly-calibrated classifier like a tree booster such as XGBoost, and then re-calibrating ex-post with a Platt Scaler can result in a rare win-win scenario: Well-calibrated predictions, but also improved performance on normal classification metrics like the F1 score or AUC.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In the <a href="https://matthewrkaye.com/posts/2023-03-20-metrics-calibration/calibration.html">previous post</a>, I wrote about calibration. In short, I think calibration is the single most important metric in evaluating the performance of classification models.</p>
<p>And so with that in mind, the main takeaway of this post is that you should be <em>very</em> careful about trying to “fix” the “problem” of class imbalances when you’re working on classification problems. If I could summarize the principle that I would follow in just a sentence, it would be that class imbalances often reflect important information about the prevalence of your classes in the real world, and it’s often risky to dismiss that information in the name of having data that’s split equally. In other words, class imbalances are usually not a problem at all. They’re a feature, not a bug.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/2023-03-25-balancing-classes/balancing-classes.html</guid>
  <pubDate>Sat, 01 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Interpreting AUC-ROC</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2023-03-09-on-auc-roc/index.html</link>
  <description><![CDATA[ 



<p><strong>AUC</strong> goes by many names: AUC, AUC-ROC, ROC-AUC, the area under the curve, and so on. It’s an extremely important metric for evaluating machine learning models and it’s an uber-popular data science interview question. It’s also, at least in my experience, the single most commonly misunderstood metric in data science.</p>
<p>I’ve heard several common misunderstandings or flat-out falsehoods from people in all kinds of roles discussing AUC. The biggest offenses tend to come from overcomplicating the topic. It’s easy to see the <a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic">Wikipedia page for the ROC curve</a> and be confused, intimidated, or some combination of the two. ROC builds off of other fundamental data science concepts – the true and false positives rates of a classifier – so it’s certainly not a good place to <em>start</em> learning about metrics for evaluating the performance of models.</p>
<p>The most common cause for confusion about AUC seems to come from the plot of the <em>ROC</em> curve, and nothing particularly special about AUC itself. Generally, I’ll hear AUC explained as being the area under the ROC curve, and that it’s all about testing how well your model balances false positives and false negatives. That’s all well and good, but it doesn’t give someone new to AUC any intuition about what AUC <em>actually</em> means in practice. For instance, let’s imagine we’re trying to predict the chance that a student is accepted at Carleton College – a quite common problem at CollegeVine! How does saying “AUC tells me about how my model is balancing false negatives and false positives” tell me anything about how well my model is doing at predicting that student’s chances?</p>
<p>The main issue I have with this factual-yet-unhelpful explanation of AUC is just that: While it may be true, it doesn’t get to the point. And even worse, it’s sometimes used as a crutch: A fallback answer when someone feels stuck when asked how to interpret AUC in real, practical terms.</p>
<p>So in this post, I’ll focus on just one thing, then: Answering the question above about how to interpret AUC.</p>
<section id="what-is-auc" class="level2">
<h2 class="anchored" data-anchor-id="what-is-auc">What is AUC?</h2>
<p>As I mentioned, it’s usually not helpful to try to explain AUC to someone by telling them that it’s just the area under the ROC curve, or that it’s a metric you can use for predicting <em>probabilities</em> as opposed to predicting <em>classes</em>, or that it’s a metric trying to balance false positives and false negatives. None of those things get to the crux of the problem.</p>
<p>So what <em>is</em> AUC, then? It’s pretty simple: Let’s imagine a model <img src="https://latex.codecogs.com/png.latex?M"> being evaluated on data <img src="https://latex.codecogs.com/png.latex?X"> where <img src="https://latex.codecogs.com/png.latex?X"> contains some instances of the true class and some instances of the false class. The AUC of <img src="https://latex.codecogs.com/png.latex?M"> on <img src="https://latex.codecogs.com/png.latex?X"> is the probability that given a random item from <img src="https://latex.codecogs.com/png.latex?X"> belonging to the <em>true</em> class (<img src="https://latex.codecogs.com/png.latex?T">) and another random item from <img src="https://latex.codecogs.com/png.latex?X"> belonging to the <em>false</em> class (<img src="https://latex.codecogs.com/png.latex?F">), that the model predicts that the probability of <img src="https://latex.codecogs.com/png.latex?T"> being true (belonging to the true class) is higher than the probability of <img src="https://latex.codecogs.com/png.latex?F"> being true (belonging to the true class).</p>
<p>Let’s go back to the example about Carleton admissions, and let’s imagine that we have a model that gives a probability of admission to Carleton given some information about a student. If I give the model one random <em>accepted</em> student and one random <em>rejected</em> student, the AUC of the model is the probability that the accepted student had a higher chance of acceptance (as estimated by the model) than the rejected student did.</p>
<p>For more on this, I’d refer everyone to <a href="https://developers.google.com/machine-learning/crash-course/classification/roc-and-auc">this fantastic blog post</a> by the team at Google, which does a great job at explaining further and/or better.</p>
</section>
<section id="a-simple-implementation" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-implementation">A Simple Implementation</h2>
<p>The easiest way to convey this idea might be to show a simple implementation of AUC. Below is some R code.</p>
<p>First, let’s start by writing a function to do exactly what’s described above. Again, here’s the algorithm given some evaluation data:</p>
<ol type="1">
<li>Choose a random item from the <code>true</code> class.</li>
<li>Choose a random item from the <code>false</code> class.</li>
<li>Make a prediction on each of the two items.</li>
<li>If the predicted probability for the actually true item is greater than the predicted probability for the actually false item, return true. Otherwise, return false. If they’re equal, flip a coin.</li>
<li>Repeat 1-4 many times, and calculate the proportion of the time your model guessed correctly. This is your AUC.</li>
</ol>
<p>Now, let’s write this in R with a little help from some vectorization.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Our AUC implementation</span></span>
<span id="cb1-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## In this implementation, we take a data frame containing a "truth" (i.e. whether</span></span>
<span id="cb1-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## the example is _actually_ in either the true class or the false class)</span></span>
<span id="cb1-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## and an "estimate" (our predicted probability).</span></span>
<span id="cb1-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## This implementation is in line with how {{yardstick}} implements all of its metrics</span></span>
<span id="cb1-10">interpretable_auc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"truth"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"estimate"</span>) {</span>
<span id="cb1-11">  </span>
<span id="cb1-12">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## First, subset the data down to just trues and just falses, separately</span></span>
<span id="cb1-13">  trues <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(data, .data[[truth_col]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-14">  falses <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(data, .data[[truth_col]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-15">  </span>
<span id="cb1-16">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Sample the predicted probabilities for N `true` examples, with replacement</span></span>
<span id="cb1-17">  random_trues <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(trues[[estimate_col]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-18">  </span>
<span id="cb1-19">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Do the same for N `false` examples</span></span>
<span id="cb1-20">  random_falses <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(falses[[estimate_col]], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## If the predicted probability for the actually true</span></span>
<span id="cb1-23">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  item is greater than that of the actually false item,</span></span>
<span id="cb1-24">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  return `true`. </span></span>
<span id="cb1-25">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## If the two are equal, flip a coin.</span></span>
<span id="cb1-26">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Otherwise, return false.</span></span>
<span id="cb1-27">  true_wins <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb1-28">    random_trues <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> random_falses,</span>
<span id="cb1-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(N) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.50</span>,</span>
<span id="cb1-30">    random_trues <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> random_falses</span>
<span id="cb1-31">  )</span>
<span id="cb1-32">  </span>
<span id="cb1-33">  <span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Compute the percentage of the time our model was "right"</span></span>
<span id="cb1-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(true_wins)</span>
<span id="cb1-35">}</span></code></pre></div>
</div>
<p>Next, we can test our simple implementation against <code>yardstick</code> on some real data. For the sake of demonstration, I just used the built-in <code>mtcars</code> data. Here’s how the data looks:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(knitr)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(kableExtra)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Doing a little data wrangling</span></span>
<span id="cb2-5">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(</span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(vs),</span>
<span id="cb2-8">    mpg,</span>
<span id="cb2-9">    cyl</span>
<span id="cb2-10">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb2-12"></span>
<span id="cb2-13">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice_sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Six rows of our training data'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full_width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<caption>Six rows of our training data</caption>
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">vs</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">mpg</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">cyl</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: right;">18.7</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="even">
<td style="text-align: left;">0</td>
<td style="text-align: right;">15.8</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="odd">
<td style="text-align: left;">1</td>
<td style="text-align: right;">21.4</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="even">
<td style="text-align: left;">1</td>
<td style="text-align: right;">30.4</td>
<td style="text-align: right;">4</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0</td>
<td style="text-align: right;">19.2</td>
<td style="text-align: right;">8</td>
</tr>
<tr class="even">
<td style="text-align: left;">0</td>
<td style="text-align: right;">16.4</td>
<td style="text-align: right;">8</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now, let’s fit a few logistic regression models to the data to see how our AUC implementation compares to the <code>yardstick</code> one.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(yardstick)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Simplest model -- Just an intercept. AUC should be 50%</span></span>
<span id="cb3-5">model1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Adding another predictor</span></span>
<span id="cb3-8">model2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## And another</span></span>
<span id="cb3-11">model3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glm</span>(vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cyl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> binomial)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Make predictions for all three models</span></span>
<span id="cb3-14">preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vs,</span>
<span id="cb3-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>),</span>
<span id="cb3-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>),</span>
<span id="cb3-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"response"</span>)</span>
<span id="cb3-19">)</span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## For each model, compute AUC with both methods: Yardstick (library) and "homemade"</span></span>
<span id="cb3-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb3-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"m3"</span>),</span>
<span id="cb3-24">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> {</span>
<span id="cb3-25">    yardstick <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">roc_auc</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> truth, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>.x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">event_level =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"second"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.estimate</span>
<span id="cb3-26">    homemade <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interpretable_auc</span>(preds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">N =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth_col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"truth"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate_col =</span> .x)</span>
<span id="cb3-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> .x,</span>
<span id="cb3-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yardstick =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(yardstick, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb3-30">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">homemade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(homemade, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-31">    )</span>
<span id="cb3-32">  }</span>
<span id="cb3-33">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yardstick vs. Our Implementation'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable_styling</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full_width =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<caption>Yardstick vs. Our Implementation</caption>
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">model</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">yardstick</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">homemade</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">m1</td>
<td style="text-align: right;">0.50</td>
<td style="text-align: right;">0.50</td>
</tr>
<tr class="even">
<td style="text-align: left;">m2</td>
<td style="text-align: right;">0.91</td>
<td style="text-align: right;">0.91</td>
</tr>
<tr class="odd">
<td style="text-align: left;">m3</td>
<td style="text-align: right;">0.95</td>
<td style="text-align: right;">0.95</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>As we’ve seen here, AUC actually shouldn’t be all that much of a cause for confusion! The way I like to frame it is this: The AUC of your model is how good your model is at making even-odds bets. If I give your model two options and ask it to pick which one it thinks is more likely, a “better” model (by AUC standards) will be better at identifying the true class more often.</p>
<p>In real terms, that’s a meaningful, good thing. If we’re trying to predict the probability of a cancer patient having cancer, it’s important that our model can distinguish between people with cancer and people without it when given one person from each class. If it couldn’t - meaning the model was either randomly guessing or doing worse than random - the AUC would be 50% (or below 50%, in the worse-than-random disaster scenario).</p>
</section>
<section id="additional-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="additional-thoughts">Additional Thoughts</h2>
<p>I also often hear the misconception that AUC is sensitive to things like class imbalance. This means that if the true class makes up a disproportionately large (or small) proportion of the evaluation data, that can skew the AUC. But based on the intuition we just built before, that’s of course not true. The key thing to remember is that the model is given one true and one false example. In choosing those, it doesn’t matter if the true class only makes up 0.005% of all of the examples in the evaluation data: AUC is only evaluating the model on its ability to determine <em>which</em> of the two is the true class.</p>
<p>However, there is one thing related to class imbalance, and just sample size in general, that <em>would</em> affect AUC, which is the raw number of examples of each class in the evaluation data. If, for instance, you had only a single instance of the <code>true</code> class in the evaluation set, then the AUC of the model is entirely determined by how good the predictions of the model are on that single example. For instance, if we have a single <code>true</code> class and the model predicts a 100% probability of it being true, then, assuming the predictions for all of the other examples in the evaluation set are <em>not</em> 100%, the AUC of the model as evaluated on that data is 100%. This isn’t necessarily because the model is “good” in any sense, but just because the model is over-indexing to a single good prediction in the evaluation set. In practice though, this AUC estimate wouldn’t generalize. As we got more data, the predictions for all the true classes would certainly not all be 100%, so the AUC of the model would go down over time.</p>
<p>Fortunately, there’s an easy fix for this problem. AUCs are a point estimate, but we could also estimate a margin of error or a confidence interval for our AUC. For a situation where we only have a single instance of the true class in the evaluation set, the margin of error for our AUC would be very wide.</p>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>Hopefully this post helped give a better intuition for what AUC actually is! A couple of major takeaways:</p>
<ol type="1">
<li>AUC doesn’t need to be this super complicated thing about trading off between false positives and negatives and trying many different classification thresholds and such. In my opinion, it’s much simpler to just think about it as the likelihood of a guess that your model makes between two choices being correct.</li>
<li>AUC isn’t affected by class imbalances.</li>
</ol>


</section>

 ]]></description>
  <category>data science</category>
  <category>R</category>
  <guid>https://www.matthewrkaye.com/posts/2023-03-09-on-auc-roc/index.html</guid>
  <pubDate>Thu, 09 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Working With Your Fitbit Data in R</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2021-06-08-working-with-your-fitbit-data-in-r/index.html</link>
  <description><![CDATA[ 



<section id="note-this-post-was-updated-as-of-3252023-for-fitbitr-v0.3.0" class="level3">
<h3 class="anchored" data-anchor-id="note-this-post-was-updated-as-of-3252023-for-fitbitr-v0.3.0">Note: This post was updated as of 3/25/2023 for <code>fitbitr v0.3.0</code></h3>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><code>fitbitr 0.1.0</code> is now available on CRAN! You can install it with</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fitbitr"</span>)</span></code></pre></div>
<p>or you can get the latest dev version with</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## install.packages("devtools")</span></span>
<span id="cb2-2">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrkaye97/fitbitr"</span>)</span></code></pre></div>
<p><code>fitbitr</code> makes it easy to pull your Fitbit data into R and use it for whatever interests you: personal projects, visualization, medical purposes, etc.</p>
<p>This post shows how you might use <code>fitbitr</code> to pull and visualize some of your data.</p>
</section>
<section id="sleep" class="level2">
<h2 class="anchored" data-anchor-id="sleep">Sleep</h2>
<p>First, you should either generate a new token with <code>generate_token()</code> or load a cached token with <code>load_cached_token()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(fitbitr)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Dates to use throughout post</span></span>
<span id="cb3-6">start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2020-01-01"</span>)</span>
<span id="cb3-7">end <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2021-10-18"</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_fitbitr_token</span>()</span></code></pre></div>
</div>
<p>And then you can start pulling your data!</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-4_2f14a0443cc6b122ece6398ada43397c">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">sleep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_sleep_summary</span>(</span>
<span id="cb4-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_date =</span> end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_date =</span> end</span>
<span id="cb4-4">)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(sleep)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: right;" data-quarto-table-cell-role="th">log_id</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">date</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">start_time</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">end_time</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">duration</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">efficiency</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">minutes_to_fall_asleep</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">minutes_asleep</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">minutes_awake</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">minutes_after_wakeup</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">time_in_bed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">34207402675</td>
<td style="text-align: left;">2021-10-18</td>
<td style="text-align: left;">2021-10-17 23:01:00</td>
<td style="text-align: left;">2021-10-18 06:30:00</td>
<td style="text-align: right;">26940000</td>
<td style="text-align: right;">91</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">391</td>
<td style="text-align: right;">58</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">449</td>
</tr>
<tr class="even">
<td style="text-align: right;">34193579435</td>
<td style="text-align: left;">2021-10-17</td>
<td style="text-align: left;">2021-10-16 23:03:30</td>
<td style="text-align: left;">2021-10-17 08:11:00</td>
<td style="text-align: right;">32820000</td>
<td style="text-align: right;">95</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">472</td>
<td style="text-align: right;">75</td>
<td style="text-align: right;">4</td>
<td style="text-align: right;">547</td>
</tr>
<tr class="odd">
<td style="text-align: right;">34183584553</td>
<td style="text-align: left;">2021-10-16</td>
<td style="text-align: left;">2021-10-15 22:46:30</td>
<td style="text-align: left;">2021-10-16 06:57:30</td>
<td style="text-align: right;">29460000</td>
<td style="text-align: right;">94</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">424</td>
<td style="text-align: right;">67</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">491</td>
</tr>
<tr class="even">
<td style="text-align: right;">34174304493</td>
<td style="text-align: left;">2021-10-15</td>
<td style="text-align: left;">2021-10-14 23:50:00</td>
<td style="text-align: left;">2021-10-15 08:20:30</td>
<td style="text-align: right;">30600000</td>
<td style="text-align: right;">94</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">438</td>
<td style="text-align: right;">72</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">510</td>
</tr>
<tr class="odd">
<td style="text-align: right;">34159751655</td>
<td style="text-align: left;">2021-10-14</td>
<td style="text-align: left;">2021-10-13 23:34:00</td>
<td style="text-align: left;">2021-10-14 09:18:00</td>
<td style="text-align: right;">35040000</td>
<td style="text-align: right;">98</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">524</td>
<td style="text-align: right;">60</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">584</td>
</tr>
<tr class="even">
<td style="text-align: right;">34146865838</td>
<td style="text-align: left;">2021-10-13</td>
<td style="text-align: left;">2021-10-12 23:50:00</td>
<td style="text-align: left;">2021-10-13 08:32:30</td>
<td style="text-align: right;">31320000</td>
<td style="text-align: right;">94</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">461</td>
<td style="text-align: right;">61</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">522</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Once you’ve loaded some data, you can visualize it!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(zoo)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scales)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb5-4"></span>
<span id="cb5-5">sleep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sleep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-7">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(date),</span>
<span id="cb5-8">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(start_time),</span>
<span id="cb5-9">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(end_time),</span>
<span id="cb5-10">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time)), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create numeric times</span></span>
<span id="cb5-11">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sm =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span>(start_time),</span>
<span id="cb5-12">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">st =</span> sh <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb5-13">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(end_time),</span>
<span id="cb5-14">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">em =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span>(end_time),</span>
<span id="cb5-15">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">et =</span> eh <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> em<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb5-16">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mst =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rollmean</span>(st, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create moving averages</span></span>
<span id="cb5-17">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">met =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rollmean</span>(et, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb5-18">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">year</span>(start_time)</span>
<span id="cb5-19">)</span>
<span id="cb5-20"></span>
<span id="cb5-21">sleep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> et), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coral'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> st), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dodgerblue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> met), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coral'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mst), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dodgerblue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(</span>
<span id="cb5-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb5-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trans_format</span>(</span>
<span id="cb5-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, x), </span>
<span id="cb5-31">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">comma_format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">suffix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">accuracy =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-32">      )</span>
<span id="cb5-33">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-35">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_fivethirtyeight</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_breaks =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1 month'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_labels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%b'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> year, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">space =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'free'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'free_x'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">switch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.spacing.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.placement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outside"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.matthewrkaye.com/posts/2021-06-08-working-with-your-fitbit-data-in-r/static/rmarkdown-libsunnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This bit of code makes a nicely formatted plot of the times you went to sleep and woke up over the past three months. You can also use <code>fitbitr</code> to expand the time window with a little help from <code>purrr</code> (the Fitbit API rate limits you, so you can’t request data for infinitely long windows in a single request).</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-6_af35efd52163eeefe06857cbd3a33893">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Pull three months of data</span></span>
<span id="cb6-2">sleep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb6-3">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb6-4">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleep_summary</span>(</span>
<span id="cb6-5">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x), </span>
<span id="cb6-6">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-7">  )</span>
<span id="cb6-8">)</span></code></pre></div>
</div>
<p>After pulling the data, we can use the same code again to visualize it.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">sleep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sleep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb7-3">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(date),</span>
<span id="cb7-4">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(start_time),</span>
<span id="cb7-5">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_time =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_datetime</span>(end_time),</span>
<span id="cb7-6">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(start_time)), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create numeric times</span></span>
<span id="cb7-7">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sm =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span>(start_time),</span>
<span id="cb7-8">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">st =</span> sh <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb7-9">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eh =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hour</span>(end_time),</span>
<span id="cb7-10">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">em =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">minute</span>(end_time),</span>
<span id="cb7-11">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">et =</span> eh <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> em<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb7-12">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mst =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rollmean</span>(st, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#create moving averages</span></span>
<span id="cb7-13">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">met =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rollmean</span>(et, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb7-14">   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">year</span>(start_time)</span>
<span id="cb7-15">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distinct</span>()</span>
<span id="cb7-17"></span>
<span id="cb7-18">sleep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> et), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coral'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> st), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dodgerblue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> met), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coral'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> mst), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dodgerblue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> T) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(</span>
<span id="cb7-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb7-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trans_format</span>(</span>
<span id="cb7-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, x), </span>
<span id="cb7-28">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">comma_format</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">suffix =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">accuracy =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-29">      )</span>
<span id="cb7-30">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_fivethirtyeight</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_breaks =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1 month'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_labels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%b'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> year, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">space =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'free'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'free_x'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">switch =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.spacing.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.placement =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outside"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.matthewrkaye.com/posts/2021-06-08-working-with-your-fitbit-data-in-r/static/rmarkdown-libsunnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="heart-rate-and-steps" class="level2">
<h2 class="anchored" data-anchor-id="heart-rate-and-steps">Heart Rate and Steps</h2>
<p>You can also pull your heart rate data with <code>fitbitr</code>. Maybe we’re curious about seeing how the number of minutes spent in the “fat burn,” “cardio,” and “peak” zones correlates with the number of steps taken that day. Let’s find out!</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-8_df41135438270860bd7e0fd1091a4efa">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">hr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb8-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb8-3">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">heart_rate_zones</span>(</span>
<span id="cb8-4">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x), </span>
<span id="cb8-5">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-6">  )</span>
<span id="cb8-7">)</span>
<span id="cb8-8"></span>
<span id="cb8-9">steps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(</span>
<span id="cb8-10">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb8-11">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span>(</span>
<span id="cb8-12">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x), </span>
<span id="cb8-13">    end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(.x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-14">  )</span>
<span id="cb8-15">)</span></code></pre></div>
</div>
<p>First, we can examine the heart rate data:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(hr)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">date</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">zone</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">min_hr</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">max_hr</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">minutes_in_zone</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">calories_out</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2021-07-18</td>
<td style="text-align: left;">Out of Range</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">113</td>
<td style="text-align: right;">1440</td>
<td style="text-align: right;">2530.16460</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-18</td>
<td style="text-align: left;">Fat Burn</td>
<td style="text-align: right;">113</td>
<td style="text-align: right;">141</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00000</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2021-07-18</td>
<td style="text-align: left;">Cardio</td>
<td style="text-align: right;">141</td>
<td style="text-align: right;">176</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00000</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-18</td>
<td style="text-align: left;">Peak</td>
<td style="text-align: right;">176</td>
<td style="text-align: right;">220</td>
<td style="text-align: right;">0</td>
<td style="text-align: right;">0.00000</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2021-07-19</td>
<td style="text-align: left;">Out of Range</td>
<td style="text-align: right;">30</td>
<td style="text-align: right;">113</td>
<td style="text-align: right;">1408</td>
<td style="text-align: right;">2689.45124</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-19</td>
<td style="text-align: left;">Fat Burn</td>
<td style="text-align: right;">113</td>
<td style="text-align: right;">141</td>
<td style="text-align: right;">9</td>
<td style="text-align: right;">86.59917</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>and the steps data:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(steps)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">date</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">steps</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">2021-07-18</td>
<td style="text-align: right;">5620</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-19</td>
<td style="text-align: right;">7537</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2021-07-20</td>
<td style="text-align: right;">5513</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-21</td>
<td style="text-align: right;">9014</td>
</tr>
<tr class="odd">
<td style="text-align: left;">2021-07-22</td>
<td style="text-align: right;">10883</td>
</tr>
<tr class="even">
<td style="text-align: left;">2021-07-23</td>
<td style="text-align: right;">2975</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>Now, let’s plot them against each other.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> hr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(zone <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Out of Range"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_minutes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(minutes_in_zone), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.groups =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drop"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_join</span>(steps, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>)</span>
<span id="cb11-6">  </span>
<span id="cb11-7">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">steps =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(steps)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(total_minutes) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb11-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb11-12">      steps,</span>
<span id="cb11-13">      total_minutes</span>
<span id="cb11-14">    )</span>
<span id="cb11-15">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> F) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_log10</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.matthewrkaye.com/posts/2021-06-08-working-with-your-fitbit-data-in-r/static/rmarkdown-libsunnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Or maybe it’d be interesting to predict your zone minutes from your steps:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">predictions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">steps =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(steps)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(total_minutes <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> steps, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> .) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">  broom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), round, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(predictions)</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">term</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">estimate</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">std.error</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">statistic</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">p.value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">(Intercept)</td>
<td style="text-align: right;">23.09761</td>
<td style="text-align: right;">5.77502</td>
<td style="text-align: right;">3.99957</td>
<td style="text-align: right;">0.00011</td>
</tr>
<tr class="even">
<td style="text-align: left;">steps</td>
<td style="text-align: right;">0.00252</td>
<td style="text-align: right;">0.00056</td>
<td style="text-align: right;">4.52922</td>
<td style="text-align: right;">0.00001</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
<section id="wrapping-up" class="level2">
<h2 class="anchored" data-anchor-id="wrapping-up">Wrapping Up</h2>
<p>And that’s it! Hopefully this helped show how <code>fitbitr</code> makes pulling your data easy, and gets you curious about the insights you can glean from your own data. The Fitbit API gives you access to so much interesting information about yourself, your habits, your fitness, and so much more, and <code>fitbitr</code> is just meant to be a door into that gold mine.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/2021-06-08-working-with-your-fitbit-data-in-r/index.html</guid>
  <pubDate>Tue, 08 Jun 2021 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Highlights From rstudio::global</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2021-02-11-highlights-from-rstudio-global/index.html</link>
  <description><![CDATA[ 



<p><code>rstudio::global</code>, this year’s iteration of the annual RStudio conference, was a few weeks ago. Here were some highlights:</p>
<section id="talks" class="level2">
<h2 class="anchored" data-anchor-id="talks">Talks</h2>
<p>There were a few talks I really loved:</p>
<ul>
<li><a href="https://rstudio.com/resources/rstudioglobal-2021/using-r-to-up-your-experimentation-game/">Using R to Up Your Experimentation Game</a>, by Shirbi Ish-Shalom. On experimentation, sequential testing, taking big swings, and being statistically rigorous</li>
<li><a href="https://rstudio.com/resources/rstudioglobal-2021/maintaining-the-house-the-tidyverse-built/">Maintaining the House the Tidyverse Built</a>, by Hadley Wickham. On building and maintaining the Tidyverse, and what package maintenance in the real world is like when you have millions of downloads.</li>
<li><a href="https://rstudio.com/resources/rstudioglobal-2021/organization-how-to-make-internal-r-packages-part-of-your-team/">oRganization: How to Make Internal R Packages Part of Your Team</a>, by Emily Riederer. On how using internal packages (like <code>collegeviner</code> at CollegeVine!) can improve your R workflow and make teamwork in R dramatically easier, smoother, and more efficient.</li>
<li><a href="https://rstudio.com/resources/rstudioglobal-2021/fairness-and-data-science-failures-factors-and-futures/">Fairness and Data Science: Failures, Factors, and Futures</a>, by Grant Fleming. On model fairness, bias, and evaluation techniques, and why they’re important to get right.</li>
</ul>
</section>
<section id="cool-new-things" class="level2">
<h2 class="anchored" data-anchor-id="cool-new-things">Cool New Things</h2>
<ul>
<li><code>finetune</code>, Max Kuhn’s new <code>tune</code>-adjacent package, is live (albeit a little buggy)! It has some cool new model tuning algorithms, including racing methods with <code>tune_race_anova()</code> and <code>tune_race_win_loss()</code>, in addition to my personal favorite: <code>tune_sim_anneal()</code> for Simulated Annealing! <a href="https://rstudio.com/resources/rstudioglobal-2021/whats-new-in-tidymodels/">Link to the talk</a></li>
<li>Major improvements to <code>shiny</code>, including some serious caching upgrades that’ll improve performance dramatically! <a href="https://rstudio.com/resources/rstudioglobal-2021/making-shiny-apps-faster-with-caching/">Link to the talk</a></li>
</ul>
</section>
<section id="other-highlights" class="level2">
<h2 class="anchored" data-anchor-id="other-highlights">Other Highlights</h2>
<ul>
<li>Meeting a bunch of people in the breakout sessions! This year, there were virtual “tables” where you could drag your avatar to “sit down”, and once you were close enough to a table you could hear all of its conversation.</li>
</ul>


</section>

 ]]></description>
  <category>R</category>
  <category>data science</category>
  <guid>https://www.matthewrkaye.com/posts/2021-02-11-highlights-from-rstudio-global/index.html</guid>
  <pubDate>Thu, 11 Feb 2021 05:00:00 GMT</pubDate>
</item>
<item>
  <title>What’s New in slackr 2.1.0</title>
  <dc:creator>Matt Kaye</dc:creator>
  <link>https://www.matthewrkaye.com/posts/2021-02-07-what-s-new-in-slackr-2-1-0/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><code>slackr 2.1.0+</code> is live! There are a whole bunch of exciting changes that we (mostly <a href="https://github.com/andrie">Andrie de Vries</a> and I) have made to improve the package a bunch.</p>
</section>
<section id="changes" class="level2">
<h2 class="anchored" data-anchor-id="changes">Changes</h2>
<p>Here are some of the things that are new in <code>slackr 2.1.0+</code>. For more info on the package, check out the <a href="https://github.com/mrkaye97/slackr">Github repo</a> and the <a href="https://mrkaye97.github.io/slackr/index.html">pkgdown site</a>.</p>
<section id="ease-of-use-improvements" class="level3">
<h3 class="anchored" data-anchor-id="ease-of-use-improvements">Ease of Use Improvements</h3>
<ul>
<li>We’ve dramatically improved error messaging, so long gone are the days of errors like <code>No 'id' column found in 'x'</code>! Now, error messages should be far more helpful, with some hints about what might be going wrong.</li>
<li>We’ve updated the package documentation significantly, so now there’s a far more informative <a href="https://github.com/mrkaye97/slackr">README</a>, some vignettes, and a <a href="https://mrkaye97.github.io/slackr/index.html">pkgdown site</a>.</li>
<li>We’ve more clearly described the different use cases for <code>slackr</code>, in order to better help users set up <code>slackr</code> in a way that makes sense for them.</li>
</ul>
</section>
<section id="new-features" class="level3">
<h3 class="anchored" data-anchor-id="new-features">New Features</h3>
<ul>
<li>We’ve fixed a bunch of bugs that were preventing things like <code>icon_emoji</code> and <code>username</code> from working, so those are fixed now!</li>
<li>We’ve brought back some old functions that were removed in <code>slackr 2.0.0</code>: <code>slackr_history()</code> and <code>slackr_delete()</code>. See the docs for descriptions of what these functions can do.</li>
</ul>
</section>
<section id="back-end-changes" class="level3">
<h3 class="anchored" data-anchor-id="back-end-changes">Back-End Changes</h3>
<p>We’ve made a ton of changes for how <code>slackr</code> interacts with the Slack API:</p>
<ul>
<li>We now allow paging, which is especially helpful when you have a workspace of more than 1000 channels.</li>
<li>We cache requests to get lists of channels and users so that we don’t need to repeat common API calls. This speeds up calls to <code>slackr_***()</code> and limits how often you need to actually hit the API.</li>
<li>We’ve gotten rid of a really nasty implementation of channel caching (writing a local cache to the disk) in favor of the method described above.</li>
<li>We’ve factored out API calls into a separate function, which makes the package easier to understand and test.</li>
<li>Speaking of testing, we’ve implemented a whole bunch of unit tests, and will be working on more.</li>
</ul>
</section>
<section id="deprecations" class="level3">
<h3 class="anchored" data-anchor-id="deprecations">Deprecations</h3>
<ul>
<li>We’ve deprecated a bunch of camel case functions in favor of their snake case counterparts for simplicity. Don’t worry! These are soft-deprecated for now. They won’t go away fully until a future version of <code>slackr</code></li>
<li>We’ve deprecated <code>text_slackr</code> in favor of <code>slackr_msg</code>, since they do basically the same thing.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>R</category>
  <guid>https://www.matthewrkaye.com/posts/2021-02-07-what-s-new-in-slackr-2-1-0/index.html</guid>
  <pubDate>Sun, 07 Feb 2021 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
