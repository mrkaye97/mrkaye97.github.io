{
  "hash": "c9f9f0913c1f34c421a0ce78ba7beb18",
  "result": {
    "markdown": "---\ntitle: Working With Your Fitbit Data in R\nauthor: Matt Kaye\ndate: '2021-06-08'\ncategories: [R, data science]\nlastmod: '2021-06-08T21:26:23-04:00'\ntoc: true\n---\n\n\n\n\n## Introduction\n\n`fitbitr 0.1.0` is now available on CRAN! You can install it with\n\n``` r\ninstall.packages(\"fitbitr\")\n```\n\nor you can get the latest dev version with\n\n``` r\n## install.packages(\"devtools\")\ndevtools::install_github(\"mrkaye97/fitbitr\")\n```\n\n`fitbitr` makes it easy to pull your Fitbit data into R and use it for whatever interests you: personal projects, visualization, medical purposes, etc.\n\nThis post shows how you might use `fitbitr` to pull and visualize some of your data.\n\n## Sleep\n\nFirst, you should either generate a new token with `generate_token()` or load a cached token with `load_cached_token()`.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(fitbitr)\nlibrary(lubridate)\nlibrary(tidyverse)\n\n## Dates to use throughout post\nstart <- as_date(\"2020-01-01\")\nend <- as_date(\"2021-10-18\")\n\n# load_cached_token(\".httr-oauth\")\n```\n:::\n\n\nAnd then you can start pulling your data!\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-4_d869f5e763a1b9067febc3686cee8cec'}\n\n```{.r .cell-code}\nsleep <- sleep_summary(\n  start_date = end - months(3),\n  end_date = end\n)\n\nsleep %>% \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 11\n       log_id date       start_time          end_time            durat…¹ effic…²\n        <dbl> <date>     <dttm>              <dttm>                <int>   <int>\n1 33020894524 2021-07-18 2021-07-17 23:39:00 2021-07-18 07:58:00  2.99e7      98\n2 33033378227 2021-07-19 2021-07-18 22:17:30 2021-07-19 07:43:30  3.40e7      95\n3 33043882288 2021-07-20 2021-07-19 22:57:00 2021-07-20 06:38:30  2.77e7      96\n4 33060458937 2021-07-21 2021-07-20 23:24:30 2021-07-21 06:34:00  2.57e7      97\n5 33075070785 2021-07-22 2021-07-21 22:21:00 2021-07-22 06:55:30  3.08e7      90\n6 33087900074 2021-07-23 2021-07-22 23:36:30 2021-07-23 07:08:30  2.71e7      95\n# … with 5 more variables: minutes_to_fall_asleep <int>, minutes_asleep <int>,\n#   minutes_awake <int>, minutes_after_wakeup <int>, time_in_bed <int>, and\n#   abbreviated variable names ¹​duration, ²​efficiency\n```\n:::\n:::\n\n\nOnce you've loaded some data, you can visualize it!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(zoo)\nlibrary(scales)\nlibrary(ggthemes)\n\nsleep <- sleep %>%\n  mutate(\n   date = as_date(date),\n   start_time = as_datetime(start_time),\n   end_time = as_datetime(end_time),\n   sh = ifelse(hour(start_time) < 8, hour(start_time) + 24, hour(start_time)), #create numeric times\n   sm = minute(start_time),\n   st = sh + sm/60,\n   eh = hour(end_time),\n   em = minute(end_time),\n   et = eh + em/60,\n   mst = rollmean(st, 7, fill = NA), #create moving averages\n   met = rollmean(et, 7, fill = NA),\n   year = year(start_time)\n)\n\nsleep %>%\n    ggplot(aes(x = date))+\n    geom_line(aes(y = et), color = 'coral', alpha = .3, na.rm = T)+\n    geom_line(aes(y = st), color = 'dodgerblue', alpha = .3, na.rm = T)+\n    geom_line(aes(y = met), color = 'coral', na.rm=T)+\n    geom_line(aes(y = mst), color = 'dodgerblue', na.rm=T)+\n    scale_y_continuous(breaks = seq(0, 30, 2),\n                       labels = trans_format(function(x) ifelse(x > 23, x - 24, x), \n                                             format = scales::comma_format(suffix = \":00\", accuracy = 1))\n    )+\n    labs(x = \"Date\",\n         y = 'Time')+\n    theme_fivethirtyeight()+\n  scale_x_date(date_breaks = '1 month', date_labels = '%b', expand = c(0, 0))+\n  facet_grid(. ~ year, space = 'free', scales = 'free_x', switch = 'x') +\n  theme(panel.spacing.x = unit(0,\"line\"), \n        strip.placement = \"outside\")\n```\n\n::: {.cell-output-display}\n![](static/rmarkdown-libsunnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThis bit of code makes a nicely formatted plot of the times you went to sleep and woke up over the past three months. You can also use `fitbitr` to expand the time window with a little help from `purrr` (the Fitbit API rate limits you, so you can't request data for infinitely long windows in a single request).\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-6_af35efd52163eeefe06857cbd3a33893'}\n\n```{.r .cell-code}\n## Pull three months of data\nsleep <- map_dfr(\n  3:0,\n  ~ sleep_summary(\n    end - months(.x), \n    end - months(.x) + months(1)\n  )\n)\n```\n:::\n\n\nAfter pulling the data, we can use the same code again to visualize it.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsleep <- sleep %>%\n  mutate(\n   date = as_date(date),\n   start_time = as_datetime(start_time),\n   end_time = as_datetime(end_time),\n   sh = ifelse(hour(start_time) < 8, hour(start_time) + 24, hour(start_time)), #create numeric times\n   sm = minute(start_time),\n   st = sh + sm/60,\n   eh = hour(end_time),\n   em = minute(end_time),\n   et = eh + em/60,\n   mst = rollmean(st, 7, fill = NA), #create moving averages\n   met = rollmean(et, 7, fill = NA),\n   year = year(start_time)\n) %>%\n  distinct()\n\nsleep %>%\n    ggplot(aes(x = date))+\n    geom_line(aes(y = et), color = 'coral', alpha = .3, na.rm = T)+\n    geom_line(aes(y = st), color = 'dodgerblue', alpha = .3, na.rm = T)+\n    geom_line(aes(y = met), color = 'coral', na.rm=T)+\n    geom_line(aes(y = mst), color = 'dodgerblue', na.rm=T)+\n    scale_y_continuous(breaks = seq(0, 30, 2),\n                       labels = trans_format(function(x) ifelse(x > 23, x - 24, x), \n                                             format = scales::comma_format(suffix = \":00\", accuracy = 1))\n    )+\n    labs(x = \"Date\",\n         y = 'Time')+\n    theme_fivethirtyeight()+\n  scale_x_date(date_breaks = '1 month', date_labels = '%b', expand = c(0, 0))+\n  facet_grid(. ~ year, space = 'free', scales = 'free_x', switch = 'x') +\n  theme(panel.spacing.x = unit(0,\"line\"), \n        strip.placement = \"outside\")\n```\n\n::: {.cell-output-display}\n![](static/rmarkdown-libsunnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Heart Rate and Steps\n\nYou can also pull your heart rate data with `fitbitr`. Maybe we're curious about seeing how the number of minutes spent in the \"fat burn,\" \"cardio,\" and \"peak\" zones correlates with the number of steps taken that day. Let's find out!\n\n\n::: {.cell layout-align=\"center\" hash='index_cache/html/unnamed-chunk-8_df41135438270860bd7e0fd1091a4efa'}\n\n```{.r .cell-code}\nhr <- map_dfr(\n  3:0,\n  ~ heart_rate_zones(\n    end - months(.x), \n    end - months(.x) + months(1)\n  )\n)\n\nsteps <- map_dfr(\n  3:0,\n  ~ steps(\n    end - months(.x), \n    end - months(.x) + months(1)\n  )\n)\n```\n:::\n\n\nFirst, we can examine the heart rate data:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(hr)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  date       zone         min_hr max_hr minutes_in_zone calories_out\n  <date>     <chr>         <int>  <int>           <int>        <dbl>\n1 2021-07-18 Out of Range     30    113            1440       2530. \n2 2021-07-18 Fat Burn        113    141               0          0  \n3 2021-07-18 Cardio          141    176               0          0  \n4 2021-07-18 Peak            176    220               0          0  \n5 2021-07-19 Out of Range     30    113            1408       2689. \n6 2021-07-19 Fat Burn        113    141               9         86.6\n```\n:::\n:::\n\n\nand the steps data:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(steps)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  date       steps\n  <date>     <dbl>\n1 2021-07-18  5620\n2 2021-07-19  7537\n3 2021-07-20  5513\n4 2021-07-21  9014\n5 2021-07-22 10883\n6 2021-07-23  2975\n```\n:::\n:::\n\n\nNow, let's plot them against each other.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- hr %>%\n  filter(zone != \"Out of Range\") %>%\n  group_by(date) %>%\n  summarize(total_minutes = sum(minutes_in_zone), .groups = \"drop\") %>%\n  inner_join(steps, by = \"date\")\n  \ndf %>%\n  mutate(steps = as.numeric(steps)) %>%\n  filter(log(total_minutes) > 1) %>%\n  ggplot(\n    aes(\n      steps,\n      total_minutes\n    )\n  ) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = F) +\n  scale_x_log10() +\n  scale_y_log10()\n```\n\n::: {.cell-output-display}\n![](static/rmarkdown-libsunnamed-chunk-11-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nOr maybe it'd be interesting to predict your zone minutes from your steps:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf %>%\n  mutate(steps = as.numeric(steps)) %>%\n  lm(total_minutes ~ steps, data = .) %>%\n  broom::tidy() %>%\n  mutate(across(where(is.numeric), round, 5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  <chr>          <dbl>     <dbl>     <dbl>   <dbl>\n1 (Intercept) 23.1       5.78         4.00 0.00011\n2 steps        0.00252   0.00056      4.53 0.00001\n```\n:::\n:::\n\n\n## Wrapping Up\n\nAnd that's it! Hopefully this helped show how `fitbitr` makes pulling your data easy, and gets you curious about the insights you can glean from your own data. The Fitbit API gives you access to so much interesting information about yourself, your habits, your fitness, and so much more, and `fitbitr` is just meant to be a door into that gold mine.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}